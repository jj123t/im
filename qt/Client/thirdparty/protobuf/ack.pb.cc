// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ack.proto

#include "ack.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace im {
namespace protocol {
PROTOBUF_CONSTEXPR Ack::Ack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.content_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AckDefaultTypeInternal() {}
  union {
    Ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AckDefaultTypeInternal _Ack_default_instance_;
PROTOBUF_CONSTEXPR ackSingleChat::ackSingleChat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sender_id_)*/0
  , /*decltype(_impl_.receiver_id_)*/0
  , /*decltype(_impl_.time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ackSingleChatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ackSingleChatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ackSingleChatDefaultTypeInternal() {}
  union {
    ackSingleChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ackSingleChatDefaultTypeInternal _ackSingleChat_default_instance_;
PROTOBUF_CONSTEXPR ackUserInfo::ackUserInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ackUserInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ackUserInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ackUserInfoDefaultTypeInternal() {}
  union {
    ackUserInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ackUserInfoDefaultTypeInternal _ackUserInfo_default_instance_;
PROTOBUF_CONSTEXPR ackGroupChat::ackGroupChat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sender_id_)*/0
  , /*decltype(_impl_.group_id_)*/0
  , /*decltype(_impl_.time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ackGroupChatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ackGroupChatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ackGroupChatDefaultTypeInternal() {}
  union {
    ackGroupChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ackGroupChatDefaultTypeInternal _ackGroupChat_default_instance_;
PROTOBUF_CONSTEXPR ackGroupInfo::ackGroupInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.groupname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.group_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ackGroupInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ackGroupInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ackGroupInfoDefaultTypeInternal() {}
  union {
    ackGroupInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ackGroupInfoDefaultTypeInternal _ackGroupInfo_default_instance_;
PROTOBUF_CONSTEXPR ackFileTransfer::ackFileTransfer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sender_id_)*/0
  , /*decltype(_impl_.receiver_id_)*/0
  , /*decltype(_impl_.status_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ackFileTransferDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ackFileTransferDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ackFileTransferDefaultTypeInternal() {}
  union {
    ackFileTransfer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ackFileTransferDefaultTypeInternal _ackFileTransfer_default_instance_;
PROTOBUF_CONSTEXPR ackAddFriendToRecv::ackAddFriendToRecv(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sender_id_)*/0
  , /*decltype(_impl_.time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ackAddFriendToRecvDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ackAddFriendToRecvDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ackAddFriendToRecvDefaultTypeInternal() {}
  union {
    ackAddFriendToRecv _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ackAddFriendToRecvDefaultTypeInternal _ackAddFriendToRecv_default_instance_;
PROTOBUF_CONSTEXPR ackAddFriendToSend::ackAddFriendToSend(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.receiver_id_)*/0
  , /*decltype(_impl_.status_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ackAddFriendToSendDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ackAddFriendToSendDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ackAddFriendToSendDefaultTypeInternal() {}
  union {
    ackAddFriendToSend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ackAddFriendToSendDefaultTypeInternal _ackAddFriendToSend_default_instance_;
PROTOBUF_CONSTEXPR ackAddGroupToRecv::ackAddGroupToRecv(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sender_id_)*/0
  , /*decltype(_impl_.time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ackAddGroupToRecvDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ackAddGroupToRecvDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ackAddGroupToRecvDefaultTypeInternal() {}
  union {
    ackAddGroupToRecv _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ackAddGroupToRecvDefaultTypeInternal _ackAddGroupToRecv_default_instance_;
PROTOBUF_CONSTEXPR ackAddGroupToSend::ackAddGroupToSend(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.group_id_)*/0
  , /*decltype(_impl_.status_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ackAddGroupToSendDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ackAddGroupToSendDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ackAddGroupToSendDefaultTypeInternal() {}
  union {
    ackAddGroupToSend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ackAddGroupToSendDefaultTypeInternal _ackAddGroupToSend_default_instance_;
PROTOBUF_CONSTEXPR ackLoginRequest::ackLoginRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ackLoginRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ackLoginRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ackLoginRequestDefaultTypeInternal() {}
  union {
    ackLoginRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ackLoginRequestDefaultTypeInternal _ackLoginRequest_default_instance_;
}  // namespace protocol
}  // namespace im
static ::_pb::Metadata file_level_metadata_ack_2eproto[11];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ack_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ack_2eproto = nullptr;

const uint32_t TableStruct_ack_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::Ack, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::im::protocol::Ack, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::Ack, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::Ack, _impl_.timestamp_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::im::protocol::Ack, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackSingleChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackSingleChat, _impl_.sender_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackSingleChat, _impl_.receiver_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackSingleChat, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackSingleChat, _impl_.time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackUserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackUserInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackUserInfo, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackUserInfo, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackGroupChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackGroupChat, _impl_.sender_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackGroupChat, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackGroupChat, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackGroupChat, _impl_.time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackGroupInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackGroupInfo, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackGroupInfo, _impl_.groupname_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackGroupInfo, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackFileTransfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackFileTransfer, _impl_.sender_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackFileTransfer, _impl_.receiver_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackFileTransfer, _impl_.file_name_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackFileTransfer, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackAddFriendToRecv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackAddFriendToRecv, _impl_.sender_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackAddFriendToRecv, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackAddFriendToRecv, _impl_.time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackAddFriendToSend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackAddFriendToSend, _impl_.receiver_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackAddFriendToSend, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackAddFriendToSend, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackAddGroupToRecv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackAddGroupToRecv, _impl_.sender_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackAddGroupToRecv, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackAddGroupToRecv, _impl_.time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackAddGroupToSend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackAddGroupToSend, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackAddGroupToSend, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackAddGroupToSend, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackLoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::ackLoginRequest, _impl_.status_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::im::protocol::Ack)},
  { 19, -1, -1, sizeof(::im::protocol::ackSingleChat)},
  { 29, -1, -1, sizeof(::im::protocol::ackUserInfo)},
  { 38, -1, -1, sizeof(::im::protocol::ackGroupChat)},
  { 48, -1, -1, sizeof(::im::protocol::ackGroupInfo)},
  { 57, -1, -1, sizeof(::im::protocol::ackFileTransfer)},
  { 67, -1, -1, sizeof(::im::protocol::ackAddFriendToRecv)},
  { 76, -1, -1, sizeof(::im::protocol::ackAddFriendToSend)},
  { 85, -1, -1, sizeof(::im::protocol::ackAddGroupToRecv)},
  { 94, -1, -1, sizeof(::im::protocol::ackAddGroupToSend)},
  { 103, -1, -1, sizeof(::im::protocol::ackLoginRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::im::protocol::_Ack_default_instance_._instance,
  &::im::protocol::_ackSingleChat_default_instance_._instance,
  &::im::protocol::_ackUserInfo_default_instance_._instance,
  &::im::protocol::_ackGroupChat_default_instance_._instance,
  &::im::protocol::_ackGroupInfo_default_instance_._instance,
  &::im::protocol::_ackFileTransfer_default_instance_._instance,
  &::im::protocol::_ackAddFriendToRecv_default_instance_._instance,
  &::im::protocol::_ackAddFriendToSend_default_instance_._instance,
  &::im::protocol::_ackAddGroupToRecv_default_instance_._instance,
  &::im::protocol::_ackAddGroupToSend_default_instance_._instance,
  &::im::protocol::_ackLoginRequest_default_instance_._instance,
};

const char descriptor_table_protodef_ack_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tack.proto\022\013im.protocol\032\037google/protobu"
  "f/timestamp.proto\"\322\006\n\003Ack\022#\n\004type\030\001 \001(\0162"
  "\025.im.protocol.Ack.Type\022-\n\ttimestamp\030\002 \001("
  "\0132\032.google.protobuf.Timestamp\022-\n\tuser_in"
  "fo\030\003 \001(\0132\030.im.protocol.ackUserInfoH\000\022/\n\n"
  "group_info\030\004 \001(\0132\031.im.protocol.ackGroupI"
  "nfoH\000\0225\n\rfile_transfer\030\005 \001(\0132\034.im.protoc"
  "ol.ackFileTransferH\000\022:\n\017add_friend_recv\030"
  "\006 \001(\0132\037.im.protocol.ackAddFriendToRecvH\000"
  "\022:\n\017add_friend_send\030\007 \001(\0132\037.im.protocol."
  "ackAddFriendToSendH\000\0228\n\016add_group_recv\030\010"
  " \001(\0132\036.im.protocol.ackAddGroupToRecvH\000\0228"
  "\n\016add_group_send\030\t \001(\0132\036.im.protocol.ack"
  "AddGroupToSendH\000\0225\n\rlogin_request\030\n \001(\0132"
  "\034.im.protocol.ackLoginRequestH\000\0221\n\013singl"
  "e_chat\030\013 \001(\0132\032.im.protocol.ackSingleChat"
  "H\000\022/\n\ngroup_chat\030\014 \001(\0132\031.im.protocol.ack"
  "GroupChatH\000\"\315\001\n\004Type\022\r\n\tUSER_INFO\020\000\022\016\n\nG"
  "ROUP_INFO\020\001\022\021\n\rFILE_TRANSFER\020\002\022\023\n\017ADD_FR"
  "IEND_RECV\020\003\022\023\n\017ADD_FRIEND_SEND\020\004\022\022\n\016ADD_"
  "GROUP_RECV\020\005\022\022\n\016ADD_GROUP_SEND\020\006\022\017\n\013SING"
  "LE_CHAT\020\007\022\016\n\nGROUP_CHAT\020\010\022\021\n\rLOGIN_REQUE"
  "ST\020\t\022\r\n\tHEARTBEAT\020\nB\t\n\007content\"V\n\rackSin"
  "gleChat\022\021\n\tsender_id\030\001 \001(\005\022\023\n\013receiver_i"
  "d\030\002 \001(\005\022\017\n\007content\030\003 \001(\t\022\014\n\004time\030\004 \001(\005\"<"
  "\n\013ackUserInfo\022\n\n\002id\030\001 \001(\005\022\020\n\010username\030\002 "
  "\001(\t\022\017\n\007content\030\003 \001(\t\"R\n\014ackGroupChat\022\021\n\t"
  "sender_id\030\001 \001(\005\022\020\n\010group_id\030\002 \001(\005\022\017\n\007con"
  "tent\030\003 \001(\t\022\014\n\004time\030\004 \001(\005\"D\n\014ackGroupInfo"
  "\022\020\n\010group_id\030\001 \001(\005\022\021\n\tgroupname\030\002 \001(\t\022\017\n"
  "\007content\030\003 \001(\t\"\\\n\017ackFileTransfer\022\021\n\tsen"
  "der_id\030\001 \001(\005\022\023\n\013receiver_id\030\002 \001(\005\022\021\n\tfil"
  "e_name\030\003 \001(\t\022\016\n\006status\030\004 \001(\010\"F\n\022ackAddFr"
  "iendToRecv\022\021\n\tsender_id\030\001 \001(\005\022\017\n\007message"
  "\030\002 \001(\t\022\014\n\004time\030\003 \001(\005\"J\n\022ackAddFriendToSe"
  "nd\022\023\n\013receiver_id\030\001 \001(\005\022\016\n\006status\030\002 \001(\010\022"
  "\017\n\007message\030\003 \001(\t\"E\n\021ackAddGroupToRecv\022\021\n"
  "\tsender_id\030\001 \001(\005\022\017\n\007message\030\002 \001(\t\022\014\n\004tim"
  "e\030\003 \001(\005\"F\n\021ackAddGroupToSend\022\020\n\010group_id"
  "\030\001 \001(\005\022\016\n\006status\030\002 \001(\010\022\017\n\007message\030\003 \001(\t\""
  "!\n\017ackLoginRequest\022\016\n\006status\030\001 \001(\010b\006prot"
  "o3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ack_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_ack_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ack_2eproto = {
    false, false, 1642, descriptor_table_protodef_ack_2eproto,
    "ack.proto",
    &descriptor_table_ack_2eproto_once, descriptor_table_ack_2eproto_deps, 1, 11,
    schemas, file_default_instances, TableStruct_ack_2eproto::offsets,
    file_level_metadata_ack_2eproto, file_level_enum_descriptors_ack_2eproto,
    file_level_service_descriptors_ack_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ack_2eproto_getter() {
  return &descriptor_table_ack_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ack_2eproto(&descriptor_table_ack_2eproto);
namespace im {
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Ack_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ack_2eproto);
  return file_level_enum_descriptors_ack_2eproto[0];
}
bool Ack_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Ack_Type Ack::USER_INFO;
constexpr Ack_Type Ack::GROUP_INFO;
constexpr Ack_Type Ack::FILE_TRANSFER;
constexpr Ack_Type Ack::ADD_FRIEND_RECV;
constexpr Ack_Type Ack::ADD_FRIEND_SEND;
constexpr Ack_Type Ack::ADD_GROUP_RECV;
constexpr Ack_Type Ack::ADD_GROUP_SEND;
constexpr Ack_Type Ack::SINGLE_CHAT;
constexpr Ack_Type Ack::GROUP_CHAT;
constexpr Ack_Type Ack::LOGIN_REQUEST;
constexpr Ack_Type Ack::HEARTBEAT;
constexpr Ack_Type Ack::Type_MIN;
constexpr Ack_Type Ack::Type_MAX;
constexpr int Ack::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Ack::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Ack* msg);
  static const ::im::protocol::ackUserInfo& user_info(const Ack* msg);
  static const ::im::protocol::ackGroupInfo& group_info(const Ack* msg);
  static const ::im::protocol::ackFileTransfer& file_transfer(const Ack* msg);
  static const ::im::protocol::ackAddFriendToRecv& add_friend_recv(const Ack* msg);
  static const ::im::protocol::ackAddFriendToSend& add_friend_send(const Ack* msg);
  static const ::im::protocol::ackAddGroupToRecv& add_group_recv(const Ack* msg);
  static const ::im::protocol::ackAddGroupToSend& add_group_send(const Ack* msg);
  static const ::im::protocol::ackLoginRequest& login_request(const Ack* msg);
  static const ::im::protocol::ackSingleChat& single_chat(const Ack* msg);
  static const ::im::protocol::ackGroupChat& group_chat(const Ack* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Ack::_Internal::timestamp(const Ack* msg) {
  return *msg->_impl_.timestamp_;
}
const ::im::protocol::ackUserInfo&
Ack::_Internal::user_info(const Ack* msg) {
  return *msg->_impl_.content_.user_info_;
}
const ::im::protocol::ackGroupInfo&
Ack::_Internal::group_info(const Ack* msg) {
  return *msg->_impl_.content_.group_info_;
}
const ::im::protocol::ackFileTransfer&
Ack::_Internal::file_transfer(const Ack* msg) {
  return *msg->_impl_.content_.file_transfer_;
}
const ::im::protocol::ackAddFriendToRecv&
Ack::_Internal::add_friend_recv(const Ack* msg) {
  return *msg->_impl_.content_.add_friend_recv_;
}
const ::im::protocol::ackAddFriendToSend&
Ack::_Internal::add_friend_send(const Ack* msg) {
  return *msg->_impl_.content_.add_friend_send_;
}
const ::im::protocol::ackAddGroupToRecv&
Ack::_Internal::add_group_recv(const Ack* msg) {
  return *msg->_impl_.content_.add_group_recv_;
}
const ::im::protocol::ackAddGroupToSend&
Ack::_Internal::add_group_send(const Ack* msg) {
  return *msg->_impl_.content_.add_group_send_;
}
const ::im::protocol::ackLoginRequest&
Ack::_Internal::login_request(const Ack* msg) {
  return *msg->_impl_.content_.login_request_;
}
const ::im::protocol::ackSingleChat&
Ack::_Internal::single_chat(const Ack* msg) {
  return *msg->_impl_.content_.single_chat_;
}
const ::im::protocol::ackGroupChat&
Ack::_Internal::group_chat(const Ack* msg) {
  return *msg->_impl_.content_.group_chat_;
}
void Ack::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
void Ack::set_allocated_user_info(::im::protocol::ackUserInfo* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_info);
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    set_has_user_info();
    _impl_.content_.user_info_ = user_info;
  }
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Ack.user_info)
}
void Ack::set_allocated_group_info(::im::protocol::ackGroupInfo* group_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (group_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(group_info);
    if (message_arena != submessage_arena) {
      group_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_info, submessage_arena);
    }
    set_has_group_info();
    _impl_.content_.group_info_ = group_info;
  }
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Ack.group_info)
}
void Ack::set_allocated_file_transfer(::im::protocol::ackFileTransfer* file_transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (file_transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(file_transfer);
    if (message_arena != submessage_arena) {
      file_transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file_transfer, submessage_arena);
    }
    set_has_file_transfer();
    _impl_.content_.file_transfer_ = file_transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Ack.file_transfer)
}
void Ack::set_allocated_add_friend_recv(::im::protocol::ackAddFriendToRecv* add_friend_recv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (add_friend_recv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(add_friend_recv);
    if (message_arena != submessage_arena) {
      add_friend_recv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_friend_recv, submessage_arena);
    }
    set_has_add_friend_recv();
    _impl_.content_.add_friend_recv_ = add_friend_recv;
  }
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Ack.add_friend_recv)
}
void Ack::set_allocated_add_friend_send(::im::protocol::ackAddFriendToSend* add_friend_send) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (add_friend_send) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(add_friend_send);
    if (message_arena != submessage_arena) {
      add_friend_send = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_friend_send, submessage_arena);
    }
    set_has_add_friend_send();
    _impl_.content_.add_friend_send_ = add_friend_send;
  }
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Ack.add_friend_send)
}
void Ack::set_allocated_add_group_recv(::im::protocol::ackAddGroupToRecv* add_group_recv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (add_group_recv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(add_group_recv);
    if (message_arena != submessage_arena) {
      add_group_recv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_group_recv, submessage_arena);
    }
    set_has_add_group_recv();
    _impl_.content_.add_group_recv_ = add_group_recv;
  }
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Ack.add_group_recv)
}
void Ack::set_allocated_add_group_send(::im::protocol::ackAddGroupToSend* add_group_send) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (add_group_send) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(add_group_send);
    if (message_arena != submessage_arena) {
      add_group_send = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_group_send, submessage_arena);
    }
    set_has_add_group_send();
    _impl_.content_.add_group_send_ = add_group_send;
  }
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Ack.add_group_send)
}
void Ack::set_allocated_login_request(::im::protocol::ackLoginRequest* login_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (login_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(login_request);
    if (message_arena != submessage_arena) {
      login_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_request, submessage_arena);
    }
    set_has_login_request();
    _impl_.content_.login_request_ = login_request;
  }
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Ack.login_request)
}
void Ack::set_allocated_single_chat(::im::protocol::ackSingleChat* single_chat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (single_chat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(single_chat);
    if (message_arena != submessage_arena) {
      single_chat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, single_chat, submessage_arena);
    }
    set_has_single_chat();
    _impl_.content_.single_chat_ = single_chat;
  }
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Ack.single_chat)
}
void Ack::set_allocated_group_chat(::im::protocol::ackGroupChat* group_chat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (group_chat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(group_chat);
    if (message_arena != submessage_arena) {
      group_chat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_chat, submessage_arena);
    }
    set_has_group_chat();
    _impl_.content_.group_chat_ = group_chat;
  }
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Ack.group_chat)
}
Ack::Ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.protocol.Ack)
}
Ack::Ack(const Ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  clear_has_content();
  switch (from.content_case()) {
    case kUserInfo: {
      _this->_internal_mutable_user_info()->::im::protocol::ackUserInfo::MergeFrom(
          from._internal_user_info());
      break;
    }
    case kGroupInfo: {
      _this->_internal_mutable_group_info()->::im::protocol::ackGroupInfo::MergeFrom(
          from._internal_group_info());
      break;
    }
    case kFileTransfer: {
      _this->_internal_mutable_file_transfer()->::im::protocol::ackFileTransfer::MergeFrom(
          from._internal_file_transfer());
      break;
    }
    case kAddFriendRecv: {
      _this->_internal_mutable_add_friend_recv()->::im::protocol::ackAddFriendToRecv::MergeFrom(
          from._internal_add_friend_recv());
      break;
    }
    case kAddFriendSend: {
      _this->_internal_mutable_add_friend_send()->::im::protocol::ackAddFriendToSend::MergeFrom(
          from._internal_add_friend_send());
      break;
    }
    case kAddGroupRecv: {
      _this->_internal_mutable_add_group_recv()->::im::protocol::ackAddGroupToRecv::MergeFrom(
          from._internal_add_group_recv());
      break;
    }
    case kAddGroupSend: {
      _this->_internal_mutable_add_group_send()->::im::protocol::ackAddGroupToSend::MergeFrom(
          from._internal_add_group_send());
      break;
    }
    case kLoginRequest: {
      _this->_internal_mutable_login_request()->::im::protocol::ackLoginRequest::MergeFrom(
          from._internal_login_request());
      break;
    }
    case kSingleChat: {
      _this->_internal_mutable_single_chat()->::im::protocol::ackSingleChat::MergeFrom(
          from._internal_single_chat());
      break;
    }
    case kGroupChat: {
      _this->_internal_mutable_group_chat()->::im::protocol::ackGroupChat::MergeFrom(
          from._internal_group_chat());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:im.protocol.Ack)
}

inline void Ack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_content();
}

Ack::~Ack() {
  // @@protoc_insertion_point(destructor:im.protocol.Ack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (has_content()) {
    clear_content();
  }
}

void Ack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ack::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:im.protocol.Ack)
  switch (content_case()) {
    case kUserInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.user_info_;
      }
      break;
    }
    case kGroupInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.group_info_;
      }
      break;
    }
    case kFileTransfer: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.file_transfer_;
      }
      break;
    }
    case kAddFriendRecv: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.add_friend_recv_;
      }
      break;
    }
    case kAddFriendSend: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.add_friend_send_;
      }
      break;
    }
    case kAddGroupRecv: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.add_group_recv_;
      }
      break;
    }
    case kAddGroupSend: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.add_group_send_;
      }
      break;
    }
    case kLoginRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.login_request_;
      }
      break;
    }
    case kSingleChat: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.single_chat_;
      }
      break;
    }
    case kGroupChat: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.group_chat_;
      }
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = CONTENT_NOT_SET;
}


void Ack::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.Ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  _impl_.type_ = 0;
  clear_content();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .im.protocol.Ack.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::im::protocol::Ack_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .im.protocol.ackUserInfo user_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .im.protocol.ackGroupInfo group_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .im.protocol.ackFileTransfer file_transfer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_file_transfer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .im.protocol.ackAddFriendToRecv add_friend_recv = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_friend_recv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .im.protocol.ackAddFriendToSend add_friend_send = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_friend_send(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .im.protocol.ackAddGroupToRecv add_group_recv = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_group_recv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .im.protocol.ackAddGroupToSend add_group_send = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_group_send(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .im.protocol.ackLoginRequest login_request = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .im.protocol.ackSingleChat single_chat = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_single_chat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .im.protocol.ackGroupChat group_chat = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_chat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.Ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .im.protocol.Ack.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // .im.protocol.ackUserInfo user_info = 3;
  if (_internal_has_user_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::user_info(this),
        _Internal::user_info(this).GetCachedSize(), target, stream);
  }

  // .im.protocol.ackGroupInfo group_info = 4;
  if (_internal_has_group_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::group_info(this),
        _Internal::group_info(this).GetCachedSize(), target, stream);
  }

  // .im.protocol.ackFileTransfer file_transfer = 5;
  if (_internal_has_file_transfer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::file_transfer(this),
        _Internal::file_transfer(this).GetCachedSize(), target, stream);
  }

  // .im.protocol.ackAddFriendToRecv add_friend_recv = 6;
  if (_internal_has_add_friend_recv()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::add_friend_recv(this),
        _Internal::add_friend_recv(this).GetCachedSize(), target, stream);
  }

  // .im.protocol.ackAddFriendToSend add_friend_send = 7;
  if (_internal_has_add_friend_send()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::add_friend_send(this),
        _Internal::add_friend_send(this).GetCachedSize(), target, stream);
  }

  // .im.protocol.ackAddGroupToRecv add_group_recv = 8;
  if (_internal_has_add_group_recv()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::add_group_recv(this),
        _Internal::add_group_recv(this).GetCachedSize(), target, stream);
  }

  // .im.protocol.ackAddGroupToSend add_group_send = 9;
  if (_internal_has_add_group_send()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::add_group_send(this),
        _Internal::add_group_send(this).GetCachedSize(), target, stream);
  }

  // .im.protocol.ackLoginRequest login_request = 10;
  if (_internal_has_login_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::login_request(this),
        _Internal::login_request(this).GetCachedSize(), target, stream);
  }

  // .im.protocol.ackSingleChat single_chat = 11;
  if (_internal_has_single_chat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::single_chat(this),
        _Internal::single_chat(this).GetCachedSize(), target, stream);
  }

  // .im.protocol.ackGroupChat group_chat = 12;
  if (_internal_has_group_chat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::group_chat(this),
        _Internal::group_chat(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.Ack)
  return target;
}

size_t Ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.Ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // .im.protocol.Ack.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (content_case()) {
    // .im.protocol.ackUserInfo user_info = 3;
    case kUserInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.user_info_);
      break;
    }
    // .im.protocol.ackGroupInfo group_info = 4;
    case kGroupInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.group_info_);
      break;
    }
    // .im.protocol.ackFileTransfer file_transfer = 5;
    case kFileTransfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.file_transfer_);
      break;
    }
    // .im.protocol.ackAddFriendToRecv add_friend_recv = 6;
    case kAddFriendRecv: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.add_friend_recv_);
      break;
    }
    // .im.protocol.ackAddFriendToSend add_friend_send = 7;
    case kAddFriendSend: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.add_friend_send_);
      break;
    }
    // .im.protocol.ackAddGroupToRecv add_group_recv = 8;
    case kAddGroupRecv: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.add_group_recv_);
      break;
    }
    // .im.protocol.ackAddGroupToSend add_group_send = 9;
    case kAddGroupSend: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.add_group_send_);
      break;
    }
    // .im.protocol.ackLoginRequest login_request = 10;
    case kLoginRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.login_request_);
      break;
    }
    // .im.protocol.ackSingleChat single_chat = 11;
    case kSingleChat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.single_chat_);
      break;
    }
    // .im.protocol.ackGroupChat group_chat = 12;
    case kGroupChat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.group_chat_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ack::GetClassData() const { return &_class_data_; }


void Ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ack*>(&to_msg);
  auto& from = static_cast<const Ack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.Ack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  switch (from.content_case()) {
    case kUserInfo: {
      _this->_internal_mutable_user_info()->::im::protocol::ackUserInfo::MergeFrom(
          from._internal_user_info());
      break;
    }
    case kGroupInfo: {
      _this->_internal_mutable_group_info()->::im::protocol::ackGroupInfo::MergeFrom(
          from._internal_group_info());
      break;
    }
    case kFileTransfer: {
      _this->_internal_mutable_file_transfer()->::im::protocol::ackFileTransfer::MergeFrom(
          from._internal_file_transfer());
      break;
    }
    case kAddFriendRecv: {
      _this->_internal_mutable_add_friend_recv()->::im::protocol::ackAddFriendToRecv::MergeFrom(
          from._internal_add_friend_recv());
      break;
    }
    case kAddFriendSend: {
      _this->_internal_mutable_add_friend_send()->::im::protocol::ackAddFriendToSend::MergeFrom(
          from._internal_add_friend_send());
      break;
    }
    case kAddGroupRecv: {
      _this->_internal_mutable_add_group_recv()->::im::protocol::ackAddGroupToRecv::MergeFrom(
          from._internal_add_group_recv());
      break;
    }
    case kAddGroupSend: {
      _this->_internal_mutable_add_group_send()->::im::protocol::ackAddGroupToSend::MergeFrom(
          from._internal_add_group_send());
      break;
    }
    case kLoginRequest: {
      _this->_internal_mutable_login_request()->::im::protocol::ackLoginRequest::MergeFrom(
          from._internal_login_request());
      break;
    }
    case kSingleChat: {
      _this->_internal_mutable_single_chat()->::im::protocol::ackSingleChat::MergeFrom(
          from._internal_single_chat());
      break;
    }
    case kGroupChat: {
      _this->_internal_mutable_group_chat()->::im::protocol::ackGroupChat::MergeFrom(
          from._internal_group_chat());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ack::CopyFrom(const Ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.Ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ack::IsInitialized() const {
  return true;
}

void Ack::InternalSwap(Ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ack, _impl_.type_)
      + sizeof(Ack::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Ack, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
  swap(_impl_.content_, other->_impl_.content_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ack_2eproto_getter, &descriptor_table_ack_2eproto_once,
      file_level_metadata_ack_2eproto[0]);
}

// ===================================================================

class ackSingleChat::_Internal {
 public:
};

ackSingleChat::ackSingleChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.protocol.ackSingleChat)
}
ackSingleChat::ackSingleChat(const ackSingleChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ackSingleChat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.sender_id_){}
    , decltype(_impl_.receiver_id_){}
    , decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sender_id_, &from._impl_.sender_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_) -
    reinterpret_cast<char*>(&_impl_.sender_id_)) + sizeof(_impl_.time_));
  // @@protoc_insertion_point(copy_constructor:im.protocol.ackSingleChat)
}

inline void ackSingleChat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.sender_id_){0}
    , decltype(_impl_.receiver_id_){0}
    , decltype(_impl_.time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ackSingleChat::~ackSingleChat() {
  // @@protoc_insertion_point(destructor:im.protocol.ackSingleChat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ackSingleChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void ackSingleChat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ackSingleChat::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.ackSingleChat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  ::memset(&_impl_.sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.time_) -
      reinterpret_cast<char*>(&_impl_.sender_id_)) + sizeof(_impl_.time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ackSingleChat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 sender_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 receiver_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.receiver_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.ackSingleChat.content"));
        } else
          goto handle_unusual;
        continue;
      // int32 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ackSingleChat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.ackSingleChat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sender_id = 1;
  if (this->_internal_sender_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_sender_id(), target);
  }

  // int32 receiver_id = 2;
  if (this->_internal_receiver_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_receiver_id(), target);
  }

  // string content = 3;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.ackSingleChat.content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  // int32 time = 4;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.ackSingleChat)
  return target;
}

size_t ackSingleChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.ackSingleChat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // int32 sender_id = 1;
  if (this->_internal_sender_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sender_id());
  }

  // int32 receiver_id = 2;
  if (this->_internal_receiver_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_receiver_id());
  }

  // int32 time = 4;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ackSingleChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ackSingleChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ackSingleChat::GetClassData() const { return &_class_data_; }


void ackSingleChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ackSingleChat*>(&to_msg);
  auto& from = static_cast<const ackSingleChat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.ackSingleChat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_sender_id() != 0) {
    _this->_internal_set_sender_id(from._internal_sender_id());
  }
  if (from._internal_receiver_id() != 0) {
    _this->_internal_set_receiver_id(from._internal_receiver_id());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ackSingleChat::CopyFrom(const ackSingleChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.ackSingleChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ackSingleChat::IsInitialized() const {
  return true;
}

void ackSingleChat::InternalSwap(ackSingleChat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ackSingleChat, _impl_.time_)
      + sizeof(ackSingleChat::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(ackSingleChat, _impl_.sender_id_)>(
          reinterpret_cast<char*>(&_impl_.sender_id_),
          reinterpret_cast<char*>(&other->_impl_.sender_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ackSingleChat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ack_2eproto_getter, &descriptor_table_ack_2eproto_once,
      file_level_metadata_ack_2eproto[1]);
}

// ===================================================================

class ackUserInfo::_Internal {
 public:
};

ackUserInfo::ackUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.protocol.ackUserInfo)
}
ackUserInfo::ackUserInfo(const ackUserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ackUserInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:im.protocol.ackUserInfo)
}

inline void ackUserInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ackUserInfo::~ackUserInfo() {
  // @@protoc_insertion_point(destructor:im.protocol.ackUserInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ackUserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  _impl_.content_.Destroy();
}

void ackUserInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ackUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.ackUserInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ackUserInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.ackUserInfo.username"));
        } else
          goto handle_unusual;
        continue;
      // string content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.ackUserInfo.content"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ackUserInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.ackUserInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string username = 2;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.ackUserInfo.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // string content = 3;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.ackUserInfo.content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.ackUserInfo)
  return target;
}

size_t ackUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.ackUserInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 2;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ackUserInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ackUserInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ackUserInfo::GetClassData() const { return &_class_data_; }


void ackUserInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ackUserInfo*>(&to_msg);
  auto& from = static_cast<const ackUserInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.ackUserInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ackUserInfo::CopyFrom(const ackUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.ackUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ackUserInfo::IsInitialized() const {
  return true;
}

void ackUserInfo::InternalSwap(ackUserInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ackUserInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ack_2eproto_getter, &descriptor_table_ack_2eproto_once,
      file_level_metadata_ack_2eproto[2]);
}

// ===================================================================

class ackGroupChat::_Internal {
 public:
};

ackGroupChat::ackGroupChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.protocol.ackGroupChat)
}
ackGroupChat::ackGroupChat(const ackGroupChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ackGroupChat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.sender_id_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sender_id_, &from._impl_.sender_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_) -
    reinterpret_cast<char*>(&_impl_.sender_id_)) + sizeof(_impl_.time_));
  // @@protoc_insertion_point(copy_constructor:im.protocol.ackGroupChat)
}

inline void ackGroupChat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.sender_id_){0}
    , decltype(_impl_.group_id_){0}
    , decltype(_impl_.time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ackGroupChat::~ackGroupChat() {
  // @@protoc_insertion_point(destructor:im.protocol.ackGroupChat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ackGroupChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void ackGroupChat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ackGroupChat::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.ackGroupChat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  ::memset(&_impl_.sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.time_) -
      reinterpret_cast<char*>(&_impl_.sender_id_)) + sizeof(_impl_.time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ackGroupChat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 sender_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.ackGroupChat.content"));
        } else
          goto handle_unusual;
        continue;
      // int32 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ackGroupChat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.ackGroupChat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sender_id = 1;
  if (this->_internal_sender_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_sender_id(), target);
  }

  // int32 group_id = 2;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_group_id(), target);
  }

  // string content = 3;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.ackGroupChat.content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  // int32 time = 4;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.ackGroupChat)
  return target;
}

size_t ackGroupChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.ackGroupChat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // int32 sender_id = 1;
  if (this->_internal_sender_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sender_id());
  }

  // int32 group_id = 2;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_group_id());
  }

  // int32 time = 4;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ackGroupChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ackGroupChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ackGroupChat::GetClassData() const { return &_class_data_; }


void ackGroupChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ackGroupChat*>(&to_msg);
  auto& from = static_cast<const ackGroupChat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.ackGroupChat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_sender_id() != 0) {
    _this->_internal_set_sender_id(from._internal_sender_id());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ackGroupChat::CopyFrom(const ackGroupChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.ackGroupChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ackGroupChat::IsInitialized() const {
  return true;
}

void ackGroupChat::InternalSwap(ackGroupChat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ackGroupChat, _impl_.time_)
      + sizeof(ackGroupChat::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(ackGroupChat, _impl_.sender_id_)>(
          reinterpret_cast<char*>(&_impl_.sender_id_),
          reinterpret_cast<char*>(&other->_impl_.sender_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ackGroupChat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ack_2eproto_getter, &descriptor_table_ack_2eproto_once,
      file_level_metadata_ack_2eproto[3]);
}

// ===================================================================

class ackGroupInfo::_Internal {
 public:
};

ackGroupInfo::ackGroupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.protocol.ackGroupInfo)
}
ackGroupInfo::ackGroupInfo(const ackGroupInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ackGroupInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.groupname_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.group_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.groupname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_groupname().empty()) {
    _this->_impl_.groupname_.Set(from._internal_groupname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.group_id_ = from._impl_.group_id_;
  // @@protoc_insertion_point(copy_constructor:im.protocol.ackGroupInfo)
}

inline void ackGroupInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.groupname_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.group_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.groupname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ackGroupInfo::~ackGroupInfo() {
  // @@protoc_insertion_point(destructor:im.protocol.ackGroupInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ackGroupInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.groupname_.Destroy();
  _impl_.content_.Destroy();
}

void ackGroupInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ackGroupInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.ackGroupInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.groupname_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _impl_.group_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ackGroupInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string groupname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_groupname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.ackGroupInfo.groupname"));
        } else
          goto handle_unusual;
        continue;
      // string content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.ackGroupInfo.content"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ackGroupInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.ackGroupInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 group_id = 1;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_group_id(), target);
  }

  // string groupname = 2;
  if (!this->_internal_groupname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_groupname().data(), static_cast<int>(this->_internal_groupname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.ackGroupInfo.groupname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_groupname(), target);
  }

  // string content = 3;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.ackGroupInfo.content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.ackGroupInfo)
  return target;
}

size_t ackGroupInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.ackGroupInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string groupname = 2;
  if (!this->_internal_groupname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_groupname());
  }

  // string content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // int32 group_id = 1;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_group_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ackGroupInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ackGroupInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ackGroupInfo::GetClassData() const { return &_class_data_; }


void ackGroupInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ackGroupInfo*>(&to_msg);
  auto& from = static_cast<const ackGroupInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.ackGroupInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_groupname().empty()) {
    _this->_internal_set_groupname(from._internal_groupname());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ackGroupInfo::CopyFrom(const ackGroupInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.ackGroupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ackGroupInfo::IsInitialized() const {
  return true;
}

void ackGroupInfo::InternalSwap(ackGroupInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.groupname_, lhs_arena,
      &other->_impl_.groupname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  swap(_impl_.group_id_, other->_impl_.group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ackGroupInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ack_2eproto_getter, &descriptor_table_ack_2eproto_once,
      file_level_metadata_ack_2eproto[4]);
}

// ===================================================================

class ackFileTransfer::_Internal {
 public:
};

ackFileTransfer::ackFileTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.protocol.ackFileTransfer)
}
ackFileTransfer::ackFileTransfer(const ackFileTransfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ackFileTransfer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.file_name_){}
    , decltype(_impl_.sender_id_){}
    , decltype(_impl_.receiver_id_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    _this->_impl_.file_name_.Set(from._internal_file_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sender_id_, &from._impl_.sender_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.sender_id_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:im.protocol.ackFileTransfer)
}

inline void ackFileTransfer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.file_name_){}
    , decltype(_impl_.sender_id_){0}
    , decltype(_impl_.receiver_id_){0}
    , decltype(_impl_.status_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ackFileTransfer::~ackFileTransfer() {
  // @@protoc_insertion_point(destructor:im.protocol.ackFileTransfer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ackFileTransfer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_name_.Destroy();
}

void ackFileTransfer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ackFileTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.ackFileTransfer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_name_.ClearToEmpty();
  ::memset(&_impl_.sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.sender_id_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ackFileTransfer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 sender_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 receiver_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.receiver_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.ackFileTransfer.file_name"));
        } else
          goto handle_unusual;
        continue;
      // bool status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ackFileTransfer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.ackFileTransfer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sender_id = 1;
  if (this->_internal_sender_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_sender_id(), target);
  }

  // int32 receiver_id = 2;
  if (this->_internal_receiver_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_receiver_id(), target);
  }

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.ackFileTransfer.file_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_name(), target);
  }

  // bool status = 4;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.ackFileTransfer)
  return target;
}

size_t ackFileTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.ackFileTransfer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // int32 sender_id = 1;
  if (this->_internal_sender_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sender_id());
  }

  // int32 receiver_id = 2;
  if (this->_internal_receiver_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_receiver_id());
  }

  // bool status = 4;
  if (this->_internal_status() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ackFileTransfer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ackFileTransfer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ackFileTransfer::GetClassData() const { return &_class_data_; }


void ackFileTransfer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ackFileTransfer*>(&to_msg);
  auto& from = static_cast<const ackFileTransfer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.ackFileTransfer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _this->_internal_set_file_name(from._internal_file_name());
  }
  if (from._internal_sender_id() != 0) {
    _this->_internal_set_sender_id(from._internal_sender_id());
  }
  if (from._internal_receiver_id() != 0) {
    _this->_internal_set_receiver_id(from._internal_receiver_id());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ackFileTransfer::CopyFrom(const ackFileTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.ackFileTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ackFileTransfer::IsInitialized() const {
  return true;
}

void ackFileTransfer::InternalSwap(ackFileTransfer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_name_, lhs_arena,
      &other->_impl_.file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ackFileTransfer, _impl_.status_)
      + sizeof(ackFileTransfer::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(ackFileTransfer, _impl_.sender_id_)>(
          reinterpret_cast<char*>(&_impl_.sender_id_),
          reinterpret_cast<char*>(&other->_impl_.sender_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ackFileTransfer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ack_2eproto_getter, &descriptor_table_ack_2eproto_once,
      file_level_metadata_ack_2eproto[5]);
}

// ===================================================================

class ackAddFriendToRecv::_Internal {
 public:
};

ackAddFriendToRecv::ackAddFriendToRecv(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.protocol.ackAddFriendToRecv)
}
ackAddFriendToRecv::ackAddFriendToRecv(const ackAddFriendToRecv& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ackAddFriendToRecv* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.sender_id_){}
    , decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sender_id_, &from._impl_.sender_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_) -
    reinterpret_cast<char*>(&_impl_.sender_id_)) + sizeof(_impl_.time_));
  // @@protoc_insertion_point(copy_constructor:im.protocol.ackAddFriendToRecv)
}

inline void ackAddFriendToRecv::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.sender_id_){0}
    , decltype(_impl_.time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ackAddFriendToRecv::~ackAddFriendToRecv() {
  // @@protoc_insertion_point(destructor:im.protocol.ackAddFriendToRecv)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ackAddFriendToRecv::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void ackAddFriendToRecv::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ackAddFriendToRecv::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.ackAddFriendToRecv)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.time_) -
      reinterpret_cast<char*>(&_impl_.sender_id_)) + sizeof(_impl_.time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ackAddFriendToRecv::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 sender_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.ackAddFriendToRecv.message"));
        } else
          goto handle_unusual;
        continue;
      // int32 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ackAddFriendToRecv::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.ackAddFriendToRecv)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sender_id = 1;
  if (this->_internal_sender_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_sender_id(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.ackAddFriendToRecv.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // int32 time = 3;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.ackAddFriendToRecv)
  return target;
}

size_t ackAddFriendToRecv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.ackAddFriendToRecv)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 sender_id = 1;
  if (this->_internal_sender_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sender_id());
  }

  // int32 time = 3;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ackAddFriendToRecv::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ackAddFriendToRecv::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ackAddFriendToRecv::GetClassData() const { return &_class_data_; }


void ackAddFriendToRecv::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ackAddFriendToRecv*>(&to_msg);
  auto& from = static_cast<const ackAddFriendToRecv&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.ackAddFriendToRecv)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_sender_id() != 0) {
    _this->_internal_set_sender_id(from._internal_sender_id());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ackAddFriendToRecv::CopyFrom(const ackAddFriendToRecv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.ackAddFriendToRecv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ackAddFriendToRecv::IsInitialized() const {
  return true;
}

void ackAddFriendToRecv::InternalSwap(ackAddFriendToRecv* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ackAddFriendToRecv, _impl_.time_)
      + sizeof(ackAddFriendToRecv::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(ackAddFriendToRecv, _impl_.sender_id_)>(
          reinterpret_cast<char*>(&_impl_.sender_id_),
          reinterpret_cast<char*>(&other->_impl_.sender_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ackAddFriendToRecv::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ack_2eproto_getter, &descriptor_table_ack_2eproto_once,
      file_level_metadata_ack_2eproto[6]);
}

// ===================================================================

class ackAddFriendToSend::_Internal {
 public:
};

ackAddFriendToSend::ackAddFriendToSend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.protocol.ackAddFriendToSend)
}
ackAddFriendToSend::ackAddFriendToSend(const ackAddFriendToSend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ackAddFriendToSend* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.receiver_id_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.receiver_id_, &from._impl_.receiver_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.receiver_id_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:im.protocol.ackAddFriendToSend)
}

inline void ackAddFriendToSend::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.receiver_id_){0}
    , decltype(_impl_.status_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ackAddFriendToSend::~ackAddFriendToSend() {
  // @@protoc_insertion_point(destructor:im.protocol.ackAddFriendToSend)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ackAddFriendToSend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void ackAddFriendToSend::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ackAddFriendToSend::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.ackAddFriendToSend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.receiver_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.receiver_id_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ackAddFriendToSend::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 receiver_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.receiver_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.ackAddFriendToSend.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ackAddFriendToSend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.ackAddFriendToSend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 receiver_id = 1;
  if (this->_internal_receiver_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_receiver_id(), target);
  }

  // bool status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_status(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.ackAddFriendToSend.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.ackAddFriendToSend)
  return target;
}

size_t ackAddFriendToSend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.ackAddFriendToSend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 receiver_id = 1;
  if (this->_internal_receiver_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_receiver_id());
  }

  // bool status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ackAddFriendToSend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ackAddFriendToSend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ackAddFriendToSend::GetClassData() const { return &_class_data_; }


void ackAddFriendToSend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ackAddFriendToSend*>(&to_msg);
  auto& from = static_cast<const ackAddFriendToSend&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.ackAddFriendToSend)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_receiver_id() != 0) {
    _this->_internal_set_receiver_id(from._internal_receiver_id());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ackAddFriendToSend::CopyFrom(const ackAddFriendToSend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.ackAddFriendToSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ackAddFriendToSend::IsInitialized() const {
  return true;
}

void ackAddFriendToSend::InternalSwap(ackAddFriendToSend* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ackAddFriendToSend, _impl_.status_)
      + sizeof(ackAddFriendToSend::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(ackAddFriendToSend, _impl_.receiver_id_)>(
          reinterpret_cast<char*>(&_impl_.receiver_id_),
          reinterpret_cast<char*>(&other->_impl_.receiver_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ackAddFriendToSend::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ack_2eproto_getter, &descriptor_table_ack_2eproto_once,
      file_level_metadata_ack_2eproto[7]);
}

// ===================================================================

class ackAddGroupToRecv::_Internal {
 public:
};

ackAddGroupToRecv::ackAddGroupToRecv(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.protocol.ackAddGroupToRecv)
}
ackAddGroupToRecv::ackAddGroupToRecv(const ackAddGroupToRecv& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ackAddGroupToRecv* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.sender_id_){}
    , decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sender_id_, &from._impl_.sender_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_) -
    reinterpret_cast<char*>(&_impl_.sender_id_)) + sizeof(_impl_.time_));
  // @@protoc_insertion_point(copy_constructor:im.protocol.ackAddGroupToRecv)
}

inline void ackAddGroupToRecv::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.sender_id_){0}
    , decltype(_impl_.time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ackAddGroupToRecv::~ackAddGroupToRecv() {
  // @@protoc_insertion_point(destructor:im.protocol.ackAddGroupToRecv)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ackAddGroupToRecv::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void ackAddGroupToRecv::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ackAddGroupToRecv::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.ackAddGroupToRecv)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.time_) -
      reinterpret_cast<char*>(&_impl_.sender_id_)) + sizeof(_impl_.time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ackAddGroupToRecv::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 sender_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.ackAddGroupToRecv.message"));
        } else
          goto handle_unusual;
        continue;
      // int32 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ackAddGroupToRecv::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.ackAddGroupToRecv)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sender_id = 1;
  if (this->_internal_sender_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_sender_id(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.ackAddGroupToRecv.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // int32 time = 3;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.ackAddGroupToRecv)
  return target;
}

size_t ackAddGroupToRecv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.ackAddGroupToRecv)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 sender_id = 1;
  if (this->_internal_sender_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sender_id());
  }

  // int32 time = 3;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ackAddGroupToRecv::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ackAddGroupToRecv::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ackAddGroupToRecv::GetClassData() const { return &_class_data_; }


void ackAddGroupToRecv::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ackAddGroupToRecv*>(&to_msg);
  auto& from = static_cast<const ackAddGroupToRecv&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.ackAddGroupToRecv)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_sender_id() != 0) {
    _this->_internal_set_sender_id(from._internal_sender_id());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ackAddGroupToRecv::CopyFrom(const ackAddGroupToRecv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.ackAddGroupToRecv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ackAddGroupToRecv::IsInitialized() const {
  return true;
}

void ackAddGroupToRecv::InternalSwap(ackAddGroupToRecv* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ackAddGroupToRecv, _impl_.time_)
      + sizeof(ackAddGroupToRecv::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(ackAddGroupToRecv, _impl_.sender_id_)>(
          reinterpret_cast<char*>(&_impl_.sender_id_),
          reinterpret_cast<char*>(&other->_impl_.sender_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ackAddGroupToRecv::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ack_2eproto_getter, &descriptor_table_ack_2eproto_once,
      file_level_metadata_ack_2eproto[8]);
}

// ===================================================================

class ackAddGroupToSend::_Internal {
 public:
};

ackAddGroupToSend::ackAddGroupToSend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.protocol.ackAddGroupToSend)
}
ackAddGroupToSend::ackAddGroupToSend(const ackAddGroupToSend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ackAddGroupToSend* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.group_id_, &from._impl_.group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.group_id_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:im.protocol.ackAddGroupToSend)
}

inline void ackAddGroupToSend::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.group_id_){0}
    , decltype(_impl_.status_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ackAddGroupToSend::~ackAddGroupToSend() {
  // @@protoc_insertion_point(destructor:im.protocol.ackAddGroupToSend)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ackAddGroupToSend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void ackAddGroupToSend::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ackAddGroupToSend::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.ackAddGroupToSend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.group_id_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ackAddGroupToSend::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.ackAddGroupToSend.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ackAddGroupToSend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.ackAddGroupToSend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 group_id = 1;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_group_id(), target);
  }

  // bool status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_status(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.ackAddGroupToSend.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.ackAddGroupToSend)
  return target;
}

size_t ackAddGroupToSend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.ackAddGroupToSend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 group_id = 1;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_group_id());
  }

  // bool status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ackAddGroupToSend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ackAddGroupToSend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ackAddGroupToSend::GetClassData() const { return &_class_data_; }


void ackAddGroupToSend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ackAddGroupToSend*>(&to_msg);
  auto& from = static_cast<const ackAddGroupToSend&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.ackAddGroupToSend)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ackAddGroupToSend::CopyFrom(const ackAddGroupToSend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.ackAddGroupToSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ackAddGroupToSend::IsInitialized() const {
  return true;
}

void ackAddGroupToSend::InternalSwap(ackAddGroupToSend* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ackAddGroupToSend, _impl_.status_)
      + sizeof(ackAddGroupToSend::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(ackAddGroupToSend, _impl_.group_id_)>(
          reinterpret_cast<char*>(&_impl_.group_id_),
          reinterpret_cast<char*>(&other->_impl_.group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ackAddGroupToSend::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ack_2eproto_getter, &descriptor_table_ack_2eproto_once,
      file_level_metadata_ack_2eproto[9]);
}

// ===================================================================

class ackLoginRequest::_Internal {
 public:
};

ackLoginRequest::ackLoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.protocol.ackLoginRequest)
}
ackLoginRequest::ackLoginRequest(const ackLoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ackLoginRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:im.protocol.ackLoginRequest)
}

inline void ackLoginRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ackLoginRequest::~ackLoginRequest() {
  // @@protoc_insertion_point(destructor:im.protocol.ackLoginRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ackLoginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ackLoginRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ackLoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.ackLoginRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ackLoginRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ackLoginRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.ackLoginRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.ackLoginRequest)
  return target;
}

size_t ackLoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.ackLoginRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ackLoginRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ackLoginRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ackLoginRequest::GetClassData() const { return &_class_data_; }


void ackLoginRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ackLoginRequest*>(&to_msg);
  auto& from = static_cast<const ackLoginRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.ackLoginRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ackLoginRequest::CopyFrom(const ackLoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.ackLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ackLoginRequest::IsInitialized() const {
  return true;
}

void ackLoginRequest::InternalSwap(ackLoginRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ackLoginRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ack_2eproto_getter, &descriptor_table_ack_2eproto_once,
      file_level_metadata_ack_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace im
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::im::protocol::Ack*
Arena::CreateMaybeMessage< ::im::protocol::Ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::Ack >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::ackSingleChat*
Arena::CreateMaybeMessage< ::im::protocol::ackSingleChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::ackSingleChat >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::ackUserInfo*
Arena::CreateMaybeMessage< ::im::protocol::ackUserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::ackUserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::ackGroupChat*
Arena::CreateMaybeMessage< ::im::protocol::ackGroupChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::ackGroupChat >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::ackGroupInfo*
Arena::CreateMaybeMessage< ::im::protocol::ackGroupInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::ackGroupInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::ackFileTransfer*
Arena::CreateMaybeMessage< ::im::protocol::ackFileTransfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::ackFileTransfer >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::ackAddFriendToRecv*
Arena::CreateMaybeMessage< ::im::protocol::ackAddFriendToRecv >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::ackAddFriendToRecv >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::ackAddFriendToSend*
Arena::CreateMaybeMessage< ::im::protocol::ackAddFriendToSend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::ackAddFriendToSend >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::ackAddGroupToRecv*
Arena::CreateMaybeMessage< ::im::protocol::ackAddGroupToRecv >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::ackAddGroupToRecv >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::ackAddGroupToSend*
Arena::CreateMaybeMessage< ::im::protocol::ackAddGroupToSend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::ackAddGroupToSend >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::ackLoginRequest*
Arena::CreateMaybeMessage< ::im::protocol::ackLoginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::ackLoginRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
