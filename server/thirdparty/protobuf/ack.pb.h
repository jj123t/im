// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ack.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ack_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ack_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ack_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ack_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ack_2eproto;
namespace im {
namespace protocol {
class Ack;
class AckDefaultTypeInternal;
extern AckDefaultTypeInternal _Ack_default_instance_;
class ackAFriendTo1;
class ackAFriendTo1DefaultTypeInternal;
extern ackAFriendTo1DefaultTypeInternal _ackAFriendTo1_default_instance_;
class ackAFriendTo2;
class ackAFriendTo2DefaultTypeInternal;
extern ackAFriendTo2DefaultTypeInternal _ackAFriendTo2_default_instance_;
class ackAGroupTo1;
class ackAGroupTo1DefaultTypeInternal;
extern ackAGroupTo1DefaultTypeInternal _ackAGroupTo1_default_instance_;
class ackAGroupTo2;
class ackAGroupTo2DefaultTypeInternal;
extern ackAGroupTo2DefaultTypeInternal _ackAGroupTo2_default_instance_;
class ackGChat;
class ackGChatDefaultTypeInternal;
extern ackGChatDefaultTypeInternal _ackGChat_default_instance_;
class ackGRegister;
class ackGRegisterDefaultTypeInternal;
extern ackGRegisterDefaultTypeInternal _ackGRegister_default_instance_;
class ackGroupInfo;
class ackGroupInfoDefaultTypeInternal;
extern ackGroupInfoDefaultTypeInternal _ackGroupInfo_default_instance_;
class ackLogin;
class ackLoginDefaultTypeInternal;
extern ackLoginDefaultTypeInternal _ackLogin_default_instance_;
class ackSGMember;
class ackSGMemberDefaultTypeInternal;
extern ackSGMemberDefaultTypeInternal _ackSGMember_default_instance_;
class ackSGroup;
class ackSGroupDefaultTypeInternal;
extern ackSGroupDefaultTypeInternal _ackSGroup_default_instance_;
class ackSUser;
class ackSUserDefaultTypeInternal;
extern ackSUserDefaultTypeInternal _ackSUser_default_instance_;
class ackUChat;
class ackUChatDefaultTypeInternal;
extern ackUChatDefaultTypeInternal _ackUChat_default_instance_;
class ackURegister;
class ackURegisterDefaultTypeInternal;
extern ackURegisterDefaultTypeInternal _ackURegister_default_instance_;
class ackUserInfo;
class ackUserInfoDefaultTypeInternal;
extern ackUserInfoDefaultTypeInternal _ackUserInfo_default_instance_;
}  // namespace protocol
}  // namespace im
PROTOBUF_NAMESPACE_OPEN
template<> ::im::protocol::Ack* Arena::CreateMaybeMessage<::im::protocol::Ack>(Arena*);
template<> ::im::protocol::ackAFriendTo1* Arena::CreateMaybeMessage<::im::protocol::ackAFriendTo1>(Arena*);
template<> ::im::protocol::ackAFriendTo2* Arena::CreateMaybeMessage<::im::protocol::ackAFriendTo2>(Arena*);
template<> ::im::protocol::ackAGroupTo1* Arena::CreateMaybeMessage<::im::protocol::ackAGroupTo1>(Arena*);
template<> ::im::protocol::ackAGroupTo2* Arena::CreateMaybeMessage<::im::protocol::ackAGroupTo2>(Arena*);
template<> ::im::protocol::ackGChat* Arena::CreateMaybeMessage<::im::protocol::ackGChat>(Arena*);
template<> ::im::protocol::ackGRegister* Arena::CreateMaybeMessage<::im::protocol::ackGRegister>(Arena*);
template<> ::im::protocol::ackGroupInfo* Arena::CreateMaybeMessage<::im::protocol::ackGroupInfo>(Arena*);
template<> ::im::protocol::ackLogin* Arena::CreateMaybeMessage<::im::protocol::ackLogin>(Arena*);
template<> ::im::protocol::ackSGMember* Arena::CreateMaybeMessage<::im::protocol::ackSGMember>(Arena*);
template<> ::im::protocol::ackSGroup* Arena::CreateMaybeMessage<::im::protocol::ackSGroup>(Arena*);
template<> ::im::protocol::ackSUser* Arena::CreateMaybeMessage<::im::protocol::ackSUser>(Arena*);
template<> ::im::protocol::ackUChat* Arena::CreateMaybeMessage<::im::protocol::ackUChat>(Arena*);
template<> ::im::protocol::ackURegister* Arena::CreateMaybeMessage<::im::protocol::ackURegister>(Arena*);
template<> ::im::protocol::ackUserInfo* Arena::CreateMaybeMessage<::im::protocol::ackUserInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace im {
namespace protocol {

enum Ack_Type : int {
  Ack_Type_ACKUREGISTER = 0,
  Ack_Type_ACKGREGISTER = 1,
  Ack_Type_ACKLOGIN = 2,
  Ack_Type_ACKUCHAT = 3,
  Ack_Type_ACKGCHAT = 4,
  Ack_Type_ACKUINFO = 5,
  Ack_Type_ACKGINFO = 6,
  Ack_Type_ACKAFT1 = 7,
  Ack_Type_ACKAFT2 = 8,
  Ack_Type_ACKAGT1 = 9,
  Ack_Type_ACKAGT2 = 10,
  Ack_Type_ACKSUSER = 11,
  Ack_Type_ACKSGROUP = 12,
  Ack_Type_ACKSGMember = 13,
  Ack_Type_HEARTBEAT = 14,
  Ack_Type_Ack_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Ack_Type_Ack_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Ack_Type_IsValid(int value);
constexpr Ack_Type Ack_Type_Type_MIN = Ack_Type_ACKUREGISTER;
constexpr Ack_Type Ack_Type_Type_MAX = Ack_Type_HEARTBEAT;
constexpr int Ack_Type_Type_ARRAYSIZE = Ack_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Ack_Type_descriptor();
template<typename T>
inline const std::string& Ack_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Ack_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Ack_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Ack_Type_descriptor(), enum_t_value);
}
inline bool Ack_Type_Parse(
    const std::string& name, Ack_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Ack_Type>(
    Ack_Type_descriptor(), name, value);
}
// ===================================================================

class Ack PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.Ack) */ {
 public:
  inline Ack() : Ack(nullptr) {};
  virtual ~Ack();

  Ack(const Ack& from);
  Ack(Ack&& from) noexcept
    : Ack() {
    *this = ::std::move(from);
  }

  inline Ack& operator=(const Ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ack& operator=(Ack&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ack& default_instance();

  enum ContentCase {
    kUregister = 3,
    kGregister = 4,
    kLogin = 5,
    kUchat = 6,
    kGchat = 7,
    kUinfo = 8,
    kGinfo = 9,
    kAft1 = 10,
    kAft2 = 11,
    kAgt1 = 12,
    kAgt2 = 13,
    kSuser = 14,
    kSgroup = 15,
    kSgmember = 16,
    CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ack* internal_default_instance() {
    return reinterpret_cast<const Ack*>(
               &_Ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Ack& a, Ack& b) {
    a.Swap(&b);
  }
  inline void Swap(Ack* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ack* New() const final {
    return CreateMaybeMessage<Ack>(nullptr);
  }

  Ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ack& from);
  void MergeFrom(const Ack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.Ack";
  }
  protected:
  explicit Ack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ack_2eproto);
    return ::descriptor_table_ack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Ack_Type Type;
  static constexpr Type ACKUREGISTER =
    Ack_Type_ACKUREGISTER;
  static constexpr Type ACKGREGISTER =
    Ack_Type_ACKGREGISTER;
  static constexpr Type ACKLOGIN =
    Ack_Type_ACKLOGIN;
  static constexpr Type ACKUCHAT =
    Ack_Type_ACKUCHAT;
  static constexpr Type ACKGCHAT =
    Ack_Type_ACKGCHAT;
  static constexpr Type ACKUINFO =
    Ack_Type_ACKUINFO;
  static constexpr Type ACKGINFO =
    Ack_Type_ACKGINFO;
  static constexpr Type ACKAFT1 =
    Ack_Type_ACKAFT1;
  static constexpr Type ACKAFT2 =
    Ack_Type_ACKAFT2;
  static constexpr Type ACKAGT1 =
    Ack_Type_ACKAGT1;
  static constexpr Type ACKAGT2 =
    Ack_Type_ACKAGT2;
  static constexpr Type ACKSUSER =
    Ack_Type_ACKSUSER;
  static constexpr Type ACKSGROUP =
    Ack_Type_ACKSGROUP;
  static constexpr Type ACKSGMember =
    Ack_Type_ACKSGMember;
  static constexpr Type HEARTBEAT =
    Ack_Type_HEARTBEAT;
  static inline bool Type_IsValid(int value) {
    return Ack_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Ack_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Ack_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Ack_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Ack_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Ack_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Ack_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 2,
    kTypeFieldNumber = 1,
    kUregisterFieldNumber = 3,
    kGregisterFieldNumber = 4,
    kLoginFieldNumber = 5,
    kUchatFieldNumber = 6,
    kGchatFieldNumber = 7,
    kUinfoFieldNumber = 8,
    kGinfoFieldNumber = 9,
    kAft1FieldNumber = 10,
    kAft2FieldNumber = 11,
    kAgt1FieldNumber = 12,
    kAgt2FieldNumber = 13,
    kSuserFieldNumber = 14,
    kSgroupFieldNumber = 15,
    kSgmemberFieldNumber = 16,
  };
  // .google.protobuf.Timestamp timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .im.protocol.Ack.Type type = 1;
  void clear_type();
  ::im::protocol::Ack_Type type() const;
  void set_type(::im::protocol::Ack_Type value);
  private:
  ::im::protocol::Ack_Type _internal_type() const;
  void _internal_set_type(::im::protocol::Ack_Type value);
  public:

  // .im.protocol.ackURegister uregister = 3;
  bool has_uregister() const;
  private:
  bool _internal_has_uregister() const;
  public:
  void clear_uregister();
  const ::im::protocol::ackURegister& uregister() const;
  ::im::protocol::ackURegister* release_uregister();
  ::im::protocol::ackURegister* mutable_uregister();
  void set_allocated_uregister(::im::protocol::ackURegister* uregister);
  private:
  const ::im::protocol::ackURegister& _internal_uregister() const;
  ::im::protocol::ackURegister* _internal_mutable_uregister();
  public:
  void unsafe_arena_set_allocated_uregister(
      ::im::protocol::ackURegister* uregister);
  ::im::protocol::ackURegister* unsafe_arena_release_uregister();

  // .im.protocol.ackGRegister gregister = 4;
  bool has_gregister() const;
  private:
  bool _internal_has_gregister() const;
  public:
  void clear_gregister();
  const ::im::protocol::ackGRegister& gregister() const;
  ::im::protocol::ackGRegister* release_gregister();
  ::im::protocol::ackGRegister* mutable_gregister();
  void set_allocated_gregister(::im::protocol::ackGRegister* gregister);
  private:
  const ::im::protocol::ackGRegister& _internal_gregister() const;
  ::im::protocol::ackGRegister* _internal_mutable_gregister();
  public:
  void unsafe_arena_set_allocated_gregister(
      ::im::protocol::ackGRegister* gregister);
  ::im::protocol::ackGRegister* unsafe_arena_release_gregister();

  // .im.protocol.ackLogin login = 5;
  bool has_login() const;
  private:
  bool _internal_has_login() const;
  public:
  void clear_login();
  const ::im::protocol::ackLogin& login() const;
  ::im::protocol::ackLogin* release_login();
  ::im::protocol::ackLogin* mutable_login();
  void set_allocated_login(::im::protocol::ackLogin* login);
  private:
  const ::im::protocol::ackLogin& _internal_login() const;
  ::im::protocol::ackLogin* _internal_mutable_login();
  public:
  void unsafe_arena_set_allocated_login(
      ::im::protocol::ackLogin* login);
  ::im::protocol::ackLogin* unsafe_arena_release_login();

  // .im.protocol.ackUChat uchat = 6;
  bool has_uchat() const;
  private:
  bool _internal_has_uchat() const;
  public:
  void clear_uchat();
  const ::im::protocol::ackUChat& uchat() const;
  ::im::protocol::ackUChat* release_uchat();
  ::im::protocol::ackUChat* mutable_uchat();
  void set_allocated_uchat(::im::protocol::ackUChat* uchat);
  private:
  const ::im::protocol::ackUChat& _internal_uchat() const;
  ::im::protocol::ackUChat* _internal_mutable_uchat();
  public:
  void unsafe_arena_set_allocated_uchat(
      ::im::protocol::ackUChat* uchat);
  ::im::protocol::ackUChat* unsafe_arena_release_uchat();

  // .im.protocol.ackGChat gchat = 7;
  bool has_gchat() const;
  private:
  bool _internal_has_gchat() const;
  public:
  void clear_gchat();
  const ::im::protocol::ackGChat& gchat() const;
  ::im::protocol::ackGChat* release_gchat();
  ::im::protocol::ackGChat* mutable_gchat();
  void set_allocated_gchat(::im::protocol::ackGChat* gchat);
  private:
  const ::im::protocol::ackGChat& _internal_gchat() const;
  ::im::protocol::ackGChat* _internal_mutable_gchat();
  public:
  void unsafe_arena_set_allocated_gchat(
      ::im::protocol::ackGChat* gchat);
  ::im::protocol::ackGChat* unsafe_arena_release_gchat();

  // .im.protocol.ackUserInfo uinfo = 8;
  bool has_uinfo() const;
  private:
  bool _internal_has_uinfo() const;
  public:
  void clear_uinfo();
  const ::im::protocol::ackUserInfo& uinfo() const;
  ::im::protocol::ackUserInfo* release_uinfo();
  ::im::protocol::ackUserInfo* mutable_uinfo();
  void set_allocated_uinfo(::im::protocol::ackUserInfo* uinfo);
  private:
  const ::im::protocol::ackUserInfo& _internal_uinfo() const;
  ::im::protocol::ackUserInfo* _internal_mutable_uinfo();
  public:
  void unsafe_arena_set_allocated_uinfo(
      ::im::protocol::ackUserInfo* uinfo);
  ::im::protocol::ackUserInfo* unsafe_arena_release_uinfo();

  // .im.protocol.ackGroupInfo ginfo = 9;
  bool has_ginfo() const;
  private:
  bool _internal_has_ginfo() const;
  public:
  void clear_ginfo();
  const ::im::protocol::ackGroupInfo& ginfo() const;
  ::im::protocol::ackGroupInfo* release_ginfo();
  ::im::protocol::ackGroupInfo* mutable_ginfo();
  void set_allocated_ginfo(::im::protocol::ackGroupInfo* ginfo);
  private:
  const ::im::protocol::ackGroupInfo& _internal_ginfo() const;
  ::im::protocol::ackGroupInfo* _internal_mutable_ginfo();
  public:
  void unsafe_arena_set_allocated_ginfo(
      ::im::protocol::ackGroupInfo* ginfo);
  ::im::protocol::ackGroupInfo* unsafe_arena_release_ginfo();

  // .im.protocol.ackAFriendTo1 aft1 = 10;
  bool has_aft1() const;
  private:
  bool _internal_has_aft1() const;
  public:
  void clear_aft1();
  const ::im::protocol::ackAFriendTo1& aft1() const;
  ::im::protocol::ackAFriendTo1* release_aft1();
  ::im::protocol::ackAFriendTo1* mutable_aft1();
  void set_allocated_aft1(::im::protocol::ackAFriendTo1* aft1);
  private:
  const ::im::protocol::ackAFriendTo1& _internal_aft1() const;
  ::im::protocol::ackAFriendTo1* _internal_mutable_aft1();
  public:
  void unsafe_arena_set_allocated_aft1(
      ::im::protocol::ackAFriendTo1* aft1);
  ::im::protocol::ackAFriendTo1* unsafe_arena_release_aft1();

  // .im.protocol.ackAFriendTo2 aft2 = 11;
  bool has_aft2() const;
  private:
  bool _internal_has_aft2() const;
  public:
  void clear_aft2();
  const ::im::protocol::ackAFriendTo2& aft2() const;
  ::im::protocol::ackAFriendTo2* release_aft2();
  ::im::protocol::ackAFriendTo2* mutable_aft2();
  void set_allocated_aft2(::im::protocol::ackAFriendTo2* aft2);
  private:
  const ::im::protocol::ackAFriendTo2& _internal_aft2() const;
  ::im::protocol::ackAFriendTo2* _internal_mutable_aft2();
  public:
  void unsafe_arena_set_allocated_aft2(
      ::im::protocol::ackAFriendTo2* aft2);
  ::im::protocol::ackAFriendTo2* unsafe_arena_release_aft2();

  // .im.protocol.ackAGroupTo1 agt1 = 12;
  bool has_agt1() const;
  private:
  bool _internal_has_agt1() const;
  public:
  void clear_agt1();
  const ::im::protocol::ackAGroupTo1& agt1() const;
  ::im::protocol::ackAGroupTo1* release_agt1();
  ::im::protocol::ackAGroupTo1* mutable_agt1();
  void set_allocated_agt1(::im::protocol::ackAGroupTo1* agt1);
  private:
  const ::im::protocol::ackAGroupTo1& _internal_agt1() const;
  ::im::protocol::ackAGroupTo1* _internal_mutable_agt1();
  public:
  void unsafe_arena_set_allocated_agt1(
      ::im::protocol::ackAGroupTo1* agt1);
  ::im::protocol::ackAGroupTo1* unsafe_arena_release_agt1();

  // .im.protocol.ackAGroupTo2 agt2 = 13;
  bool has_agt2() const;
  private:
  bool _internal_has_agt2() const;
  public:
  void clear_agt2();
  const ::im::protocol::ackAGroupTo2& agt2() const;
  ::im::protocol::ackAGroupTo2* release_agt2();
  ::im::protocol::ackAGroupTo2* mutable_agt2();
  void set_allocated_agt2(::im::protocol::ackAGroupTo2* agt2);
  private:
  const ::im::protocol::ackAGroupTo2& _internal_agt2() const;
  ::im::protocol::ackAGroupTo2* _internal_mutable_agt2();
  public:
  void unsafe_arena_set_allocated_agt2(
      ::im::protocol::ackAGroupTo2* agt2);
  ::im::protocol::ackAGroupTo2* unsafe_arena_release_agt2();

  // .im.protocol.ackSUser suser = 14;
  bool has_suser() const;
  private:
  bool _internal_has_suser() const;
  public:
  void clear_suser();
  const ::im::protocol::ackSUser& suser() const;
  ::im::protocol::ackSUser* release_suser();
  ::im::protocol::ackSUser* mutable_suser();
  void set_allocated_suser(::im::protocol::ackSUser* suser);
  private:
  const ::im::protocol::ackSUser& _internal_suser() const;
  ::im::protocol::ackSUser* _internal_mutable_suser();
  public:
  void unsafe_arena_set_allocated_suser(
      ::im::protocol::ackSUser* suser);
  ::im::protocol::ackSUser* unsafe_arena_release_suser();

  // .im.protocol.ackSGroup sgroup = 15;
  bool has_sgroup() const;
  private:
  bool _internal_has_sgroup() const;
  public:
  void clear_sgroup();
  const ::im::protocol::ackSGroup& sgroup() const;
  ::im::protocol::ackSGroup* release_sgroup();
  ::im::protocol::ackSGroup* mutable_sgroup();
  void set_allocated_sgroup(::im::protocol::ackSGroup* sgroup);
  private:
  const ::im::protocol::ackSGroup& _internal_sgroup() const;
  ::im::protocol::ackSGroup* _internal_mutable_sgroup();
  public:
  void unsafe_arena_set_allocated_sgroup(
      ::im::protocol::ackSGroup* sgroup);
  ::im::protocol::ackSGroup* unsafe_arena_release_sgroup();

  // .im.protocol.ackSGMember sgmember = 16;
  bool has_sgmember() const;
  private:
  bool _internal_has_sgmember() const;
  public:
  void clear_sgmember();
  const ::im::protocol::ackSGMember& sgmember() const;
  ::im::protocol::ackSGMember* release_sgmember();
  ::im::protocol::ackSGMember* mutable_sgmember();
  void set_allocated_sgmember(::im::protocol::ackSGMember* sgmember);
  private:
  const ::im::protocol::ackSGMember& _internal_sgmember() const;
  ::im::protocol::ackSGMember* _internal_mutable_sgmember();
  public:
  void unsafe_arena_set_allocated_sgmember(
      ::im::protocol::ackSGMember* sgmember);
  ::im::protocol::ackSGMember* unsafe_arena_release_sgmember();

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:im.protocol.Ack)
 private:
  class _Internal;
  void set_has_uregister();
  void set_has_gregister();
  void set_has_login();
  void set_has_uchat();
  void set_has_gchat();
  void set_has_uinfo();
  void set_has_ginfo();
  void set_has_aft1();
  void set_has_aft2();
  void set_has_agt1();
  void set_has_agt2();
  void set_has_suser();
  void set_has_sgroup();
  void set_has_sgmember();

  inline bool has_content() const;
  inline void clear_has_content();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  int type_;
  union ContentUnion {
    ContentUnion() {}
    ::im::protocol::ackURegister* uregister_;
    ::im::protocol::ackGRegister* gregister_;
    ::im::protocol::ackLogin* login_;
    ::im::protocol::ackUChat* uchat_;
    ::im::protocol::ackGChat* gchat_;
    ::im::protocol::ackUserInfo* uinfo_;
    ::im::protocol::ackGroupInfo* ginfo_;
    ::im::protocol::ackAFriendTo1* aft1_;
    ::im::protocol::ackAFriendTo2* aft2_;
    ::im::protocol::ackAGroupTo1* agt1_;
    ::im::protocol::ackAGroupTo2* agt2_;
    ::im::protocol::ackSUser* suser_;
    ::im::protocol::ackSGroup* sgroup_;
    ::im::protocol::ackSGMember* sgmember_;
  } content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ack_2eproto;
};
// -------------------------------------------------------------------

class ackURegister PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.ackURegister) */ {
 public:
  inline ackURegister() : ackURegister(nullptr) {};
  virtual ~ackURegister();

  ackURegister(const ackURegister& from);
  ackURegister(ackURegister&& from) noexcept
    : ackURegister() {
    *this = ::std::move(from);
  }

  inline ackURegister& operator=(const ackURegister& from) {
    CopyFrom(from);
    return *this;
  }
  inline ackURegister& operator=(ackURegister&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ackURegister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ackURegister* internal_default_instance() {
    return reinterpret_cast<const ackURegister*>(
               &_ackURegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ackURegister& a, ackURegister& b) {
    a.Swap(&b);
  }
  inline void Swap(ackURegister* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ackURegister* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ackURegister* New() const final {
    return CreateMaybeMessage<ackURegister>(nullptr);
  }

  ackURegister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ackURegister>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ackURegister& from);
  void MergeFrom(const ackURegister& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ackURegister* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.ackURegister";
  }
  protected:
  explicit ackURegister(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ack_2eproto);
    return ::descriptor_table_ack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.ackURegister)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ack_2eproto;
};
// -------------------------------------------------------------------

class ackGRegister PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.ackGRegister) */ {
 public:
  inline ackGRegister() : ackGRegister(nullptr) {};
  virtual ~ackGRegister();

  ackGRegister(const ackGRegister& from);
  ackGRegister(ackGRegister&& from) noexcept
    : ackGRegister() {
    *this = ::std::move(from);
  }

  inline ackGRegister& operator=(const ackGRegister& from) {
    CopyFrom(from);
    return *this;
  }
  inline ackGRegister& operator=(ackGRegister&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ackGRegister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ackGRegister* internal_default_instance() {
    return reinterpret_cast<const ackGRegister*>(
               &_ackGRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ackGRegister& a, ackGRegister& b) {
    a.Swap(&b);
  }
  inline void Swap(ackGRegister* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ackGRegister* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ackGRegister* New() const final {
    return CreateMaybeMessage<ackGRegister>(nullptr);
  }

  ackGRegister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ackGRegister>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ackGRegister& from);
  void MergeFrom(const ackGRegister& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ackGRegister* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.ackGRegister";
  }
  protected:
  explicit ackGRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ack_2eproto);
    return ::descriptor_table_ack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.ackGRegister)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ack_2eproto;
};
// -------------------------------------------------------------------

class ackLogin PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.ackLogin) */ {
 public:
  inline ackLogin() : ackLogin(nullptr) {};
  virtual ~ackLogin();

  ackLogin(const ackLogin& from);
  ackLogin(ackLogin&& from) noexcept
    : ackLogin() {
    *this = ::std::move(from);
  }

  inline ackLogin& operator=(const ackLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline ackLogin& operator=(ackLogin&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ackLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ackLogin* internal_default_instance() {
    return reinterpret_cast<const ackLogin*>(
               &_ackLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ackLogin& a, ackLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(ackLogin* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ackLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ackLogin* New() const final {
    return CreateMaybeMessage<ackLogin>(nullptr);
  }

  ackLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ackLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ackLogin& from);
  void MergeFrom(const ackLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ackLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.ackLogin";
  }
  protected:
  explicit ackLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ack_2eproto);
    return ::descriptor_table_ack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool status = 2;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.ackLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ack_2eproto;
};
// -------------------------------------------------------------------

class ackUChat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.ackUChat) */ {
 public:
  inline ackUChat() : ackUChat(nullptr) {};
  virtual ~ackUChat();

  ackUChat(const ackUChat& from);
  ackUChat(ackUChat&& from) noexcept
    : ackUChat() {
    *this = ::std::move(from);
  }

  inline ackUChat& operator=(const ackUChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ackUChat& operator=(ackUChat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ackUChat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ackUChat* internal_default_instance() {
    return reinterpret_cast<const ackUChat*>(
               &_ackUChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ackUChat& a, ackUChat& b) {
    a.Swap(&b);
  }
  inline void Swap(ackUChat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ackUChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ackUChat* New() const final {
    return CreateMaybeMessage<ackUChat>(nullptr);
  }

  ackUChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ackUChat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ackUChat& from);
  void MergeFrom(const ackUChat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ackUChat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.ackUChat";
  }
  protected:
  explicit ackUChat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ack_2eproto);
    return ::descriptor_table_ack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kSenderIdFieldNumber = 1,
    kReceiverIdFieldNumber = 2,
    kTimeFieldNumber = 4,
  };
  // string message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 sender_id = 1;
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 receiver_id = 2;
  void clear_receiver_id();
  ::PROTOBUF_NAMESPACE_ID::int32 receiver_id() const;
  void set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_receiver_id() const;
  void _internal_set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time = 4;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.ackUChat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 receiver_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ack_2eproto;
};
// -------------------------------------------------------------------

class ackGChat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.ackGChat) */ {
 public:
  inline ackGChat() : ackGChat(nullptr) {};
  virtual ~ackGChat();

  ackGChat(const ackGChat& from);
  ackGChat(ackGChat&& from) noexcept
    : ackGChat() {
    *this = ::std::move(from);
  }

  inline ackGChat& operator=(const ackGChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ackGChat& operator=(ackGChat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ackGChat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ackGChat* internal_default_instance() {
    return reinterpret_cast<const ackGChat*>(
               &_ackGChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ackGChat& a, ackGChat& b) {
    a.Swap(&b);
  }
  inline void Swap(ackGChat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ackGChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ackGChat* New() const final {
    return CreateMaybeMessage<ackGChat>(nullptr);
  }

  ackGChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ackGChat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ackGChat& from);
  void MergeFrom(const ackGChat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ackGChat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.ackGChat";
  }
  protected:
  explicit ackGChat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ack_2eproto);
    return ::descriptor_table_ack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kSenderIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kTimeFieldNumber = 4,
  };
  // string message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 sender_id = 1;
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 group_id = 2;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time = 4;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.ackGChat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 group_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ack_2eproto;
};
// -------------------------------------------------------------------

class ackUserInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.ackUserInfo) */ {
 public:
  inline ackUserInfo() : ackUserInfo(nullptr) {};
  virtual ~ackUserInfo();

  ackUserInfo(const ackUserInfo& from);
  ackUserInfo(ackUserInfo&& from) noexcept
    : ackUserInfo() {
    *this = ::std::move(from);
  }

  inline ackUserInfo& operator=(const ackUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ackUserInfo& operator=(ackUserInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ackUserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ackUserInfo* internal_default_instance() {
    return reinterpret_cast<const ackUserInfo*>(
               &_ackUserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ackUserInfo& a, ackUserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ackUserInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ackUserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ackUserInfo* New() const final {
    return CreateMaybeMessage<ackUserInfo>(nullptr);
  }

  ackUserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ackUserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ackUserInfo& from);
  void MergeFrom(const ackUserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ackUserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.ackUserInfo";
  }
  protected:
  explicit ackUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ack_2eproto);
    return ::descriptor_table_ack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kIntroductionFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string username = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string introduction = 3;
  void clear_introduction();
  const std::string& introduction() const;
  void set_introduction(const std::string& value);
  void set_introduction(std::string&& value);
  void set_introduction(const char* value);
  void set_introduction(const char* value, size_t size);
  std::string* mutable_introduction();
  std::string* release_introduction();
  void set_allocated_introduction(std::string* introduction);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_introduction();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_introduction(
      std::string* introduction);
  private:
  const std::string& _internal_introduction() const;
  void _internal_set_introduction(const std::string& value);
  std::string* _internal_mutable_introduction();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.ackUserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr introduction_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ack_2eproto;
};
// -------------------------------------------------------------------

class ackGroupInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.ackGroupInfo) */ {
 public:
  inline ackGroupInfo() : ackGroupInfo(nullptr) {};
  virtual ~ackGroupInfo();

  ackGroupInfo(const ackGroupInfo& from);
  ackGroupInfo(ackGroupInfo&& from) noexcept
    : ackGroupInfo() {
    *this = ::std::move(from);
  }

  inline ackGroupInfo& operator=(const ackGroupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ackGroupInfo& operator=(ackGroupInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ackGroupInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ackGroupInfo* internal_default_instance() {
    return reinterpret_cast<const ackGroupInfo*>(
               &_ackGroupInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ackGroupInfo& a, ackGroupInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ackGroupInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ackGroupInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ackGroupInfo* New() const final {
    return CreateMaybeMessage<ackGroupInfo>(nullptr);
  }

  ackGroupInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ackGroupInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ackGroupInfo& from);
  void MergeFrom(const ackGroupInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ackGroupInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.ackGroupInfo";
  }
  protected:
  explicit ackGroupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ack_2eproto);
    return ::descriptor_table_ack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupnameFieldNumber = 3,
    kIntroductionFieldNumber = 4,
    kIdFieldNumber = 1,
    kLordIdFieldNumber = 2,
  };
  // string groupname = 3;
  void clear_groupname();
  const std::string& groupname() const;
  void set_groupname(const std::string& value);
  void set_groupname(std::string&& value);
  void set_groupname(const char* value);
  void set_groupname(const char* value, size_t size);
  std::string* mutable_groupname();
  std::string* release_groupname();
  void set_allocated_groupname(std::string* groupname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_groupname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_groupname(
      std::string* groupname);
  private:
  const std::string& _internal_groupname() const;
  void _internal_set_groupname(const std::string& value);
  std::string* _internal_mutable_groupname();
  public:

  // string introduction = 4;
  void clear_introduction();
  const std::string& introduction() const;
  void set_introduction(const std::string& value);
  void set_introduction(std::string&& value);
  void set_introduction(const char* value);
  void set_introduction(const char* value, size_t size);
  std::string* mutable_introduction();
  std::string* release_introduction();
  void set_allocated_introduction(std::string* introduction);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_introduction();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_introduction(
      std::string* introduction);
  private:
  const std::string& _internal_introduction() const;
  void _internal_set_introduction(const std::string& value);
  std::string* _internal_mutable_introduction();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lord_id = 2;
  void clear_lord_id();
  ::PROTOBUF_NAMESPACE_ID::int32 lord_id() const;
  void set_lord_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lord_id() const;
  void _internal_set_lord_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.ackGroupInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr introduction_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 lord_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ack_2eproto;
};
// -------------------------------------------------------------------

class ackAFriendTo1 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.ackAFriendTo1) */ {
 public:
  inline ackAFriendTo1() : ackAFriendTo1(nullptr) {};
  virtual ~ackAFriendTo1();

  ackAFriendTo1(const ackAFriendTo1& from);
  ackAFriendTo1(ackAFriendTo1&& from) noexcept
    : ackAFriendTo1() {
    *this = ::std::move(from);
  }

  inline ackAFriendTo1& operator=(const ackAFriendTo1& from) {
    CopyFrom(from);
    return *this;
  }
  inline ackAFriendTo1& operator=(ackAFriendTo1&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ackAFriendTo1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ackAFriendTo1* internal_default_instance() {
    return reinterpret_cast<const ackAFriendTo1*>(
               &_ackAFriendTo1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ackAFriendTo1& a, ackAFriendTo1& b) {
    a.Swap(&b);
  }
  inline void Swap(ackAFriendTo1* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ackAFriendTo1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ackAFriendTo1* New() const final {
    return CreateMaybeMessage<ackAFriendTo1>(nullptr);
  }

  ackAFriendTo1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ackAFriendTo1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ackAFriendTo1& from);
  void MergeFrom(const ackAFriendTo1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ackAFriendTo1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.ackAFriendTo1";
  }
  protected:
  explicit ackAFriendTo1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ack_2eproto);
    return ::descriptor_table_ack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kSenderIdFieldNumber = 1,
    kReceiverIdFieldNumber = 2,
    kStatusFieldNumber = 4,
    kTimeFieldNumber = 5,
  };
  // string message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 sender_id = 1;
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 receiver_id = 2;
  void clear_receiver_id();
  ::PROTOBUF_NAMESPACE_ID::int32 receiver_id() const;
  void set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_receiver_id() const;
  void _internal_set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool status = 4;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // int32 time = 5;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.ackAFriendTo1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 receiver_id_;
  bool status_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ack_2eproto;
};
// -------------------------------------------------------------------

class ackAFriendTo2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.ackAFriendTo2) */ {
 public:
  inline ackAFriendTo2() : ackAFriendTo2(nullptr) {};
  virtual ~ackAFriendTo2();

  ackAFriendTo2(const ackAFriendTo2& from);
  ackAFriendTo2(ackAFriendTo2&& from) noexcept
    : ackAFriendTo2() {
    *this = ::std::move(from);
  }

  inline ackAFriendTo2& operator=(const ackAFriendTo2& from) {
    CopyFrom(from);
    return *this;
  }
  inline ackAFriendTo2& operator=(ackAFriendTo2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ackAFriendTo2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ackAFriendTo2* internal_default_instance() {
    return reinterpret_cast<const ackAFriendTo2*>(
               &_ackAFriendTo2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ackAFriendTo2& a, ackAFriendTo2& b) {
    a.Swap(&b);
  }
  inline void Swap(ackAFriendTo2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ackAFriendTo2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ackAFriendTo2* New() const final {
    return CreateMaybeMessage<ackAFriendTo2>(nullptr);
  }

  ackAFriendTo2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ackAFriendTo2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ackAFriendTo2& from);
  void MergeFrom(const ackAFriendTo2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ackAFriendTo2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.ackAFriendTo2";
  }
  protected:
  explicit ackAFriendTo2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ack_2eproto);
    return ::descriptor_table_ack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kSenderIdFieldNumber = 1,
    kReceiverIdFieldNumber = 2,
    kTimeFieldNumber = 4,
  };
  // string message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 sender_id = 1;
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 receiver_id = 2;
  void clear_receiver_id();
  ::PROTOBUF_NAMESPACE_ID::int32 receiver_id() const;
  void set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_receiver_id() const;
  void _internal_set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time = 4;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.ackAFriendTo2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 receiver_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ack_2eproto;
};
// -------------------------------------------------------------------

class ackAGroupTo1 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.ackAGroupTo1) */ {
 public:
  inline ackAGroupTo1() : ackAGroupTo1(nullptr) {};
  virtual ~ackAGroupTo1();

  ackAGroupTo1(const ackAGroupTo1& from);
  ackAGroupTo1(ackAGroupTo1&& from) noexcept
    : ackAGroupTo1() {
    *this = ::std::move(from);
  }

  inline ackAGroupTo1& operator=(const ackAGroupTo1& from) {
    CopyFrom(from);
    return *this;
  }
  inline ackAGroupTo1& operator=(ackAGroupTo1&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ackAGroupTo1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ackAGroupTo1* internal_default_instance() {
    return reinterpret_cast<const ackAGroupTo1*>(
               &_ackAGroupTo1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ackAGroupTo1& a, ackAGroupTo1& b) {
    a.Swap(&b);
  }
  inline void Swap(ackAGroupTo1* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ackAGroupTo1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ackAGroupTo1* New() const final {
    return CreateMaybeMessage<ackAGroupTo1>(nullptr);
  }

  ackAGroupTo1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ackAGroupTo1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ackAGroupTo1& from);
  void MergeFrom(const ackAGroupTo1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ackAGroupTo1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.ackAGroupTo1";
  }
  protected:
  explicit ackAGroupTo1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ack_2eproto);
    return ::descriptor_table_ack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 4,
    kSenderIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kLordIdFieldNumber = 3,
    kStatusFieldNumber = 5,
    kTimeFieldNumber = 6,
  };
  // string message = 4;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 sender_id = 1;
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 group_id = 2;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lord_id = 3;
  void clear_lord_id();
  ::PROTOBUF_NAMESPACE_ID::int32 lord_id() const;
  void set_lord_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lord_id() const;
  void _internal_set_lord_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool status = 5;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // int32 time = 6;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.ackAGroupTo1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 group_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 lord_id_;
  bool status_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ack_2eproto;
};
// -------------------------------------------------------------------

class ackAGroupTo2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.ackAGroupTo2) */ {
 public:
  inline ackAGroupTo2() : ackAGroupTo2(nullptr) {};
  virtual ~ackAGroupTo2();

  ackAGroupTo2(const ackAGroupTo2& from);
  ackAGroupTo2(ackAGroupTo2&& from) noexcept
    : ackAGroupTo2() {
    *this = ::std::move(from);
  }

  inline ackAGroupTo2& operator=(const ackAGroupTo2& from) {
    CopyFrom(from);
    return *this;
  }
  inline ackAGroupTo2& operator=(ackAGroupTo2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ackAGroupTo2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ackAGroupTo2* internal_default_instance() {
    return reinterpret_cast<const ackAGroupTo2*>(
               &_ackAGroupTo2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ackAGroupTo2& a, ackAGroupTo2& b) {
    a.Swap(&b);
  }
  inline void Swap(ackAGroupTo2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ackAGroupTo2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ackAGroupTo2* New() const final {
    return CreateMaybeMessage<ackAGroupTo2>(nullptr);
  }

  ackAGroupTo2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ackAGroupTo2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ackAGroupTo2& from);
  void MergeFrom(const ackAGroupTo2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ackAGroupTo2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.ackAGroupTo2";
  }
  protected:
  explicit ackAGroupTo2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ack_2eproto);
    return ::descriptor_table_ack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 4,
    kSenderIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kLordIdFieldNumber = 3,
    kTimeFieldNumber = 5,
  };
  // string message = 4;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 sender_id = 1;
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 group_id = 2;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lord_id = 3;
  void clear_lord_id();
  ::PROTOBUF_NAMESPACE_ID::int32 lord_id() const;
  void set_lord_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lord_id() const;
  void _internal_set_lord_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time = 5;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.ackAGroupTo2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 group_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 lord_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ack_2eproto;
};
// -------------------------------------------------------------------

class ackSUser PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.ackSUser) */ {
 public:
  inline ackSUser() : ackSUser(nullptr) {};
  virtual ~ackSUser();

  ackSUser(const ackSUser& from);
  ackSUser(ackSUser&& from) noexcept
    : ackSUser() {
    *this = ::std::move(from);
  }

  inline ackSUser& operator=(const ackSUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline ackSUser& operator=(ackSUser&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ackSUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ackSUser* internal_default_instance() {
    return reinterpret_cast<const ackSUser*>(
               &_ackSUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ackSUser& a, ackSUser& b) {
    a.Swap(&b);
  }
  inline void Swap(ackSUser* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ackSUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ackSUser* New() const final {
    return CreateMaybeMessage<ackSUser>(nullptr);
  }

  ackSUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ackSUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ackSUser& from);
  void MergeFrom(const ackSUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ackSUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.ackSUser";
  }
  protected:
  explicit ackSUser(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ack_2eproto);
    return ::descriptor_table_ack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kIntroductionFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string username = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string introduction = 3;
  void clear_introduction();
  const std::string& introduction() const;
  void set_introduction(const std::string& value);
  void set_introduction(std::string&& value);
  void set_introduction(const char* value);
  void set_introduction(const char* value, size_t size);
  std::string* mutable_introduction();
  std::string* release_introduction();
  void set_allocated_introduction(std::string* introduction);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_introduction();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_introduction(
      std::string* introduction);
  private:
  const std::string& _internal_introduction() const;
  void _internal_set_introduction(const std::string& value);
  std::string* _internal_mutable_introduction();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.ackSUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr introduction_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ack_2eproto;
};
// -------------------------------------------------------------------

class ackSGroup PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.ackSGroup) */ {
 public:
  inline ackSGroup() : ackSGroup(nullptr) {};
  virtual ~ackSGroup();

  ackSGroup(const ackSGroup& from);
  ackSGroup(ackSGroup&& from) noexcept
    : ackSGroup() {
    *this = ::std::move(from);
  }

  inline ackSGroup& operator=(const ackSGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline ackSGroup& operator=(ackSGroup&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ackSGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ackSGroup* internal_default_instance() {
    return reinterpret_cast<const ackSGroup*>(
               &_ackSGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ackSGroup& a, ackSGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(ackSGroup* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ackSGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ackSGroup* New() const final {
    return CreateMaybeMessage<ackSGroup>(nullptr);
  }

  ackSGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ackSGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ackSGroup& from);
  void MergeFrom(const ackSGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ackSGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.ackSGroup";
  }
  protected:
  explicit ackSGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ack_2eproto);
    return ::descriptor_table_ack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupnameFieldNumber = 3,
    kIntroductionFieldNumber = 4,
    kIdFieldNumber = 1,
    kLordIdFieldNumber = 2,
  };
  // string groupname = 3;
  void clear_groupname();
  const std::string& groupname() const;
  void set_groupname(const std::string& value);
  void set_groupname(std::string&& value);
  void set_groupname(const char* value);
  void set_groupname(const char* value, size_t size);
  std::string* mutable_groupname();
  std::string* release_groupname();
  void set_allocated_groupname(std::string* groupname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_groupname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_groupname(
      std::string* groupname);
  private:
  const std::string& _internal_groupname() const;
  void _internal_set_groupname(const std::string& value);
  std::string* _internal_mutable_groupname();
  public:

  // string introduction = 4;
  void clear_introduction();
  const std::string& introduction() const;
  void set_introduction(const std::string& value);
  void set_introduction(std::string&& value);
  void set_introduction(const char* value);
  void set_introduction(const char* value, size_t size);
  std::string* mutable_introduction();
  std::string* release_introduction();
  void set_allocated_introduction(std::string* introduction);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_introduction();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_introduction(
      std::string* introduction);
  private:
  const std::string& _internal_introduction() const;
  void _internal_set_introduction(const std::string& value);
  std::string* _internal_mutable_introduction();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lord_id = 2;
  void clear_lord_id();
  ::PROTOBUF_NAMESPACE_ID::int32 lord_id() const;
  void set_lord_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lord_id() const;
  void _internal_set_lord_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.ackSGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr introduction_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 lord_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ack_2eproto;
};
// -------------------------------------------------------------------

class ackSGMember PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.ackSGMember) */ {
 public:
  inline ackSGMember() : ackSGMember(nullptr) {};
  virtual ~ackSGMember();

  ackSGMember(const ackSGMember& from);
  ackSGMember(ackSGMember&& from) noexcept
    : ackSGMember() {
    *this = ::std::move(from);
  }

  inline ackSGMember& operator=(const ackSGMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline ackSGMember& operator=(ackSGMember&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ackSGMember& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ackSGMember* internal_default_instance() {
    return reinterpret_cast<const ackSGMember*>(
               &_ackSGMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ackSGMember& a, ackSGMember& b) {
    a.Swap(&b);
  }
  inline void Swap(ackSGMember* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ackSGMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ackSGMember* New() const final {
    return CreateMaybeMessage<ackSGMember>(nullptr);
  }

  ackSGMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ackSGMember>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ackSGMember& from);
  void MergeFrom(const ackSGMember& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ackSGMember* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.ackSGMember";
  }
  protected:
  explicit ackSGMember(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ack_2eproto);
    return ::descriptor_table_ack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kIntroductionFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string username = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string introduction = 3;
  void clear_introduction();
  const std::string& introduction() const;
  void set_introduction(const std::string& value);
  void set_introduction(std::string&& value);
  void set_introduction(const char* value);
  void set_introduction(const char* value, size_t size);
  std::string* mutable_introduction();
  std::string* release_introduction();
  void set_allocated_introduction(std::string* introduction);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_introduction();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_introduction(
      std::string* introduction);
  private:
  const std::string& _internal_introduction() const;
  void _internal_set_introduction(const std::string& value);
  std::string* _internal_mutable_introduction();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.ackSGMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr introduction_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ack_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ack

// .im.protocol.Ack.Type type = 1;
inline void Ack::clear_type() {
  type_ = 0;
}
inline ::im::protocol::Ack_Type Ack::_internal_type() const {
  return static_cast< ::im::protocol::Ack_Type >(type_);
}
inline ::im::protocol::Ack_Type Ack::type() const {
  // @@protoc_insertion_point(field_get:im.protocol.Ack.type)
  return _internal_type();
}
inline void Ack::_internal_set_type(::im::protocol::Ack_Type value) {
  
  type_ = value;
}
inline void Ack::set_type(::im::protocol::Ack_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:im.protocol.Ack.type)
}

// .google.protobuf.Timestamp timestamp = 2;
inline bool Ack::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool Ack::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Ack::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Ack::timestamp() const {
  // @@protoc_insertion_point(field_get:im.protocol.Ack.timestamp)
  return _internal_timestamp();
}
inline void Ack::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Ack.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Ack::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Ack::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:im.protocol.Ack.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Ack::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Ack::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Ack.timestamp)
  return _internal_mutable_timestamp();
}
inline void Ack::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Ack.timestamp)
}

// .im.protocol.ackURegister uregister = 3;
inline bool Ack::_internal_has_uregister() const {
  return content_case() == kUregister;
}
inline bool Ack::has_uregister() const {
  return _internal_has_uregister();
}
inline void Ack::set_has_uregister() {
  _oneof_case_[0] = kUregister;
}
inline void Ack::clear_uregister() {
  if (_internal_has_uregister()) {
    if (GetArena() == nullptr) {
      delete content_.uregister_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::ackURegister* Ack::release_uregister() {
  // @@protoc_insertion_point(field_release:im.protocol.Ack.uregister)
  if (_internal_has_uregister()) {
    clear_has_content();
      ::im::protocol::ackURegister* temp = content_.uregister_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.uregister_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::ackURegister& Ack::_internal_uregister() const {
  return _internal_has_uregister()
      ? *content_.uregister_
      : *reinterpret_cast< ::im::protocol::ackURegister*>(&::im::protocol::_ackURegister_default_instance_);
}
inline const ::im::protocol::ackURegister& Ack::uregister() const {
  // @@protoc_insertion_point(field_get:im.protocol.Ack.uregister)
  return _internal_uregister();
}
inline ::im::protocol::ackURegister* Ack::unsafe_arena_release_uregister() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Ack.uregister)
  if (_internal_has_uregister()) {
    clear_has_content();
    ::im::protocol::ackURegister* temp = content_.uregister_;
    content_.uregister_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ack::unsafe_arena_set_allocated_uregister(::im::protocol::ackURegister* uregister) {
  clear_content();
  if (uregister) {
    set_has_uregister();
    content_.uregister_ = uregister;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Ack.uregister)
}
inline ::im::protocol::ackURegister* Ack::_internal_mutable_uregister() {
  if (!_internal_has_uregister()) {
    clear_content();
    set_has_uregister();
    content_.uregister_ = CreateMaybeMessage< ::im::protocol::ackURegister >(GetArena());
  }
  return content_.uregister_;
}
inline ::im::protocol::ackURegister* Ack::mutable_uregister() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Ack.uregister)
  return _internal_mutable_uregister();
}

// .im.protocol.ackGRegister gregister = 4;
inline bool Ack::_internal_has_gregister() const {
  return content_case() == kGregister;
}
inline bool Ack::has_gregister() const {
  return _internal_has_gregister();
}
inline void Ack::set_has_gregister() {
  _oneof_case_[0] = kGregister;
}
inline void Ack::clear_gregister() {
  if (_internal_has_gregister()) {
    if (GetArena() == nullptr) {
      delete content_.gregister_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::ackGRegister* Ack::release_gregister() {
  // @@protoc_insertion_point(field_release:im.protocol.Ack.gregister)
  if (_internal_has_gregister()) {
    clear_has_content();
      ::im::protocol::ackGRegister* temp = content_.gregister_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.gregister_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::ackGRegister& Ack::_internal_gregister() const {
  return _internal_has_gregister()
      ? *content_.gregister_
      : *reinterpret_cast< ::im::protocol::ackGRegister*>(&::im::protocol::_ackGRegister_default_instance_);
}
inline const ::im::protocol::ackGRegister& Ack::gregister() const {
  // @@protoc_insertion_point(field_get:im.protocol.Ack.gregister)
  return _internal_gregister();
}
inline ::im::protocol::ackGRegister* Ack::unsafe_arena_release_gregister() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Ack.gregister)
  if (_internal_has_gregister()) {
    clear_has_content();
    ::im::protocol::ackGRegister* temp = content_.gregister_;
    content_.gregister_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ack::unsafe_arena_set_allocated_gregister(::im::protocol::ackGRegister* gregister) {
  clear_content();
  if (gregister) {
    set_has_gregister();
    content_.gregister_ = gregister;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Ack.gregister)
}
inline ::im::protocol::ackGRegister* Ack::_internal_mutable_gregister() {
  if (!_internal_has_gregister()) {
    clear_content();
    set_has_gregister();
    content_.gregister_ = CreateMaybeMessage< ::im::protocol::ackGRegister >(GetArena());
  }
  return content_.gregister_;
}
inline ::im::protocol::ackGRegister* Ack::mutable_gregister() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Ack.gregister)
  return _internal_mutable_gregister();
}

// .im.protocol.ackLogin login = 5;
inline bool Ack::_internal_has_login() const {
  return content_case() == kLogin;
}
inline bool Ack::has_login() const {
  return _internal_has_login();
}
inline void Ack::set_has_login() {
  _oneof_case_[0] = kLogin;
}
inline void Ack::clear_login() {
  if (_internal_has_login()) {
    if (GetArena() == nullptr) {
      delete content_.login_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::ackLogin* Ack::release_login() {
  // @@protoc_insertion_point(field_release:im.protocol.Ack.login)
  if (_internal_has_login()) {
    clear_has_content();
      ::im::protocol::ackLogin* temp = content_.login_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.login_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::ackLogin& Ack::_internal_login() const {
  return _internal_has_login()
      ? *content_.login_
      : *reinterpret_cast< ::im::protocol::ackLogin*>(&::im::protocol::_ackLogin_default_instance_);
}
inline const ::im::protocol::ackLogin& Ack::login() const {
  // @@protoc_insertion_point(field_get:im.protocol.Ack.login)
  return _internal_login();
}
inline ::im::protocol::ackLogin* Ack::unsafe_arena_release_login() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Ack.login)
  if (_internal_has_login()) {
    clear_has_content();
    ::im::protocol::ackLogin* temp = content_.login_;
    content_.login_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ack::unsafe_arena_set_allocated_login(::im::protocol::ackLogin* login) {
  clear_content();
  if (login) {
    set_has_login();
    content_.login_ = login;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Ack.login)
}
inline ::im::protocol::ackLogin* Ack::_internal_mutable_login() {
  if (!_internal_has_login()) {
    clear_content();
    set_has_login();
    content_.login_ = CreateMaybeMessage< ::im::protocol::ackLogin >(GetArena());
  }
  return content_.login_;
}
inline ::im::protocol::ackLogin* Ack::mutable_login() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Ack.login)
  return _internal_mutable_login();
}

// .im.protocol.ackUChat uchat = 6;
inline bool Ack::_internal_has_uchat() const {
  return content_case() == kUchat;
}
inline bool Ack::has_uchat() const {
  return _internal_has_uchat();
}
inline void Ack::set_has_uchat() {
  _oneof_case_[0] = kUchat;
}
inline void Ack::clear_uchat() {
  if (_internal_has_uchat()) {
    if (GetArena() == nullptr) {
      delete content_.uchat_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::ackUChat* Ack::release_uchat() {
  // @@protoc_insertion_point(field_release:im.protocol.Ack.uchat)
  if (_internal_has_uchat()) {
    clear_has_content();
      ::im::protocol::ackUChat* temp = content_.uchat_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.uchat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::ackUChat& Ack::_internal_uchat() const {
  return _internal_has_uchat()
      ? *content_.uchat_
      : *reinterpret_cast< ::im::protocol::ackUChat*>(&::im::protocol::_ackUChat_default_instance_);
}
inline const ::im::protocol::ackUChat& Ack::uchat() const {
  // @@protoc_insertion_point(field_get:im.protocol.Ack.uchat)
  return _internal_uchat();
}
inline ::im::protocol::ackUChat* Ack::unsafe_arena_release_uchat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Ack.uchat)
  if (_internal_has_uchat()) {
    clear_has_content();
    ::im::protocol::ackUChat* temp = content_.uchat_;
    content_.uchat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ack::unsafe_arena_set_allocated_uchat(::im::protocol::ackUChat* uchat) {
  clear_content();
  if (uchat) {
    set_has_uchat();
    content_.uchat_ = uchat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Ack.uchat)
}
inline ::im::protocol::ackUChat* Ack::_internal_mutable_uchat() {
  if (!_internal_has_uchat()) {
    clear_content();
    set_has_uchat();
    content_.uchat_ = CreateMaybeMessage< ::im::protocol::ackUChat >(GetArena());
  }
  return content_.uchat_;
}
inline ::im::protocol::ackUChat* Ack::mutable_uchat() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Ack.uchat)
  return _internal_mutable_uchat();
}

// .im.protocol.ackGChat gchat = 7;
inline bool Ack::_internal_has_gchat() const {
  return content_case() == kGchat;
}
inline bool Ack::has_gchat() const {
  return _internal_has_gchat();
}
inline void Ack::set_has_gchat() {
  _oneof_case_[0] = kGchat;
}
inline void Ack::clear_gchat() {
  if (_internal_has_gchat()) {
    if (GetArena() == nullptr) {
      delete content_.gchat_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::ackGChat* Ack::release_gchat() {
  // @@protoc_insertion_point(field_release:im.protocol.Ack.gchat)
  if (_internal_has_gchat()) {
    clear_has_content();
      ::im::protocol::ackGChat* temp = content_.gchat_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.gchat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::ackGChat& Ack::_internal_gchat() const {
  return _internal_has_gchat()
      ? *content_.gchat_
      : *reinterpret_cast< ::im::protocol::ackGChat*>(&::im::protocol::_ackGChat_default_instance_);
}
inline const ::im::protocol::ackGChat& Ack::gchat() const {
  // @@protoc_insertion_point(field_get:im.protocol.Ack.gchat)
  return _internal_gchat();
}
inline ::im::protocol::ackGChat* Ack::unsafe_arena_release_gchat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Ack.gchat)
  if (_internal_has_gchat()) {
    clear_has_content();
    ::im::protocol::ackGChat* temp = content_.gchat_;
    content_.gchat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ack::unsafe_arena_set_allocated_gchat(::im::protocol::ackGChat* gchat) {
  clear_content();
  if (gchat) {
    set_has_gchat();
    content_.gchat_ = gchat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Ack.gchat)
}
inline ::im::protocol::ackGChat* Ack::_internal_mutable_gchat() {
  if (!_internal_has_gchat()) {
    clear_content();
    set_has_gchat();
    content_.gchat_ = CreateMaybeMessage< ::im::protocol::ackGChat >(GetArena());
  }
  return content_.gchat_;
}
inline ::im::protocol::ackGChat* Ack::mutable_gchat() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Ack.gchat)
  return _internal_mutable_gchat();
}

// .im.protocol.ackUserInfo uinfo = 8;
inline bool Ack::_internal_has_uinfo() const {
  return content_case() == kUinfo;
}
inline bool Ack::has_uinfo() const {
  return _internal_has_uinfo();
}
inline void Ack::set_has_uinfo() {
  _oneof_case_[0] = kUinfo;
}
inline void Ack::clear_uinfo() {
  if (_internal_has_uinfo()) {
    if (GetArena() == nullptr) {
      delete content_.uinfo_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::ackUserInfo* Ack::release_uinfo() {
  // @@protoc_insertion_point(field_release:im.protocol.Ack.uinfo)
  if (_internal_has_uinfo()) {
    clear_has_content();
      ::im::protocol::ackUserInfo* temp = content_.uinfo_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.uinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::ackUserInfo& Ack::_internal_uinfo() const {
  return _internal_has_uinfo()
      ? *content_.uinfo_
      : *reinterpret_cast< ::im::protocol::ackUserInfo*>(&::im::protocol::_ackUserInfo_default_instance_);
}
inline const ::im::protocol::ackUserInfo& Ack::uinfo() const {
  // @@protoc_insertion_point(field_get:im.protocol.Ack.uinfo)
  return _internal_uinfo();
}
inline ::im::protocol::ackUserInfo* Ack::unsafe_arena_release_uinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Ack.uinfo)
  if (_internal_has_uinfo()) {
    clear_has_content();
    ::im::protocol::ackUserInfo* temp = content_.uinfo_;
    content_.uinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ack::unsafe_arena_set_allocated_uinfo(::im::protocol::ackUserInfo* uinfo) {
  clear_content();
  if (uinfo) {
    set_has_uinfo();
    content_.uinfo_ = uinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Ack.uinfo)
}
inline ::im::protocol::ackUserInfo* Ack::_internal_mutable_uinfo() {
  if (!_internal_has_uinfo()) {
    clear_content();
    set_has_uinfo();
    content_.uinfo_ = CreateMaybeMessage< ::im::protocol::ackUserInfo >(GetArena());
  }
  return content_.uinfo_;
}
inline ::im::protocol::ackUserInfo* Ack::mutable_uinfo() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Ack.uinfo)
  return _internal_mutable_uinfo();
}

// .im.protocol.ackGroupInfo ginfo = 9;
inline bool Ack::_internal_has_ginfo() const {
  return content_case() == kGinfo;
}
inline bool Ack::has_ginfo() const {
  return _internal_has_ginfo();
}
inline void Ack::set_has_ginfo() {
  _oneof_case_[0] = kGinfo;
}
inline void Ack::clear_ginfo() {
  if (_internal_has_ginfo()) {
    if (GetArena() == nullptr) {
      delete content_.ginfo_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::ackGroupInfo* Ack::release_ginfo() {
  // @@protoc_insertion_point(field_release:im.protocol.Ack.ginfo)
  if (_internal_has_ginfo()) {
    clear_has_content();
      ::im::protocol::ackGroupInfo* temp = content_.ginfo_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.ginfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::ackGroupInfo& Ack::_internal_ginfo() const {
  return _internal_has_ginfo()
      ? *content_.ginfo_
      : *reinterpret_cast< ::im::protocol::ackGroupInfo*>(&::im::protocol::_ackGroupInfo_default_instance_);
}
inline const ::im::protocol::ackGroupInfo& Ack::ginfo() const {
  // @@protoc_insertion_point(field_get:im.protocol.Ack.ginfo)
  return _internal_ginfo();
}
inline ::im::protocol::ackGroupInfo* Ack::unsafe_arena_release_ginfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Ack.ginfo)
  if (_internal_has_ginfo()) {
    clear_has_content();
    ::im::protocol::ackGroupInfo* temp = content_.ginfo_;
    content_.ginfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ack::unsafe_arena_set_allocated_ginfo(::im::protocol::ackGroupInfo* ginfo) {
  clear_content();
  if (ginfo) {
    set_has_ginfo();
    content_.ginfo_ = ginfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Ack.ginfo)
}
inline ::im::protocol::ackGroupInfo* Ack::_internal_mutable_ginfo() {
  if (!_internal_has_ginfo()) {
    clear_content();
    set_has_ginfo();
    content_.ginfo_ = CreateMaybeMessage< ::im::protocol::ackGroupInfo >(GetArena());
  }
  return content_.ginfo_;
}
inline ::im::protocol::ackGroupInfo* Ack::mutable_ginfo() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Ack.ginfo)
  return _internal_mutable_ginfo();
}

// .im.protocol.ackAFriendTo1 aft1 = 10;
inline bool Ack::_internal_has_aft1() const {
  return content_case() == kAft1;
}
inline bool Ack::has_aft1() const {
  return _internal_has_aft1();
}
inline void Ack::set_has_aft1() {
  _oneof_case_[0] = kAft1;
}
inline void Ack::clear_aft1() {
  if (_internal_has_aft1()) {
    if (GetArena() == nullptr) {
      delete content_.aft1_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::ackAFriendTo1* Ack::release_aft1() {
  // @@protoc_insertion_point(field_release:im.protocol.Ack.aft1)
  if (_internal_has_aft1()) {
    clear_has_content();
      ::im::protocol::ackAFriendTo1* temp = content_.aft1_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.aft1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::ackAFriendTo1& Ack::_internal_aft1() const {
  return _internal_has_aft1()
      ? *content_.aft1_
      : *reinterpret_cast< ::im::protocol::ackAFriendTo1*>(&::im::protocol::_ackAFriendTo1_default_instance_);
}
inline const ::im::protocol::ackAFriendTo1& Ack::aft1() const {
  // @@protoc_insertion_point(field_get:im.protocol.Ack.aft1)
  return _internal_aft1();
}
inline ::im::protocol::ackAFriendTo1* Ack::unsafe_arena_release_aft1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Ack.aft1)
  if (_internal_has_aft1()) {
    clear_has_content();
    ::im::protocol::ackAFriendTo1* temp = content_.aft1_;
    content_.aft1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ack::unsafe_arena_set_allocated_aft1(::im::protocol::ackAFriendTo1* aft1) {
  clear_content();
  if (aft1) {
    set_has_aft1();
    content_.aft1_ = aft1;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Ack.aft1)
}
inline ::im::protocol::ackAFriendTo1* Ack::_internal_mutable_aft1() {
  if (!_internal_has_aft1()) {
    clear_content();
    set_has_aft1();
    content_.aft1_ = CreateMaybeMessage< ::im::protocol::ackAFriendTo1 >(GetArena());
  }
  return content_.aft1_;
}
inline ::im::protocol::ackAFriendTo1* Ack::mutable_aft1() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Ack.aft1)
  return _internal_mutable_aft1();
}

// .im.protocol.ackAFriendTo2 aft2 = 11;
inline bool Ack::_internal_has_aft2() const {
  return content_case() == kAft2;
}
inline bool Ack::has_aft2() const {
  return _internal_has_aft2();
}
inline void Ack::set_has_aft2() {
  _oneof_case_[0] = kAft2;
}
inline void Ack::clear_aft2() {
  if (_internal_has_aft2()) {
    if (GetArena() == nullptr) {
      delete content_.aft2_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::ackAFriendTo2* Ack::release_aft2() {
  // @@protoc_insertion_point(field_release:im.protocol.Ack.aft2)
  if (_internal_has_aft2()) {
    clear_has_content();
      ::im::protocol::ackAFriendTo2* temp = content_.aft2_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.aft2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::ackAFriendTo2& Ack::_internal_aft2() const {
  return _internal_has_aft2()
      ? *content_.aft2_
      : *reinterpret_cast< ::im::protocol::ackAFriendTo2*>(&::im::protocol::_ackAFriendTo2_default_instance_);
}
inline const ::im::protocol::ackAFriendTo2& Ack::aft2() const {
  // @@protoc_insertion_point(field_get:im.protocol.Ack.aft2)
  return _internal_aft2();
}
inline ::im::protocol::ackAFriendTo2* Ack::unsafe_arena_release_aft2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Ack.aft2)
  if (_internal_has_aft2()) {
    clear_has_content();
    ::im::protocol::ackAFriendTo2* temp = content_.aft2_;
    content_.aft2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ack::unsafe_arena_set_allocated_aft2(::im::protocol::ackAFriendTo2* aft2) {
  clear_content();
  if (aft2) {
    set_has_aft2();
    content_.aft2_ = aft2;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Ack.aft2)
}
inline ::im::protocol::ackAFriendTo2* Ack::_internal_mutable_aft2() {
  if (!_internal_has_aft2()) {
    clear_content();
    set_has_aft2();
    content_.aft2_ = CreateMaybeMessage< ::im::protocol::ackAFriendTo2 >(GetArena());
  }
  return content_.aft2_;
}
inline ::im::protocol::ackAFriendTo2* Ack::mutable_aft2() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Ack.aft2)
  return _internal_mutable_aft2();
}

// .im.protocol.ackAGroupTo1 agt1 = 12;
inline bool Ack::_internal_has_agt1() const {
  return content_case() == kAgt1;
}
inline bool Ack::has_agt1() const {
  return _internal_has_agt1();
}
inline void Ack::set_has_agt1() {
  _oneof_case_[0] = kAgt1;
}
inline void Ack::clear_agt1() {
  if (_internal_has_agt1()) {
    if (GetArena() == nullptr) {
      delete content_.agt1_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::ackAGroupTo1* Ack::release_agt1() {
  // @@protoc_insertion_point(field_release:im.protocol.Ack.agt1)
  if (_internal_has_agt1()) {
    clear_has_content();
      ::im::protocol::ackAGroupTo1* temp = content_.agt1_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.agt1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::ackAGroupTo1& Ack::_internal_agt1() const {
  return _internal_has_agt1()
      ? *content_.agt1_
      : *reinterpret_cast< ::im::protocol::ackAGroupTo1*>(&::im::protocol::_ackAGroupTo1_default_instance_);
}
inline const ::im::protocol::ackAGroupTo1& Ack::agt1() const {
  // @@protoc_insertion_point(field_get:im.protocol.Ack.agt1)
  return _internal_agt1();
}
inline ::im::protocol::ackAGroupTo1* Ack::unsafe_arena_release_agt1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Ack.agt1)
  if (_internal_has_agt1()) {
    clear_has_content();
    ::im::protocol::ackAGroupTo1* temp = content_.agt1_;
    content_.agt1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ack::unsafe_arena_set_allocated_agt1(::im::protocol::ackAGroupTo1* agt1) {
  clear_content();
  if (agt1) {
    set_has_agt1();
    content_.agt1_ = agt1;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Ack.agt1)
}
inline ::im::protocol::ackAGroupTo1* Ack::_internal_mutable_agt1() {
  if (!_internal_has_agt1()) {
    clear_content();
    set_has_agt1();
    content_.agt1_ = CreateMaybeMessage< ::im::protocol::ackAGroupTo1 >(GetArena());
  }
  return content_.agt1_;
}
inline ::im::protocol::ackAGroupTo1* Ack::mutable_agt1() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Ack.agt1)
  return _internal_mutable_agt1();
}

// .im.protocol.ackAGroupTo2 agt2 = 13;
inline bool Ack::_internal_has_agt2() const {
  return content_case() == kAgt2;
}
inline bool Ack::has_agt2() const {
  return _internal_has_agt2();
}
inline void Ack::set_has_agt2() {
  _oneof_case_[0] = kAgt2;
}
inline void Ack::clear_agt2() {
  if (_internal_has_agt2()) {
    if (GetArena() == nullptr) {
      delete content_.agt2_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::ackAGroupTo2* Ack::release_agt2() {
  // @@protoc_insertion_point(field_release:im.protocol.Ack.agt2)
  if (_internal_has_agt2()) {
    clear_has_content();
      ::im::protocol::ackAGroupTo2* temp = content_.agt2_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.agt2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::ackAGroupTo2& Ack::_internal_agt2() const {
  return _internal_has_agt2()
      ? *content_.agt2_
      : *reinterpret_cast< ::im::protocol::ackAGroupTo2*>(&::im::protocol::_ackAGroupTo2_default_instance_);
}
inline const ::im::protocol::ackAGroupTo2& Ack::agt2() const {
  // @@protoc_insertion_point(field_get:im.protocol.Ack.agt2)
  return _internal_agt2();
}
inline ::im::protocol::ackAGroupTo2* Ack::unsafe_arena_release_agt2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Ack.agt2)
  if (_internal_has_agt2()) {
    clear_has_content();
    ::im::protocol::ackAGroupTo2* temp = content_.agt2_;
    content_.agt2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ack::unsafe_arena_set_allocated_agt2(::im::protocol::ackAGroupTo2* agt2) {
  clear_content();
  if (agt2) {
    set_has_agt2();
    content_.agt2_ = agt2;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Ack.agt2)
}
inline ::im::protocol::ackAGroupTo2* Ack::_internal_mutable_agt2() {
  if (!_internal_has_agt2()) {
    clear_content();
    set_has_agt2();
    content_.agt2_ = CreateMaybeMessage< ::im::protocol::ackAGroupTo2 >(GetArena());
  }
  return content_.agt2_;
}
inline ::im::protocol::ackAGroupTo2* Ack::mutable_agt2() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Ack.agt2)
  return _internal_mutable_agt2();
}

// .im.protocol.ackSUser suser = 14;
inline bool Ack::_internal_has_suser() const {
  return content_case() == kSuser;
}
inline bool Ack::has_suser() const {
  return _internal_has_suser();
}
inline void Ack::set_has_suser() {
  _oneof_case_[0] = kSuser;
}
inline void Ack::clear_suser() {
  if (_internal_has_suser()) {
    if (GetArena() == nullptr) {
      delete content_.suser_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::ackSUser* Ack::release_suser() {
  // @@protoc_insertion_point(field_release:im.protocol.Ack.suser)
  if (_internal_has_suser()) {
    clear_has_content();
      ::im::protocol::ackSUser* temp = content_.suser_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.suser_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::ackSUser& Ack::_internal_suser() const {
  return _internal_has_suser()
      ? *content_.suser_
      : *reinterpret_cast< ::im::protocol::ackSUser*>(&::im::protocol::_ackSUser_default_instance_);
}
inline const ::im::protocol::ackSUser& Ack::suser() const {
  // @@protoc_insertion_point(field_get:im.protocol.Ack.suser)
  return _internal_suser();
}
inline ::im::protocol::ackSUser* Ack::unsafe_arena_release_suser() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Ack.suser)
  if (_internal_has_suser()) {
    clear_has_content();
    ::im::protocol::ackSUser* temp = content_.suser_;
    content_.suser_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ack::unsafe_arena_set_allocated_suser(::im::protocol::ackSUser* suser) {
  clear_content();
  if (suser) {
    set_has_suser();
    content_.suser_ = suser;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Ack.suser)
}
inline ::im::protocol::ackSUser* Ack::_internal_mutable_suser() {
  if (!_internal_has_suser()) {
    clear_content();
    set_has_suser();
    content_.suser_ = CreateMaybeMessage< ::im::protocol::ackSUser >(GetArena());
  }
  return content_.suser_;
}
inline ::im::protocol::ackSUser* Ack::mutable_suser() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Ack.suser)
  return _internal_mutable_suser();
}

// .im.protocol.ackSGroup sgroup = 15;
inline bool Ack::_internal_has_sgroup() const {
  return content_case() == kSgroup;
}
inline bool Ack::has_sgroup() const {
  return _internal_has_sgroup();
}
inline void Ack::set_has_sgroup() {
  _oneof_case_[0] = kSgroup;
}
inline void Ack::clear_sgroup() {
  if (_internal_has_sgroup()) {
    if (GetArena() == nullptr) {
      delete content_.sgroup_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::ackSGroup* Ack::release_sgroup() {
  // @@protoc_insertion_point(field_release:im.protocol.Ack.sgroup)
  if (_internal_has_sgroup()) {
    clear_has_content();
      ::im::protocol::ackSGroup* temp = content_.sgroup_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.sgroup_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::ackSGroup& Ack::_internal_sgroup() const {
  return _internal_has_sgroup()
      ? *content_.sgroup_
      : *reinterpret_cast< ::im::protocol::ackSGroup*>(&::im::protocol::_ackSGroup_default_instance_);
}
inline const ::im::protocol::ackSGroup& Ack::sgroup() const {
  // @@protoc_insertion_point(field_get:im.protocol.Ack.sgroup)
  return _internal_sgroup();
}
inline ::im::protocol::ackSGroup* Ack::unsafe_arena_release_sgroup() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Ack.sgroup)
  if (_internal_has_sgroup()) {
    clear_has_content();
    ::im::protocol::ackSGroup* temp = content_.sgroup_;
    content_.sgroup_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ack::unsafe_arena_set_allocated_sgroup(::im::protocol::ackSGroup* sgroup) {
  clear_content();
  if (sgroup) {
    set_has_sgroup();
    content_.sgroup_ = sgroup;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Ack.sgroup)
}
inline ::im::protocol::ackSGroup* Ack::_internal_mutable_sgroup() {
  if (!_internal_has_sgroup()) {
    clear_content();
    set_has_sgroup();
    content_.sgroup_ = CreateMaybeMessage< ::im::protocol::ackSGroup >(GetArena());
  }
  return content_.sgroup_;
}
inline ::im::protocol::ackSGroup* Ack::mutable_sgroup() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Ack.sgroup)
  return _internal_mutable_sgroup();
}

// .im.protocol.ackSGMember sgmember = 16;
inline bool Ack::_internal_has_sgmember() const {
  return content_case() == kSgmember;
}
inline bool Ack::has_sgmember() const {
  return _internal_has_sgmember();
}
inline void Ack::set_has_sgmember() {
  _oneof_case_[0] = kSgmember;
}
inline void Ack::clear_sgmember() {
  if (_internal_has_sgmember()) {
    if (GetArena() == nullptr) {
      delete content_.sgmember_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::ackSGMember* Ack::release_sgmember() {
  // @@protoc_insertion_point(field_release:im.protocol.Ack.sgmember)
  if (_internal_has_sgmember()) {
    clear_has_content();
      ::im::protocol::ackSGMember* temp = content_.sgmember_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.sgmember_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::ackSGMember& Ack::_internal_sgmember() const {
  return _internal_has_sgmember()
      ? *content_.sgmember_
      : *reinterpret_cast< ::im::protocol::ackSGMember*>(&::im::protocol::_ackSGMember_default_instance_);
}
inline const ::im::protocol::ackSGMember& Ack::sgmember() const {
  // @@protoc_insertion_point(field_get:im.protocol.Ack.sgmember)
  return _internal_sgmember();
}
inline ::im::protocol::ackSGMember* Ack::unsafe_arena_release_sgmember() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Ack.sgmember)
  if (_internal_has_sgmember()) {
    clear_has_content();
    ::im::protocol::ackSGMember* temp = content_.sgmember_;
    content_.sgmember_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ack::unsafe_arena_set_allocated_sgmember(::im::protocol::ackSGMember* sgmember) {
  clear_content();
  if (sgmember) {
    set_has_sgmember();
    content_.sgmember_ = sgmember;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Ack.sgmember)
}
inline ::im::protocol::ackSGMember* Ack::_internal_mutable_sgmember() {
  if (!_internal_has_sgmember()) {
    clear_content();
    set_has_sgmember();
    content_.sgmember_ = CreateMaybeMessage< ::im::protocol::ackSGMember >(GetArena());
  }
  return content_.sgmember_;
}
inline ::im::protocol::ackSGMember* Ack::mutable_sgmember() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Ack.sgmember)
  return _internal_mutable_sgmember();
}

inline bool Ack::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void Ack::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline Ack::ContentCase Ack::content_case() const {
  return Ack::ContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ackURegister

// int32 id = 1;
inline void ackURegister::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackURegister::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackURegister::id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackURegister.id)
  return _internal_id();
}
inline void ackURegister::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ackURegister::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackURegister.id)
}

// -------------------------------------------------------------------

// ackGRegister

// int32 id = 1;
inline void ackGRegister::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackGRegister::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackGRegister::id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackGRegister.id)
  return _internal_id();
}
inline void ackGRegister::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ackGRegister::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackGRegister.id)
}

// -------------------------------------------------------------------

// ackLogin

// int32 id = 1;
inline void ackLogin::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackLogin::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackLogin::id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackLogin.id)
  return _internal_id();
}
inline void ackLogin::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ackLogin::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackLogin.id)
}

// bool status = 2;
inline void ackLogin::clear_status() {
  status_ = false;
}
inline bool ackLogin::_internal_status() const {
  return status_;
}
inline bool ackLogin::status() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackLogin.status)
  return _internal_status();
}
inline void ackLogin::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void ackLogin::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackLogin.status)
}

// -------------------------------------------------------------------

// ackUChat

// int32 sender_id = 1;
inline void ackUChat::clear_sender_id() {
  sender_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackUChat::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackUChat::sender_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackUChat.sender_id)
  return _internal_sender_id();
}
inline void ackUChat::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sender_id_ = value;
}
inline void ackUChat::set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackUChat.sender_id)
}

// int32 receiver_id = 2;
inline void ackUChat::clear_receiver_id() {
  receiver_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackUChat::_internal_receiver_id() const {
  return receiver_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackUChat::receiver_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackUChat.receiver_id)
  return _internal_receiver_id();
}
inline void ackUChat::_internal_set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  receiver_id_ = value;
}
inline void ackUChat::set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_receiver_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackUChat.receiver_id)
}

// string message = 3;
inline void ackUChat::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ackUChat::message() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackUChat.message)
  return _internal_message();
}
inline void ackUChat::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackUChat.message)
}
inline std::string* ackUChat::mutable_message() {
  // @@protoc_insertion_point(field_mutable:im.protocol.ackUChat.message)
  return _internal_mutable_message();
}
inline const std::string& ackUChat::_internal_message() const {
  return message_.Get();
}
inline void ackUChat::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ackUChat::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.ackUChat.message)
}
inline void ackUChat::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.ackUChat.message)
}
inline void ackUChat::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.ackUChat.message)
}
inline std::string* ackUChat::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ackUChat::release_message() {
  // @@protoc_insertion_point(field_release:im.protocol.ackUChat.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ackUChat::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.ackUChat.message)
}
inline std::string* ackUChat::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.ackUChat.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ackUChat::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.ackUChat.message)
}

// int32 time = 4;
inline void ackUChat::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackUChat::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackUChat::time() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackUChat.time)
  return _internal_time();
}
inline void ackUChat::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void ackUChat::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackUChat.time)
}

// -------------------------------------------------------------------

// ackGChat

// int32 sender_id = 1;
inline void ackGChat::clear_sender_id() {
  sender_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackGChat::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackGChat::sender_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackGChat.sender_id)
  return _internal_sender_id();
}
inline void ackGChat::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sender_id_ = value;
}
inline void ackGChat::set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackGChat.sender_id)
}

// int32 group_id = 2;
inline void ackGChat::clear_group_id() {
  group_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackGChat::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackGChat::group_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackGChat.group_id)
  return _internal_group_id();
}
inline void ackGChat::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  group_id_ = value;
}
inline void ackGChat::set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackGChat.group_id)
}

// string message = 3;
inline void ackGChat::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ackGChat::message() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackGChat.message)
  return _internal_message();
}
inline void ackGChat::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackGChat.message)
}
inline std::string* ackGChat::mutable_message() {
  // @@protoc_insertion_point(field_mutable:im.protocol.ackGChat.message)
  return _internal_mutable_message();
}
inline const std::string& ackGChat::_internal_message() const {
  return message_.Get();
}
inline void ackGChat::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ackGChat::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.ackGChat.message)
}
inline void ackGChat::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.ackGChat.message)
}
inline void ackGChat::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.ackGChat.message)
}
inline std::string* ackGChat::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ackGChat::release_message() {
  // @@protoc_insertion_point(field_release:im.protocol.ackGChat.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ackGChat::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.ackGChat.message)
}
inline std::string* ackGChat::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.ackGChat.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ackGChat::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.ackGChat.message)
}

// int32 time = 4;
inline void ackGChat::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackGChat::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackGChat::time() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackGChat.time)
  return _internal_time();
}
inline void ackGChat::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void ackGChat::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackGChat.time)
}

// -------------------------------------------------------------------

// ackUserInfo

// int32 id = 1;
inline void ackUserInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackUserInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackUserInfo::id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackUserInfo.id)
  return _internal_id();
}
inline void ackUserInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ackUserInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackUserInfo.id)
}

// string username = 2;
inline void ackUserInfo::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ackUserInfo::username() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackUserInfo.username)
  return _internal_username();
}
inline void ackUserInfo::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackUserInfo.username)
}
inline std::string* ackUserInfo::mutable_username() {
  // @@protoc_insertion_point(field_mutable:im.protocol.ackUserInfo.username)
  return _internal_mutable_username();
}
inline const std::string& ackUserInfo::_internal_username() const {
  return username_.Get();
}
inline void ackUserInfo::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ackUserInfo::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.ackUserInfo.username)
}
inline void ackUserInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.ackUserInfo.username)
}
inline void ackUserInfo::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.ackUserInfo.username)
}
inline std::string* ackUserInfo::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ackUserInfo::release_username() {
  // @@protoc_insertion_point(field_release:im.protocol.ackUserInfo.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ackUserInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.ackUserInfo.username)
}
inline std::string* ackUserInfo::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.ackUserInfo.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ackUserInfo::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.ackUserInfo.username)
}

// string introduction = 3;
inline void ackUserInfo::clear_introduction() {
  introduction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ackUserInfo::introduction() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackUserInfo.introduction)
  return _internal_introduction();
}
inline void ackUserInfo::set_introduction(const std::string& value) {
  _internal_set_introduction(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackUserInfo.introduction)
}
inline std::string* ackUserInfo::mutable_introduction() {
  // @@protoc_insertion_point(field_mutable:im.protocol.ackUserInfo.introduction)
  return _internal_mutable_introduction();
}
inline const std::string& ackUserInfo::_internal_introduction() const {
  return introduction_.Get();
}
inline void ackUserInfo::_internal_set_introduction(const std::string& value) {
  
  introduction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ackUserInfo::set_introduction(std::string&& value) {
  
  introduction_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.ackUserInfo.introduction)
}
inline void ackUserInfo::set_introduction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  introduction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.ackUserInfo.introduction)
}
inline void ackUserInfo::set_introduction(const char* value,
    size_t size) {
  
  introduction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.ackUserInfo.introduction)
}
inline std::string* ackUserInfo::_internal_mutable_introduction() {
  
  return introduction_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ackUserInfo::release_introduction() {
  // @@protoc_insertion_point(field_release:im.protocol.ackUserInfo.introduction)
  return introduction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ackUserInfo::set_allocated_introduction(std::string* introduction) {
  if (introduction != nullptr) {
    
  } else {
    
  }
  introduction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), introduction,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.ackUserInfo.introduction)
}
inline std::string* ackUserInfo::unsafe_arena_release_introduction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.ackUserInfo.introduction)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return introduction_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ackUserInfo::unsafe_arena_set_allocated_introduction(
    std::string* introduction) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (introduction != nullptr) {
    
  } else {
    
  }
  introduction_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      introduction, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.ackUserInfo.introduction)
}

// -------------------------------------------------------------------

// ackGroupInfo

// int32 id = 1;
inline void ackGroupInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackGroupInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackGroupInfo::id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackGroupInfo.id)
  return _internal_id();
}
inline void ackGroupInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ackGroupInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackGroupInfo.id)
}

// int32 lord_id = 2;
inline void ackGroupInfo::clear_lord_id() {
  lord_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackGroupInfo::_internal_lord_id() const {
  return lord_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackGroupInfo::lord_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackGroupInfo.lord_id)
  return _internal_lord_id();
}
inline void ackGroupInfo::_internal_set_lord_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lord_id_ = value;
}
inline void ackGroupInfo::set_lord_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lord_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackGroupInfo.lord_id)
}

// string groupname = 3;
inline void ackGroupInfo::clear_groupname() {
  groupname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ackGroupInfo::groupname() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackGroupInfo.groupname)
  return _internal_groupname();
}
inline void ackGroupInfo::set_groupname(const std::string& value) {
  _internal_set_groupname(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackGroupInfo.groupname)
}
inline std::string* ackGroupInfo::mutable_groupname() {
  // @@protoc_insertion_point(field_mutable:im.protocol.ackGroupInfo.groupname)
  return _internal_mutable_groupname();
}
inline const std::string& ackGroupInfo::_internal_groupname() const {
  return groupname_.Get();
}
inline void ackGroupInfo::_internal_set_groupname(const std::string& value) {
  
  groupname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ackGroupInfo::set_groupname(std::string&& value) {
  
  groupname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.ackGroupInfo.groupname)
}
inline void ackGroupInfo::set_groupname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.ackGroupInfo.groupname)
}
inline void ackGroupInfo::set_groupname(const char* value,
    size_t size) {
  
  groupname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.ackGroupInfo.groupname)
}
inline std::string* ackGroupInfo::_internal_mutable_groupname() {
  
  return groupname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ackGroupInfo::release_groupname() {
  // @@protoc_insertion_point(field_release:im.protocol.ackGroupInfo.groupname)
  return groupname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ackGroupInfo::set_allocated_groupname(std::string* groupname) {
  if (groupname != nullptr) {
    
  } else {
    
  }
  groupname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.ackGroupInfo.groupname)
}
inline std::string* ackGroupInfo::unsafe_arena_release_groupname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.ackGroupInfo.groupname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return groupname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ackGroupInfo::unsafe_arena_set_allocated_groupname(
    std::string* groupname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (groupname != nullptr) {
    
  } else {
    
  }
  groupname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      groupname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.ackGroupInfo.groupname)
}

// string introduction = 4;
inline void ackGroupInfo::clear_introduction() {
  introduction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ackGroupInfo::introduction() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackGroupInfo.introduction)
  return _internal_introduction();
}
inline void ackGroupInfo::set_introduction(const std::string& value) {
  _internal_set_introduction(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackGroupInfo.introduction)
}
inline std::string* ackGroupInfo::mutable_introduction() {
  // @@protoc_insertion_point(field_mutable:im.protocol.ackGroupInfo.introduction)
  return _internal_mutable_introduction();
}
inline const std::string& ackGroupInfo::_internal_introduction() const {
  return introduction_.Get();
}
inline void ackGroupInfo::_internal_set_introduction(const std::string& value) {
  
  introduction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ackGroupInfo::set_introduction(std::string&& value) {
  
  introduction_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.ackGroupInfo.introduction)
}
inline void ackGroupInfo::set_introduction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  introduction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.ackGroupInfo.introduction)
}
inline void ackGroupInfo::set_introduction(const char* value,
    size_t size) {
  
  introduction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.ackGroupInfo.introduction)
}
inline std::string* ackGroupInfo::_internal_mutable_introduction() {
  
  return introduction_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ackGroupInfo::release_introduction() {
  // @@protoc_insertion_point(field_release:im.protocol.ackGroupInfo.introduction)
  return introduction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ackGroupInfo::set_allocated_introduction(std::string* introduction) {
  if (introduction != nullptr) {
    
  } else {
    
  }
  introduction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), introduction,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.ackGroupInfo.introduction)
}
inline std::string* ackGroupInfo::unsafe_arena_release_introduction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.ackGroupInfo.introduction)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return introduction_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ackGroupInfo::unsafe_arena_set_allocated_introduction(
    std::string* introduction) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (introduction != nullptr) {
    
  } else {
    
  }
  introduction_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      introduction, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.ackGroupInfo.introduction)
}

// -------------------------------------------------------------------

// ackAFriendTo1

// int32 sender_id = 1;
inline void ackAFriendTo1::clear_sender_id() {
  sender_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackAFriendTo1::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackAFriendTo1::sender_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAFriendTo1.sender_id)
  return _internal_sender_id();
}
inline void ackAFriendTo1::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sender_id_ = value;
}
inline void ackAFriendTo1::set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackAFriendTo1.sender_id)
}

// int32 receiver_id = 2;
inline void ackAFriendTo1::clear_receiver_id() {
  receiver_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackAFriendTo1::_internal_receiver_id() const {
  return receiver_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackAFriendTo1::receiver_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAFriendTo1.receiver_id)
  return _internal_receiver_id();
}
inline void ackAFriendTo1::_internal_set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  receiver_id_ = value;
}
inline void ackAFriendTo1::set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_receiver_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackAFriendTo1.receiver_id)
}

// string message = 3;
inline void ackAFriendTo1::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ackAFriendTo1::message() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAFriendTo1.message)
  return _internal_message();
}
inline void ackAFriendTo1::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackAFriendTo1.message)
}
inline std::string* ackAFriendTo1::mutable_message() {
  // @@protoc_insertion_point(field_mutable:im.protocol.ackAFriendTo1.message)
  return _internal_mutable_message();
}
inline const std::string& ackAFriendTo1::_internal_message() const {
  return message_.Get();
}
inline void ackAFriendTo1::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ackAFriendTo1::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.ackAFriendTo1.message)
}
inline void ackAFriendTo1::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.ackAFriendTo1.message)
}
inline void ackAFriendTo1::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.ackAFriendTo1.message)
}
inline std::string* ackAFriendTo1::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ackAFriendTo1::release_message() {
  // @@protoc_insertion_point(field_release:im.protocol.ackAFriendTo1.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ackAFriendTo1::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.ackAFriendTo1.message)
}
inline std::string* ackAFriendTo1::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.ackAFriendTo1.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ackAFriendTo1::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.ackAFriendTo1.message)
}

// bool status = 4;
inline void ackAFriendTo1::clear_status() {
  status_ = false;
}
inline bool ackAFriendTo1::_internal_status() const {
  return status_;
}
inline bool ackAFriendTo1::status() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAFriendTo1.status)
  return _internal_status();
}
inline void ackAFriendTo1::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void ackAFriendTo1::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackAFriendTo1.status)
}

// int32 time = 5;
inline void ackAFriendTo1::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackAFriendTo1::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackAFriendTo1::time() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAFriendTo1.time)
  return _internal_time();
}
inline void ackAFriendTo1::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void ackAFriendTo1::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackAFriendTo1.time)
}

// -------------------------------------------------------------------

// ackAFriendTo2

// int32 sender_id = 1;
inline void ackAFriendTo2::clear_sender_id() {
  sender_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackAFriendTo2::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackAFriendTo2::sender_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAFriendTo2.sender_id)
  return _internal_sender_id();
}
inline void ackAFriendTo2::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sender_id_ = value;
}
inline void ackAFriendTo2::set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackAFriendTo2.sender_id)
}

// int32 receiver_id = 2;
inline void ackAFriendTo2::clear_receiver_id() {
  receiver_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackAFriendTo2::_internal_receiver_id() const {
  return receiver_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackAFriendTo2::receiver_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAFriendTo2.receiver_id)
  return _internal_receiver_id();
}
inline void ackAFriendTo2::_internal_set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  receiver_id_ = value;
}
inline void ackAFriendTo2::set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_receiver_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackAFriendTo2.receiver_id)
}

// string message = 3;
inline void ackAFriendTo2::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ackAFriendTo2::message() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAFriendTo2.message)
  return _internal_message();
}
inline void ackAFriendTo2::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackAFriendTo2.message)
}
inline std::string* ackAFriendTo2::mutable_message() {
  // @@protoc_insertion_point(field_mutable:im.protocol.ackAFriendTo2.message)
  return _internal_mutable_message();
}
inline const std::string& ackAFriendTo2::_internal_message() const {
  return message_.Get();
}
inline void ackAFriendTo2::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ackAFriendTo2::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.ackAFriendTo2.message)
}
inline void ackAFriendTo2::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.ackAFriendTo2.message)
}
inline void ackAFriendTo2::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.ackAFriendTo2.message)
}
inline std::string* ackAFriendTo2::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ackAFriendTo2::release_message() {
  // @@protoc_insertion_point(field_release:im.protocol.ackAFriendTo2.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ackAFriendTo2::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.ackAFriendTo2.message)
}
inline std::string* ackAFriendTo2::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.ackAFriendTo2.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ackAFriendTo2::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.ackAFriendTo2.message)
}

// int32 time = 4;
inline void ackAFriendTo2::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackAFriendTo2::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackAFriendTo2::time() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAFriendTo2.time)
  return _internal_time();
}
inline void ackAFriendTo2::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void ackAFriendTo2::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackAFriendTo2.time)
}

// -------------------------------------------------------------------

// ackAGroupTo1

// int32 sender_id = 1;
inline void ackAGroupTo1::clear_sender_id() {
  sender_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackAGroupTo1::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackAGroupTo1::sender_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAGroupTo1.sender_id)
  return _internal_sender_id();
}
inline void ackAGroupTo1::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sender_id_ = value;
}
inline void ackAGroupTo1::set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackAGroupTo1.sender_id)
}

// int32 group_id = 2;
inline void ackAGroupTo1::clear_group_id() {
  group_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackAGroupTo1::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackAGroupTo1::group_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAGroupTo1.group_id)
  return _internal_group_id();
}
inline void ackAGroupTo1::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  group_id_ = value;
}
inline void ackAGroupTo1::set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackAGroupTo1.group_id)
}

// int32 lord_id = 3;
inline void ackAGroupTo1::clear_lord_id() {
  lord_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackAGroupTo1::_internal_lord_id() const {
  return lord_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackAGroupTo1::lord_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAGroupTo1.lord_id)
  return _internal_lord_id();
}
inline void ackAGroupTo1::_internal_set_lord_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lord_id_ = value;
}
inline void ackAGroupTo1::set_lord_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lord_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackAGroupTo1.lord_id)
}

// string message = 4;
inline void ackAGroupTo1::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ackAGroupTo1::message() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAGroupTo1.message)
  return _internal_message();
}
inline void ackAGroupTo1::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackAGroupTo1.message)
}
inline std::string* ackAGroupTo1::mutable_message() {
  // @@protoc_insertion_point(field_mutable:im.protocol.ackAGroupTo1.message)
  return _internal_mutable_message();
}
inline const std::string& ackAGroupTo1::_internal_message() const {
  return message_.Get();
}
inline void ackAGroupTo1::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ackAGroupTo1::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.ackAGroupTo1.message)
}
inline void ackAGroupTo1::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.ackAGroupTo1.message)
}
inline void ackAGroupTo1::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.ackAGroupTo1.message)
}
inline std::string* ackAGroupTo1::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ackAGroupTo1::release_message() {
  // @@protoc_insertion_point(field_release:im.protocol.ackAGroupTo1.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ackAGroupTo1::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.ackAGroupTo1.message)
}
inline std::string* ackAGroupTo1::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.ackAGroupTo1.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ackAGroupTo1::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.ackAGroupTo1.message)
}

// bool status = 5;
inline void ackAGroupTo1::clear_status() {
  status_ = false;
}
inline bool ackAGroupTo1::_internal_status() const {
  return status_;
}
inline bool ackAGroupTo1::status() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAGroupTo1.status)
  return _internal_status();
}
inline void ackAGroupTo1::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void ackAGroupTo1::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackAGroupTo1.status)
}

// int32 time = 6;
inline void ackAGroupTo1::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackAGroupTo1::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackAGroupTo1::time() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAGroupTo1.time)
  return _internal_time();
}
inline void ackAGroupTo1::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void ackAGroupTo1::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackAGroupTo1.time)
}

// -------------------------------------------------------------------

// ackAGroupTo2

// int32 sender_id = 1;
inline void ackAGroupTo2::clear_sender_id() {
  sender_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackAGroupTo2::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackAGroupTo2::sender_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAGroupTo2.sender_id)
  return _internal_sender_id();
}
inline void ackAGroupTo2::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sender_id_ = value;
}
inline void ackAGroupTo2::set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackAGroupTo2.sender_id)
}

// int32 group_id = 2;
inline void ackAGroupTo2::clear_group_id() {
  group_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackAGroupTo2::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackAGroupTo2::group_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAGroupTo2.group_id)
  return _internal_group_id();
}
inline void ackAGroupTo2::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  group_id_ = value;
}
inline void ackAGroupTo2::set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackAGroupTo2.group_id)
}

// int32 lord_id = 3;
inline void ackAGroupTo2::clear_lord_id() {
  lord_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackAGroupTo2::_internal_lord_id() const {
  return lord_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackAGroupTo2::lord_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAGroupTo2.lord_id)
  return _internal_lord_id();
}
inline void ackAGroupTo2::_internal_set_lord_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lord_id_ = value;
}
inline void ackAGroupTo2::set_lord_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lord_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackAGroupTo2.lord_id)
}

// string message = 4;
inline void ackAGroupTo2::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ackAGroupTo2::message() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAGroupTo2.message)
  return _internal_message();
}
inline void ackAGroupTo2::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackAGroupTo2.message)
}
inline std::string* ackAGroupTo2::mutable_message() {
  // @@protoc_insertion_point(field_mutable:im.protocol.ackAGroupTo2.message)
  return _internal_mutable_message();
}
inline const std::string& ackAGroupTo2::_internal_message() const {
  return message_.Get();
}
inline void ackAGroupTo2::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ackAGroupTo2::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.ackAGroupTo2.message)
}
inline void ackAGroupTo2::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.ackAGroupTo2.message)
}
inline void ackAGroupTo2::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.ackAGroupTo2.message)
}
inline std::string* ackAGroupTo2::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ackAGroupTo2::release_message() {
  // @@protoc_insertion_point(field_release:im.protocol.ackAGroupTo2.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ackAGroupTo2::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.ackAGroupTo2.message)
}
inline std::string* ackAGroupTo2::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.ackAGroupTo2.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ackAGroupTo2::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.ackAGroupTo2.message)
}

// int32 time = 5;
inline void ackAGroupTo2::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackAGroupTo2::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackAGroupTo2::time() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAGroupTo2.time)
  return _internal_time();
}
inline void ackAGroupTo2::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void ackAGroupTo2::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackAGroupTo2.time)
}

// -------------------------------------------------------------------

// ackSUser

// int32 id = 1;
inline void ackSUser::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackSUser::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackSUser::id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackSUser.id)
  return _internal_id();
}
inline void ackSUser::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ackSUser::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackSUser.id)
}

// string username = 2;
inline void ackSUser::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ackSUser::username() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackSUser.username)
  return _internal_username();
}
inline void ackSUser::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackSUser.username)
}
inline std::string* ackSUser::mutable_username() {
  // @@protoc_insertion_point(field_mutable:im.protocol.ackSUser.username)
  return _internal_mutable_username();
}
inline const std::string& ackSUser::_internal_username() const {
  return username_.Get();
}
inline void ackSUser::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ackSUser::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.ackSUser.username)
}
inline void ackSUser::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.ackSUser.username)
}
inline void ackSUser::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.ackSUser.username)
}
inline std::string* ackSUser::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ackSUser::release_username() {
  // @@protoc_insertion_point(field_release:im.protocol.ackSUser.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ackSUser::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.ackSUser.username)
}
inline std::string* ackSUser::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.ackSUser.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ackSUser::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.ackSUser.username)
}

// string introduction = 3;
inline void ackSUser::clear_introduction() {
  introduction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ackSUser::introduction() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackSUser.introduction)
  return _internal_introduction();
}
inline void ackSUser::set_introduction(const std::string& value) {
  _internal_set_introduction(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackSUser.introduction)
}
inline std::string* ackSUser::mutable_introduction() {
  // @@protoc_insertion_point(field_mutable:im.protocol.ackSUser.introduction)
  return _internal_mutable_introduction();
}
inline const std::string& ackSUser::_internal_introduction() const {
  return introduction_.Get();
}
inline void ackSUser::_internal_set_introduction(const std::string& value) {
  
  introduction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ackSUser::set_introduction(std::string&& value) {
  
  introduction_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.ackSUser.introduction)
}
inline void ackSUser::set_introduction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  introduction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.ackSUser.introduction)
}
inline void ackSUser::set_introduction(const char* value,
    size_t size) {
  
  introduction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.ackSUser.introduction)
}
inline std::string* ackSUser::_internal_mutable_introduction() {
  
  return introduction_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ackSUser::release_introduction() {
  // @@protoc_insertion_point(field_release:im.protocol.ackSUser.introduction)
  return introduction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ackSUser::set_allocated_introduction(std::string* introduction) {
  if (introduction != nullptr) {
    
  } else {
    
  }
  introduction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), introduction,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.ackSUser.introduction)
}
inline std::string* ackSUser::unsafe_arena_release_introduction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.ackSUser.introduction)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return introduction_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ackSUser::unsafe_arena_set_allocated_introduction(
    std::string* introduction) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (introduction != nullptr) {
    
  } else {
    
  }
  introduction_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      introduction, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.ackSUser.introduction)
}

// -------------------------------------------------------------------

// ackSGroup

// int32 id = 1;
inline void ackSGroup::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackSGroup::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackSGroup::id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackSGroup.id)
  return _internal_id();
}
inline void ackSGroup::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ackSGroup::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackSGroup.id)
}

// int32 lord_id = 2;
inline void ackSGroup::clear_lord_id() {
  lord_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackSGroup::_internal_lord_id() const {
  return lord_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackSGroup::lord_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackSGroup.lord_id)
  return _internal_lord_id();
}
inline void ackSGroup::_internal_set_lord_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lord_id_ = value;
}
inline void ackSGroup::set_lord_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lord_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackSGroup.lord_id)
}

// string groupname = 3;
inline void ackSGroup::clear_groupname() {
  groupname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ackSGroup::groupname() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackSGroup.groupname)
  return _internal_groupname();
}
inline void ackSGroup::set_groupname(const std::string& value) {
  _internal_set_groupname(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackSGroup.groupname)
}
inline std::string* ackSGroup::mutable_groupname() {
  // @@protoc_insertion_point(field_mutable:im.protocol.ackSGroup.groupname)
  return _internal_mutable_groupname();
}
inline const std::string& ackSGroup::_internal_groupname() const {
  return groupname_.Get();
}
inline void ackSGroup::_internal_set_groupname(const std::string& value) {
  
  groupname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ackSGroup::set_groupname(std::string&& value) {
  
  groupname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.ackSGroup.groupname)
}
inline void ackSGroup::set_groupname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.ackSGroup.groupname)
}
inline void ackSGroup::set_groupname(const char* value,
    size_t size) {
  
  groupname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.ackSGroup.groupname)
}
inline std::string* ackSGroup::_internal_mutable_groupname() {
  
  return groupname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ackSGroup::release_groupname() {
  // @@protoc_insertion_point(field_release:im.protocol.ackSGroup.groupname)
  return groupname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ackSGroup::set_allocated_groupname(std::string* groupname) {
  if (groupname != nullptr) {
    
  } else {
    
  }
  groupname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.ackSGroup.groupname)
}
inline std::string* ackSGroup::unsafe_arena_release_groupname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.ackSGroup.groupname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return groupname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ackSGroup::unsafe_arena_set_allocated_groupname(
    std::string* groupname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (groupname != nullptr) {
    
  } else {
    
  }
  groupname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      groupname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.ackSGroup.groupname)
}

// string introduction = 4;
inline void ackSGroup::clear_introduction() {
  introduction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ackSGroup::introduction() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackSGroup.introduction)
  return _internal_introduction();
}
inline void ackSGroup::set_introduction(const std::string& value) {
  _internal_set_introduction(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackSGroup.introduction)
}
inline std::string* ackSGroup::mutable_introduction() {
  // @@protoc_insertion_point(field_mutable:im.protocol.ackSGroup.introduction)
  return _internal_mutable_introduction();
}
inline const std::string& ackSGroup::_internal_introduction() const {
  return introduction_.Get();
}
inline void ackSGroup::_internal_set_introduction(const std::string& value) {
  
  introduction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ackSGroup::set_introduction(std::string&& value) {
  
  introduction_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.ackSGroup.introduction)
}
inline void ackSGroup::set_introduction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  introduction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.ackSGroup.introduction)
}
inline void ackSGroup::set_introduction(const char* value,
    size_t size) {
  
  introduction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.ackSGroup.introduction)
}
inline std::string* ackSGroup::_internal_mutable_introduction() {
  
  return introduction_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ackSGroup::release_introduction() {
  // @@protoc_insertion_point(field_release:im.protocol.ackSGroup.introduction)
  return introduction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ackSGroup::set_allocated_introduction(std::string* introduction) {
  if (introduction != nullptr) {
    
  } else {
    
  }
  introduction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), introduction,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.ackSGroup.introduction)
}
inline std::string* ackSGroup::unsafe_arena_release_introduction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.ackSGroup.introduction)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return introduction_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ackSGroup::unsafe_arena_set_allocated_introduction(
    std::string* introduction) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (introduction != nullptr) {
    
  } else {
    
  }
  introduction_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      introduction, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.ackSGroup.introduction)
}

// -------------------------------------------------------------------

// ackSGMember

// int32 id = 1;
inline void ackSGMember::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackSGMember::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ackSGMember::id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackSGMember.id)
  return _internal_id();
}
inline void ackSGMember::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ackSGMember::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackSGMember.id)
}

// string username = 2;
inline void ackSGMember::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ackSGMember::username() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackSGMember.username)
  return _internal_username();
}
inline void ackSGMember::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackSGMember.username)
}
inline std::string* ackSGMember::mutable_username() {
  // @@protoc_insertion_point(field_mutable:im.protocol.ackSGMember.username)
  return _internal_mutable_username();
}
inline const std::string& ackSGMember::_internal_username() const {
  return username_.Get();
}
inline void ackSGMember::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ackSGMember::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.ackSGMember.username)
}
inline void ackSGMember::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.ackSGMember.username)
}
inline void ackSGMember::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.ackSGMember.username)
}
inline std::string* ackSGMember::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ackSGMember::release_username() {
  // @@protoc_insertion_point(field_release:im.protocol.ackSGMember.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ackSGMember::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.ackSGMember.username)
}
inline std::string* ackSGMember::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.ackSGMember.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ackSGMember::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.ackSGMember.username)
}

// string introduction = 3;
inline void ackSGMember::clear_introduction() {
  introduction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ackSGMember::introduction() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackSGMember.introduction)
  return _internal_introduction();
}
inline void ackSGMember::set_introduction(const std::string& value) {
  _internal_set_introduction(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackSGMember.introduction)
}
inline std::string* ackSGMember::mutable_introduction() {
  // @@protoc_insertion_point(field_mutable:im.protocol.ackSGMember.introduction)
  return _internal_mutable_introduction();
}
inline const std::string& ackSGMember::_internal_introduction() const {
  return introduction_.Get();
}
inline void ackSGMember::_internal_set_introduction(const std::string& value) {
  
  introduction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ackSGMember::set_introduction(std::string&& value) {
  
  introduction_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.ackSGMember.introduction)
}
inline void ackSGMember::set_introduction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  introduction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.ackSGMember.introduction)
}
inline void ackSGMember::set_introduction(const char* value,
    size_t size) {
  
  introduction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.ackSGMember.introduction)
}
inline std::string* ackSGMember::_internal_mutable_introduction() {
  
  return introduction_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ackSGMember::release_introduction() {
  // @@protoc_insertion_point(field_release:im.protocol.ackSGMember.introduction)
  return introduction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ackSGMember::set_allocated_introduction(std::string* introduction) {
  if (introduction != nullptr) {
    
  } else {
    
  }
  introduction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), introduction,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.ackSGMember.introduction)
}
inline std::string* ackSGMember::unsafe_arena_release_introduction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.ackSGMember.introduction)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return introduction_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ackSGMember::unsafe_arena_set_allocated_introduction(
    std::string* introduction) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (introduction != nullptr) {
    
  } else {
    
  }
  introduction_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      introduction, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.ackSGMember.introduction)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace im

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::im::protocol::Ack_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::im::protocol::Ack_Type>() {
  return ::im::protocol::Ack_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ack_2eproto
