// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ack.proto

#include "ack.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ack_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddFriend_ack_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ack_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddGroup_ack_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ack_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FileTransfer_ack_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ack_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupChat_ack_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ack_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupInfo_ack_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ack_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginRequest_ack_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ack_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SingleChat_ack_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ack_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfo_ack_2eproto;
namespace im {
namespace protocol {
class AckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ack> _instance;
  const ::im::protocol::UserInfo* user_info_;
  const ::im::protocol::GroupInfo* group_info_;
  const ::im::protocol::FileTransfer* file_transfer_;
  const ::im::protocol::AddFriend* add_friend_;
  const ::im::protocol::AddGroup* add_group_;
  const ::im::protocol::LoginRequest* login_request_;
  const ::im::protocol::SingleChat* single_chat_;
  const ::im::protocol::GroupChat* group_chat_;
} _Ack_default_instance_;
class SingleChatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleChat> _instance;
} _SingleChat_default_instance_;
class UserInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserInfo> _instance;
} _UserInfo_default_instance_;
class GroupChatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupChat> _instance;
} _GroupChat_default_instance_;
class GroupInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupInfo> _instance;
} _GroupInfo_default_instance_;
class FileTransferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileTransfer> _instance;
} _FileTransfer_default_instance_;
class AddFriendDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddFriend> _instance;
} _AddFriend_default_instance_;
class AddGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddGroup> _instance;
} _AddGroup_default_instance_;
class LoginRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginRequest> _instance;
} _LoginRequest_default_instance_;
}  // namespace protocol
}  // namespace im
static void InitDefaultsscc_info_Ack_ack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::im::protocol::_Ack_default_instance_;
    new (ptr) ::im::protocol::Ack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::im::protocol::Ack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_Ack_ack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_Ack_ack_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_UserInfo_ack_2eproto.base,
      &scc_info_GroupInfo_ack_2eproto.base,
      &scc_info_FileTransfer_ack_2eproto.base,
      &scc_info_AddFriend_ack_2eproto.base,
      &scc_info_AddGroup_ack_2eproto.base,
      &scc_info_LoginRequest_ack_2eproto.base,
      &scc_info_SingleChat_ack_2eproto.base,
      &scc_info_GroupChat_ack_2eproto.base,}};

static void InitDefaultsscc_info_AddFriend_ack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::im::protocol::_AddFriend_default_instance_;
    new (ptr) ::im::protocol::AddFriend();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::im::protocol::AddFriend::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddFriend_ack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddFriend_ack_2eproto}, {}};

static void InitDefaultsscc_info_AddGroup_ack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::im::protocol::_AddGroup_default_instance_;
    new (ptr) ::im::protocol::AddGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::im::protocol::AddGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddGroup_ack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddGroup_ack_2eproto}, {}};

static void InitDefaultsscc_info_FileTransfer_ack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::im::protocol::_FileTransfer_default_instance_;
    new (ptr) ::im::protocol::FileTransfer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::im::protocol::FileTransfer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FileTransfer_ack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FileTransfer_ack_2eproto}, {}};

static void InitDefaultsscc_info_GroupChat_ack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::im::protocol::_GroupChat_default_instance_;
    new (ptr) ::im::protocol::GroupChat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::im::protocol::GroupChat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupChat_ack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GroupChat_ack_2eproto}, {}};

static void InitDefaultsscc_info_GroupInfo_ack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::im::protocol::_GroupInfo_default_instance_;
    new (ptr) ::im::protocol::GroupInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::im::protocol::GroupInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupInfo_ack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GroupInfo_ack_2eproto}, {}};

static void InitDefaultsscc_info_LoginRequest_ack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::im::protocol::_LoginRequest_default_instance_;
    new (ptr) ::im::protocol::LoginRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::im::protocol::LoginRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginRequest_ack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginRequest_ack_2eproto}, {}};

static void InitDefaultsscc_info_SingleChat_ack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::im::protocol::_SingleChat_default_instance_;
    new (ptr) ::im::protocol::SingleChat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::im::protocol::SingleChat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SingleChat_ack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SingleChat_ack_2eproto}, {}};

static void InitDefaultsscc_info_UserInfo_ack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::im::protocol::_UserInfo_default_instance_;
    new (ptr) ::im::protocol::UserInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::im::protocol::UserInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfo_ack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserInfo_ack_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ack_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ack_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ack_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ack_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::Ack, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::im::protocol::Ack, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::im::protocol::Ack, type_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::Ack, timestamp_),
  offsetof(::im::protocol::AckDefaultTypeInternal, user_info_),
  offsetof(::im::protocol::AckDefaultTypeInternal, group_info_),
  offsetof(::im::protocol::AckDefaultTypeInternal, file_transfer_),
  offsetof(::im::protocol::AckDefaultTypeInternal, add_friend_),
  offsetof(::im::protocol::AckDefaultTypeInternal, add_group_),
  offsetof(::im::protocol::AckDefaultTypeInternal, login_request_),
  offsetof(::im::protocol::AckDefaultTypeInternal, single_chat_),
  offsetof(::im::protocol::AckDefaultTypeInternal, group_chat_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::Ack, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::SingleChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::im::protocol::SingleChat, sender_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::SingleChat, receiver_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::SingleChat, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::im::protocol::UserInfo, sender_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::UserInfo, receiver_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::UserInfo, name_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::UserInfo, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::GroupChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::im::protocol::GroupChat, sender_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::GroupChat, receiver_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::GroupChat, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::GroupInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::im::protocol::GroupInfo, sender_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::GroupInfo, receiver_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::GroupInfo, name_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::GroupInfo, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::FileTransfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::im::protocol::FileTransfer, sender_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::FileTransfer, receiver_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::FileTransfer, file_name_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::FileTransfer, file_hash_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::FileTransfer, file_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::AddFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::im::protocol::AddFriend, sender_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::AddFriend, receiver_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::AddFriend, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::AddGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::im::protocol::AddGroup, sender_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::AddGroup, group_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::AddGroup, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::LoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::im::protocol::LoginRequest, can_login_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::im::protocol::Ack)},
  { 16, -1, sizeof(::im::protocol::SingleChat)},
  { 24, -1, sizeof(::im::protocol::UserInfo)},
  { 33, -1, sizeof(::im::protocol::GroupChat)},
  { 41, -1, sizeof(::im::protocol::GroupInfo)},
  { 50, -1, sizeof(::im::protocol::FileTransfer)},
  { 60, -1, sizeof(::im::protocol::AddFriend)},
  { 68, -1, sizeof(::im::protocol::AddGroup)},
  { 76, -1, sizeof(::im::protocol::LoginRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::im::protocol::_Ack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::im::protocol::_SingleChat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::im::protocol::_UserInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::im::protocol::_GroupChat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::im::protocol::_GroupInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::im::protocol::_FileTransfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::im::protocol::_AddFriend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::im::protocol::_AddGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::im::protocol::_LoginRequest_default_instance_),
};

const char descriptor_table_protodef_ack_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tack.proto\022\013im.protocol\032\037google/protobu"
  "f/timestamp.proto\"\373\004\n\003Ack\022#\n\004type\030\001 \001(\0162"
  "\025.im.protocol.Ack.Type\022-\n\ttimestamp\030\002 \001("
  "\0132\032.google.protobuf.Timestamp\022*\n\tuser_in"
  "fo\030\003 \001(\0132\025.im.protocol.UserInfoH\000\022,\n\ngro"
  "up_info\030\004 \001(\0132\026.im.protocol.GroupInfoH\000\022"
  "2\n\rfile_transfer\030\005 \001(\0132\031.im.protocol.Fil"
  "eTransferH\000\022,\n\nadd_friend\030\006 \001(\0132\026.im.pro"
  "tocol.AddFriendH\000\022*\n\tadd_group\030\007 \001(\0132\025.i"
  "m.protocol.AddGroupH\000\0222\n\rlogin_request\030\010"
  " \001(\0132\031.im.protocol.LoginRequestH\000\022.\n\013sin"
  "gle_chat\030\t \001(\0132\027.im.protocol.SingleChatH"
  "\000\022,\n\ngroup_chat\030\n \001(\0132\026.im.protocol.Grou"
  "pChatH\000\"\232\001\n\004Type\022\017\n\013SINGLE_CHAT\020\000\022\016\n\nGRO"
  "UP_CHAT\020\001\022\021\n\rFILE_TRANSFER\020\002\022\016\n\nADD_FRIE"
  "ND\020\003\022\r\n\tADD_GROUP\020\004\022\021\n\rLOGIN_REQUEST\020\005\022\r"
  "\n\tHEARTBEAT\020\006\022\r\n\tUSER_INFO\020\007\022\016\n\nGROUP_IN"
  "FO\020\010B\t\n\007content\"E\n\nSingleChat\022\021\n\tsender_"
  "id\030\001 \001(\005\022\023\n\013receiver_id\030\002 \001(\005\022\017\n\007content"
  "\030\003 \001(\t\"Q\n\010UserInfo\022\021\n\tsender_id\030\001 \001(\005\022\023\n"
  "\013receiver_id\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022\017\n\007cont"
  "ent\030\004 \001(\t\"D\n\tGroupChat\022\021\n\tsender_id\030\001 \001("
  "\005\022\023\n\013receiver_id\030\002 \001(\005\022\017\n\007content\030\003 \001(\t\""
  "R\n\tGroupInfo\022\021\n\tsender_id\030\001 \001(\005\022\023\n\013recei"
  "ver_id\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022\017\n\007content\030\004 "
  "\001(\t\"o\n\014FileTransfer\022\021\n\tsender_id\030\001 \001(\005\022\023"
  "\n\013receiver_id\030\002 \001(\005\022\021\n\tfile_name\030\003 \001(\t\022\021"
  "\n\tfile_hash\030\004 \001(\014\022\021\n\tfile_size\030\005 \001(\003\"D\n\t"
  "AddFriend\022\021\n\tsender_id\030\001 \001(\005\022\023\n\013receiver"
  "_id\030\002 \001(\005\022\017\n\007message\030\003 \001(\t\"@\n\010AddGroup\022\021"
  "\n\tsender_id\030\001 \001(\005\022\020\n\010group_id\030\002 \001(\005\022\017\n\007m"
  "essage\030\003 \001(\t\"!\n\014LoginRequest\022\021\n\tcan_logi"
  "n\030\001 \001(\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ack_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ack_2eproto_sccs[9] = {
  &scc_info_Ack_ack_2eproto.base,
  &scc_info_AddFriend_ack_2eproto.base,
  &scc_info_AddGroup_ack_2eproto.base,
  &scc_info_FileTransfer_ack_2eproto.base,
  &scc_info_GroupChat_ack_2eproto.base,
  &scc_info_GroupInfo_ack_2eproto.base,
  &scc_info_LoginRequest_ack_2eproto.base,
  &scc_info_SingleChat_ack_2eproto.base,
  &scc_info_UserInfo_ack_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ack_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ack_2eproto = {
  false, false, descriptor_table_protodef_ack_2eproto, "ack.proto", 1295,
  &descriptor_table_ack_2eproto_once, descriptor_table_ack_2eproto_sccs, descriptor_table_ack_2eproto_deps, 9, 1,
  schemas, file_default_instances, TableStruct_ack_2eproto::offsets,
  file_level_metadata_ack_2eproto, 9, file_level_enum_descriptors_ack_2eproto, file_level_service_descriptors_ack_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ack_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ack_2eproto)), true);
namespace im {
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Ack_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ack_2eproto);
  return file_level_enum_descriptors_ack_2eproto[0];
}
bool Ack_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Ack_Type Ack::SINGLE_CHAT;
constexpr Ack_Type Ack::GROUP_CHAT;
constexpr Ack_Type Ack::FILE_TRANSFER;
constexpr Ack_Type Ack::ADD_FRIEND;
constexpr Ack_Type Ack::ADD_GROUP;
constexpr Ack_Type Ack::LOGIN_REQUEST;
constexpr Ack_Type Ack::HEARTBEAT;
constexpr Ack_Type Ack::USER_INFO;
constexpr Ack_Type Ack::GROUP_INFO;
constexpr Ack_Type Ack::Type_MIN;
constexpr Ack_Type Ack::Type_MAX;
constexpr int Ack::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Ack::InitAsDefaultInstance() {
  ::im::protocol::_Ack_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::im::protocol::_Ack_default_instance_.user_info_ = const_cast< ::im::protocol::UserInfo*>(
      ::im::protocol::UserInfo::internal_default_instance());
  ::im::protocol::_Ack_default_instance_.group_info_ = const_cast< ::im::protocol::GroupInfo*>(
      ::im::protocol::GroupInfo::internal_default_instance());
  ::im::protocol::_Ack_default_instance_.file_transfer_ = const_cast< ::im::protocol::FileTransfer*>(
      ::im::protocol::FileTransfer::internal_default_instance());
  ::im::protocol::_Ack_default_instance_.add_friend_ = const_cast< ::im::protocol::AddFriend*>(
      ::im::protocol::AddFriend::internal_default_instance());
  ::im::protocol::_Ack_default_instance_.add_group_ = const_cast< ::im::protocol::AddGroup*>(
      ::im::protocol::AddGroup::internal_default_instance());
  ::im::protocol::_Ack_default_instance_.login_request_ = const_cast< ::im::protocol::LoginRequest*>(
      ::im::protocol::LoginRequest::internal_default_instance());
  ::im::protocol::_Ack_default_instance_.single_chat_ = const_cast< ::im::protocol::SingleChat*>(
      ::im::protocol::SingleChat::internal_default_instance());
  ::im::protocol::_Ack_default_instance_.group_chat_ = const_cast< ::im::protocol::GroupChat*>(
      ::im::protocol::GroupChat::internal_default_instance());
}
class Ack::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Ack* msg);
  static const ::im::protocol::UserInfo& user_info(const Ack* msg);
  static const ::im::protocol::GroupInfo& group_info(const Ack* msg);
  static const ::im::protocol::FileTransfer& file_transfer(const Ack* msg);
  static const ::im::protocol::AddFriend& add_friend(const Ack* msg);
  static const ::im::protocol::AddGroup& add_group(const Ack* msg);
  static const ::im::protocol::LoginRequest& login_request(const Ack* msg);
  static const ::im::protocol::SingleChat& single_chat(const Ack* msg);
  static const ::im::protocol::GroupChat& group_chat(const Ack* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Ack::_Internal::timestamp(const Ack* msg) {
  return *msg->timestamp_;
}
const ::im::protocol::UserInfo&
Ack::_Internal::user_info(const Ack* msg) {
  return *msg->content_.user_info_;
}
const ::im::protocol::GroupInfo&
Ack::_Internal::group_info(const Ack* msg) {
  return *msg->content_.group_info_;
}
const ::im::protocol::FileTransfer&
Ack::_Internal::file_transfer(const Ack* msg) {
  return *msg->content_.file_transfer_;
}
const ::im::protocol::AddFriend&
Ack::_Internal::add_friend(const Ack* msg) {
  return *msg->content_.add_friend_;
}
const ::im::protocol::AddGroup&
Ack::_Internal::add_group(const Ack* msg) {
  return *msg->content_.add_group_;
}
const ::im::protocol::LoginRequest&
Ack::_Internal::login_request(const Ack* msg) {
  return *msg->content_.login_request_;
}
const ::im::protocol::SingleChat&
Ack::_Internal::single_chat(const Ack* msg) {
  return *msg->content_.single_chat_;
}
const ::im::protocol::GroupChat&
Ack::_Internal::group_chat(const Ack* msg) {
  return *msg->content_.group_chat_;
}
void Ack::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
void Ack::set_allocated_user_info(::im::protocol::UserInfo* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_content();
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user_info);
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    set_has_user_info();
    content_.user_info_ = user_info;
  }
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Ack.user_info)
}
void Ack::set_allocated_group_info(::im::protocol::GroupInfo* group_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_content();
  if (group_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(group_info);
    if (message_arena != submessage_arena) {
      group_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_info, submessage_arena);
    }
    set_has_group_info();
    content_.group_info_ = group_info;
  }
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Ack.group_info)
}
void Ack::set_allocated_file_transfer(::im::protocol::FileTransfer* file_transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_content();
  if (file_transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(file_transfer);
    if (message_arena != submessage_arena) {
      file_transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file_transfer, submessage_arena);
    }
    set_has_file_transfer();
    content_.file_transfer_ = file_transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Ack.file_transfer)
}
void Ack::set_allocated_add_friend(::im::protocol::AddFriend* add_friend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_content();
  if (add_friend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(add_friend);
    if (message_arena != submessage_arena) {
      add_friend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_friend, submessage_arena);
    }
    set_has_add_friend();
    content_.add_friend_ = add_friend;
  }
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Ack.add_friend)
}
void Ack::set_allocated_add_group(::im::protocol::AddGroup* add_group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_content();
  if (add_group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(add_group);
    if (message_arena != submessage_arena) {
      add_group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_group, submessage_arena);
    }
    set_has_add_group();
    content_.add_group_ = add_group;
  }
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Ack.add_group)
}
void Ack::set_allocated_login_request(::im::protocol::LoginRequest* login_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_content();
  if (login_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(login_request);
    if (message_arena != submessage_arena) {
      login_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_request, submessage_arena);
    }
    set_has_login_request();
    content_.login_request_ = login_request;
  }
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Ack.login_request)
}
void Ack::set_allocated_single_chat(::im::protocol::SingleChat* single_chat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_content();
  if (single_chat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(single_chat);
    if (message_arena != submessage_arena) {
      single_chat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, single_chat, submessage_arena);
    }
    set_has_single_chat();
    content_.single_chat_ = single_chat;
  }
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Ack.single_chat)
}
void Ack::set_allocated_group_chat(::im::protocol::GroupChat* group_chat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_content();
  if (group_chat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(group_chat);
    if (message_arena != submessage_arena) {
      group_chat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_chat, submessage_arena);
    }
    set_has_group_chat();
    content_.group_chat_ = group_chat;
  }
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Ack.group_chat)
}
Ack::Ack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:im.protocol.Ack)
}
Ack::Ack(const Ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  type_ = from.type_;
  clear_has_content();
  switch (from.content_case()) {
    case kUserInfo: {
      _internal_mutable_user_info()->::im::protocol::UserInfo::MergeFrom(from._internal_user_info());
      break;
    }
    case kGroupInfo: {
      _internal_mutable_group_info()->::im::protocol::GroupInfo::MergeFrom(from._internal_group_info());
      break;
    }
    case kFileTransfer: {
      _internal_mutable_file_transfer()->::im::protocol::FileTransfer::MergeFrom(from._internal_file_transfer());
      break;
    }
    case kAddFriend: {
      _internal_mutable_add_friend()->::im::protocol::AddFriend::MergeFrom(from._internal_add_friend());
      break;
    }
    case kAddGroup: {
      _internal_mutable_add_group()->::im::protocol::AddGroup::MergeFrom(from._internal_add_group());
      break;
    }
    case kLoginRequest: {
      _internal_mutable_login_request()->::im::protocol::LoginRequest::MergeFrom(from._internal_login_request());
      break;
    }
    case kSingleChat: {
      _internal_mutable_single_chat()->::im::protocol::SingleChat::MergeFrom(from._internal_single_chat());
      break;
    }
    case kGroupChat: {
      _internal_mutable_group_chat()->::im::protocol::GroupChat::MergeFrom(from._internal_group_chat());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:im.protocol.Ack)
}

void Ack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Ack_ack_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(type_));
  clear_has_content();
}

Ack::~Ack() {
  // @@protoc_insertion_point(destructor:im.protocol.Ack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Ack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
  if (has_content()) {
    clear_content();
  }
}

void Ack::ArenaDtor(void* object) {
  Ack* _this = reinterpret_cast< Ack* >(object);
  (void)_this;
}
void Ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ack& Ack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ack_ack_2eproto.base);
  return *internal_default_instance();
}


void Ack::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:im.protocol.Ack)
  switch (content_case()) {
    case kUserInfo: {
      if (GetArena() == nullptr) {
        delete content_.user_info_;
      }
      break;
    }
    case kGroupInfo: {
      if (GetArena() == nullptr) {
        delete content_.group_info_;
      }
      break;
    }
    case kFileTransfer: {
      if (GetArena() == nullptr) {
        delete content_.file_transfer_;
      }
      break;
    }
    case kAddFriend: {
      if (GetArena() == nullptr) {
        delete content_.add_friend_;
      }
      break;
    }
    case kAddGroup: {
      if (GetArena() == nullptr) {
        delete content_.add_group_;
      }
      break;
    }
    case kLoginRequest: {
      if (GetArena() == nullptr) {
        delete content_.login_request_;
      }
      break;
    }
    case kSingleChat: {
      if (GetArena() == nullptr) {
        delete content_.single_chat_;
      }
      break;
    }
    case kGroupChat: {
      if (GetArena() == nullptr) {
        delete content_.group_chat_;
      }
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void Ack::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.Ack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  type_ = 0;
  clear_content();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .im.protocol.Ack.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::im::protocol::Ack_Type>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .im.protocol.UserInfo user_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .im.protocol.GroupInfo group_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .im.protocol.FileTransfer file_transfer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_file_transfer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .im.protocol.AddFriend add_friend = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_friend(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .im.protocol.AddGroup add_group = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_group(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .im.protocol.LoginRequest login_request = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .im.protocol.SingleChat single_chat = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_single_chat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .im.protocol.GroupChat group_chat = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_chat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.Ack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .im.protocol.Ack.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timestamp(this), target, stream);
  }

  // .im.protocol.UserInfo user_info = 3;
  if (_internal_has_user_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::user_info(this), target, stream);
  }

  // .im.protocol.GroupInfo group_info = 4;
  if (_internal_has_group_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::group_info(this), target, stream);
  }

  // .im.protocol.FileTransfer file_transfer = 5;
  if (_internal_has_file_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::file_transfer(this), target, stream);
  }

  // .im.protocol.AddFriend add_friend = 6;
  if (_internal_has_add_friend()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::add_friend(this), target, stream);
  }

  // .im.protocol.AddGroup add_group = 7;
  if (_internal_has_add_group()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::add_group(this), target, stream);
  }

  // .im.protocol.LoginRequest login_request = 8;
  if (_internal_has_login_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::login_request(this), target, stream);
  }

  // .im.protocol.SingleChat single_chat = 9;
  if (_internal_has_single_chat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::single_chat(this), target, stream);
  }

  // .im.protocol.GroupChat group_chat = 10;
  if (_internal_has_group_chat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::group_chat(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.Ack)
  return target;
}

size_t Ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.Ack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .im.protocol.Ack.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (content_case()) {
    // .im.protocol.UserInfo user_info = 3;
    case kUserInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.user_info_);
      break;
    }
    // .im.protocol.GroupInfo group_info = 4;
    case kGroupInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.group_info_);
      break;
    }
    // .im.protocol.FileTransfer file_transfer = 5;
    case kFileTransfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.file_transfer_);
      break;
    }
    // .im.protocol.AddFriend add_friend = 6;
    case kAddFriend: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.add_friend_);
      break;
    }
    // .im.protocol.AddGroup add_group = 7;
    case kAddGroup: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.add_group_);
      break;
    }
    // .im.protocol.LoginRequest login_request = 8;
    case kLoginRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.login_request_);
      break;
    }
    // .im.protocol.SingleChat single_chat = 9;
    case kSingleChat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.single_chat_);
      break;
    }
    // .im.protocol.GroupChat group_chat = 10;
    case kGroupChat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.group_chat_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:im.protocol.Ack)
  GOOGLE_DCHECK_NE(&from, this);
  const Ack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:im.protocol.Ack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:im.protocol.Ack)
    MergeFrom(*source);
  }
}

void Ack::MergeFrom(const Ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.Ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.content_case()) {
    case kUserInfo: {
      _internal_mutable_user_info()->::im::protocol::UserInfo::MergeFrom(from._internal_user_info());
      break;
    }
    case kGroupInfo: {
      _internal_mutable_group_info()->::im::protocol::GroupInfo::MergeFrom(from._internal_group_info());
      break;
    }
    case kFileTransfer: {
      _internal_mutable_file_transfer()->::im::protocol::FileTransfer::MergeFrom(from._internal_file_transfer());
      break;
    }
    case kAddFriend: {
      _internal_mutable_add_friend()->::im::protocol::AddFriend::MergeFrom(from._internal_add_friend());
      break;
    }
    case kAddGroup: {
      _internal_mutable_add_group()->::im::protocol::AddGroup::MergeFrom(from._internal_add_group());
      break;
    }
    case kLoginRequest: {
      _internal_mutable_login_request()->::im::protocol::LoginRequest::MergeFrom(from._internal_login_request());
      break;
    }
    case kSingleChat: {
      _internal_mutable_single_chat()->::im::protocol::SingleChat::MergeFrom(from._internal_single_chat());
      break;
    }
    case kGroupChat: {
      _internal_mutable_group_chat()->::im::protocol::GroupChat::MergeFrom(from._internal_group_chat());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void Ack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:im.protocol.Ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ack::CopyFrom(const Ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.Ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ack::IsInitialized() const {
  return true;
}

void Ack::InternalSwap(Ack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ack, type_)
      + sizeof(Ack::type_)
      - PROTOBUF_FIELD_OFFSET(Ack, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
  swap(content_, other->content_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleChat::InitAsDefaultInstance() {
}
class SingleChat::_Internal {
 public:
};

SingleChat::SingleChat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:im.protocol.SingleChat)
}
SingleChat::SingleChat(const SingleChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_content(),
      GetArena());
  }
  ::memcpy(&sender_id_, &from.sender_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&receiver_id_) -
    reinterpret_cast<char*>(&sender_id_)) + sizeof(receiver_id_));
  // @@protoc_insertion_point(copy_constructor:im.protocol.SingleChat)
}

void SingleChat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleChat_ack_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&receiver_id_) -
      reinterpret_cast<char*>(&sender_id_)) + sizeof(receiver_id_));
}

SingleChat::~SingleChat() {
  // @@protoc_insertion_point(destructor:im.protocol.SingleChat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SingleChat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SingleChat::ArenaDtor(void* object) {
  SingleChat* _this = reinterpret_cast< SingleChat* >(object);
  (void)_this;
}
void SingleChat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleChat& SingleChat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleChat_ack_2eproto.base);
  return *internal_default_instance();
}


void SingleChat::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.SingleChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&receiver_id_) -
      reinterpret_cast<char*>(&sender_id_)) + sizeof(receiver_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 sender_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 receiver_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          receiver_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "im.protocol.SingleChat.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleChat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.SingleChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sender_id = 1;
  if (this->sender_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sender_id(), target);
  }

  // int32 receiver_id = 2;
  if (this->receiver_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_receiver_id(), target);
  }

  // string content = 3;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.SingleChat.content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.SingleChat)
  return target;
}

size_t SingleChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.SingleChat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 3;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // int32 sender_id = 1;
  if (this->sender_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sender_id());
  }

  // int32 receiver_id = 2;
  if (this->receiver_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_receiver_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleChat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:im.protocol.SingleChat)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleChat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleChat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:im.protocol.SingleChat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:im.protocol.SingleChat)
    MergeFrom(*source);
  }
}

void SingleChat::MergeFrom(const SingleChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.SingleChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
  if (from.sender_id() != 0) {
    _internal_set_sender_id(from._internal_sender_id());
  }
  if (from.receiver_id() != 0) {
    _internal_set_receiver_id(from._internal_receiver_id());
  }
}

void SingleChat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:im.protocol.SingleChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleChat::CopyFrom(const SingleChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.SingleChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleChat::IsInitialized() const {
  return true;
}

void SingleChat::InternalSwap(SingleChat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleChat, receiver_id_)
      + sizeof(SingleChat::receiver_id_)
      - PROTOBUF_FIELD_OFFSET(SingleChat, sender_id_)>(
          reinterpret_cast<char*>(&sender_id_),
          reinterpret_cast<char*>(&other->sender_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleChat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserInfo::InitAsDefaultInstance() {
}
class UserInfo::_Internal {
 public:
};

UserInfo::UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:im.protocol.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_content(),
      GetArena());
  }
  ::memcpy(&sender_id_, &from.sender_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&receiver_id_) -
    reinterpret_cast<char*>(&sender_id_)) + sizeof(receiver_id_));
  // @@protoc_insertion_point(copy_constructor:im.protocol.UserInfo)
}

void UserInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserInfo_ack_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&receiver_id_) -
      reinterpret_cast<char*>(&sender_id_)) + sizeof(receiver_id_));
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:im.protocol.UserInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserInfo::ArenaDtor(void* object) {
  UserInfo* _this = reinterpret_cast< UserInfo* >(object);
  (void)_this;
}
void UserInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserInfo& UserInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserInfo_ack_2eproto.base);
  return *internal_default_instance();
}


void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&receiver_id_) -
      reinterpret_cast<char*>(&sender_id_)) + sizeof(receiver_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 sender_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 receiver_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          receiver_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "im.protocol.UserInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "im.protocol.UserInfo.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sender_id = 1;
  if (this->sender_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sender_id(), target);
  }

  // int32 receiver_id = 2;
  if (this->receiver_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_receiver_id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.UserInfo.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string content = 4;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.UserInfo.content");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.UserInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string content = 4;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // int32 sender_id = 1;
  if (this->sender_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sender_id());
  }

  // int32 receiver_id = 2;
  if (this->receiver_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_receiver_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:im.protocol.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:im.protocol.UserInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:im.protocol.UserInfo)
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
  if (from.sender_id() != 0) {
    _internal_set_sender_id(from._internal_sender_id());
  }
  if (from.receiver_id() != 0) {
    _internal_set_receiver_id(from._internal_receiver_id());
  }
}

void UserInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:im.protocol.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  return true;
}

void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserInfo, receiver_id_)
      + sizeof(UserInfo::receiver_id_)
      - PROTOBUF_FIELD_OFFSET(UserInfo, sender_id_)>(
          reinterpret_cast<char*>(&sender_id_),
          reinterpret_cast<char*>(&other->sender_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupChat::InitAsDefaultInstance() {
}
class GroupChat::_Internal {
 public:
};

GroupChat::GroupChat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:im.protocol.GroupChat)
}
GroupChat::GroupChat(const GroupChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_content(),
      GetArena());
  }
  ::memcpy(&sender_id_, &from.sender_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&receiver_id_) -
    reinterpret_cast<char*>(&sender_id_)) + sizeof(receiver_id_));
  // @@protoc_insertion_point(copy_constructor:im.protocol.GroupChat)
}

void GroupChat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupChat_ack_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&receiver_id_) -
      reinterpret_cast<char*>(&sender_id_)) + sizeof(receiver_id_));
}

GroupChat::~GroupChat() {
  // @@protoc_insertion_point(destructor:im.protocol.GroupChat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupChat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GroupChat::ArenaDtor(void* object) {
  GroupChat* _this = reinterpret_cast< GroupChat* >(object);
  (void)_this;
}
void GroupChat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupChat& GroupChat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupChat_ack_2eproto.base);
  return *internal_default_instance();
}


void GroupChat::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.GroupChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&receiver_id_) -
      reinterpret_cast<char*>(&sender_id_)) + sizeof(receiver_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 sender_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 receiver_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          receiver_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "im.protocol.GroupChat.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupChat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.GroupChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sender_id = 1;
  if (this->sender_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sender_id(), target);
  }

  // int32 receiver_id = 2;
  if (this->receiver_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_receiver_id(), target);
  }

  // string content = 3;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.GroupChat.content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.GroupChat)
  return target;
}

size_t GroupChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.GroupChat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 3;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // int32 sender_id = 1;
  if (this->sender_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sender_id());
  }

  // int32 receiver_id = 2;
  if (this->receiver_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_receiver_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupChat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:im.protocol.GroupChat)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupChat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupChat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:im.protocol.GroupChat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:im.protocol.GroupChat)
    MergeFrom(*source);
  }
}

void GroupChat::MergeFrom(const GroupChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.GroupChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
  if (from.sender_id() != 0) {
    _internal_set_sender_id(from._internal_sender_id());
  }
  if (from.receiver_id() != 0) {
    _internal_set_receiver_id(from._internal_receiver_id());
  }
}

void GroupChat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:im.protocol.GroupChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupChat::CopyFrom(const GroupChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.GroupChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupChat::IsInitialized() const {
  return true;
}

void GroupChat::InternalSwap(GroupChat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupChat, receiver_id_)
      + sizeof(GroupChat::receiver_id_)
      - PROTOBUF_FIELD_OFFSET(GroupChat, sender_id_)>(
          reinterpret_cast<char*>(&sender_id_),
          reinterpret_cast<char*>(&other->sender_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupChat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupInfo::InitAsDefaultInstance() {
}
class GroupInfo::_Internal {
 public:
};

GroupInfo::GroupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:im.protocol.GroupInfo)
}
GroupInfo::GroupInfo(const GroupInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_content(),
      GetArena());
  }
  ::memcpy(&sender_id_, &from.sender_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&receiver_id_) -
    reinterpret_cast<char*>(&sender_id_)) + sizeof(receiver_id_));
  // @@protoc_insertion_point(copy_constructor:im.protocol.GroupInfo)
}

void GroupInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupInfo_ack_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&receiver_id_) -
      reinterpret_cast<char*>(&sender_id_)) + sizeof(receiver_id_));
}

GroupInfo::~GroupInfo() {
  // @@protoc_insertion_point(destructor:im.protocol.GroupInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GroupInfo::ArenaDtor(void* object) {
  GroupInfo* _this = reinterpret_cast< GroupInfo* >(object);
  (void)_this;
}
void GroupInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupInfo& GroupInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupInfo_ack_2eproto.base);
  return *internal_default_instance();
}


void GroupInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.GroupInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&receiver_id_) -
      reinterpret_cast<char*>(&sender_id_)) + sizeof(receiver_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 sender_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 receiver_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          receiver_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "im.protocol.GroupInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "im.protocol.GroupInfo.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.GroupInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sender_id = 1;
  if (this->sender_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sender_id(), target);
  }

  // int32 receiver_id = 2;
  if (this->receiver_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_receiver_id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.GroupInfo.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string content = 4;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.GroupInfo.content");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.GroupInfo)
  return target;
}

size_t GroupInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.GroupInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string content = 4;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // int32 sender_id = 1;
  if (this->sender_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sender_id());
  }

  // int32 receiver_id = 2;
  if (this->receiver_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_receiver_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:im.protocol.GroupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:im.protocol.GroupInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:im.protocol.GroupInfo)
    MergeFrom(*source);
  }
}

void GroupInfo::MergeFrom(const GroupInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.GroupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
  if (from.sender_id() != 0) {
    _internal_set_sender_id(from._internal_sender_id());
  }
  if (from.receiver_id() != 0) {
    _internal_set_receiver_id(from._internal_receiver_id());
  }
}

void GroupInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:im.protocol.GroupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupInfo::CopyFrom(const GroupInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.GroupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupInfo::IsInitialized() const {
  return true;
}

void GroupInfo::InternalSwap(GroupInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupInfo, receiver_id_)
      + sizeof(GroupInfo::receiver_id_)
      - PROTOBUF_FIELD_OFFSET(GroupInfo, sender_id_)>(
          reinterpret_cast<char*>(&sender_id_),
          reinterpret_cast<char*>(&other->sender_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FileTransfer::InitAsDefaultInstance() {
}
class FileTransfer::_Internal {
 public:
};

FileTransfer::FileTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:im.protocol.FileTransfer)
}
FileTransfer::FileTransfer(const FileTransfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_name().empty()) {
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_file_name(),
      GetArena());
  }
  file_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_hash().empty()) {
    file_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_file_hash(),
      GetArena());
  }
  ::memcpy(&sender_id_, &from.sender_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&file_size_) -
    reinterpret_cast<char*>(&sender_id_)) + sizeof(file_size_));
  // @@protoc_insertion_point(copy_constructor:im.protocol.FileTransfer)
}

void FileTransfer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FileTransfer_ack_2eproto.base);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_size_) -
      reinterpret_cast<char*>(&sender_id_)) + sizeof(file_size_));
}

FileTransfer::~FileTransfer() {
  // @@protoc_insertion_point(destructor:im.protocol.FileTransfer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FileTransfer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FileTransfer::ArenaDtor(void* object) {
  FileTransfer* _this = reinterpret_cast< FileTransfer* >(object);
  (void)_this;
}
void FileTransfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileTransfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileTransfer& FileTransfer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileTransfer_ack_2eproto.base);
  return *internal_default_instance();
}


void FileTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.FileTransfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  file_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_size_) -
      reinterpret_cast<char*>(&sender_id_)) + sizeof(file_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileTransfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 sender_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 receiver_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          receiver_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "im.protocol.FileTransfer.file_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes file_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_file_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 file_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileTransfer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.FileTransfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sender_id = 1;
  if (this->sender_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sender_id(), target);
  }

  // int32 receiver_id = 2;
  if (this->receiver_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_receiver_id(), target);
  }

  // string file_name = 3;
  if (this->file_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.FileTransfer.file_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_name(), target);
  }

  // bytes file_hash = 4;
  if (this->file_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_file_hash(), target);
  }

  // int64 file_size = 5;
  if (this->file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_file_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.FileTransfer)
  return target;
}

size_t FileTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.FileTransfer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 3;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // bytes file_hash = 4;
  if (this->file_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_file_hash());
  }

  // int32 sender_id = 1;
  if (this->sender_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sender_id());
  }

  // int32 receiver_id = 2;
  if (this->receiver_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_receiver_id());
  }

  // int64 file_size = 5;
  if (this->file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_file_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileTransfer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:im.protocol.FileTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  const FileTransfer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileTransfer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:im.protocol.FileTransfer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:im.protocol.FileTransfer)
    MergeFrom(*source);
  }
}

void FileTransfer::MergeFrom(const FileTransfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.FileTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_name().size() > 0) {
    _internal_set_file_name(from._internal_file_name());
  }
  if (from.file_hash().size() > 0) {
    _internal_set_file_hash(from._internal_file_hash());
  }
  if (from.sender_id() != 0) {
    _internal_set_sender_id(from._internal_sender_id());
  }
  if (from.receiver_id() != 0) {
    _internal_set_receiver_id(from._internal_receiver_id());
  }
  if (from.file_size() != 0) {
    _internal_set_file_size(from._internal_file_size());
  }
}

void FileTransfer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:im.protocol.FileTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileTransfer::CopyFrom(const FileTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.FileTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTransfer::IsInitialized() const {
  return true;
}

void FileTransfer::InternalSwap(FileTransfer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  file_hash_.Swap(&other->file_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileTransfer, file_size_)
      + sizeof(FileTransfer::file_size_)
      - PROTOBUF_FIELD_OFFSET(FileTransfer, sender_id_)>(
          reinterpret_cast<char*>(&sender_id_),
          reinterpret_cast<char*>(&other->sender_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileTransfer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddFriend::InitAsDefaultInstance() {
}
class AddFriend::_Internal {
 public:
};

AddFriend::AddFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:im.protocol.AddFriend)
}
AddFriend::AddFriend(const AddFriend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  ::memcpy(&sender_id_, &from.sender_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&receiver_id_) -
    reinterpret_cast<char*>(&sender_id_)) + sizeof(receiver_id_));
  // @@protoc_insertion_point(copy_constructor:im.protocol.AddFriend)
}

void AddFriend::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddFriend_ack_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&receiver_id_) -
      reinterpret_cast<char*>(&sender_id_)) + sizeof(receiver_id_));
}

AddFriend::~AddFriend() {
  // @@protoc_insertion_point(destructor:im.protocol.AddFriend)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddFriend::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddFriend::ArenaDtor(void* object) {
  AddFriend* _this = reinterpret_cast< AddFriend* >(object);
  (void)_this;
}
void AddFriend::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddFriend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddFriend& AddFriend::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddFriend_ack_2eproto.base);
  return *internal_default_instance();
}


void AddFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.AddFriend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&receiver_id_) -
      reinterpret_cast<char*>(&sender_id_)) + sizeof(receiver_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddFriend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 sender_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 receiver_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          receiver_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "im.protocol.AddFriend.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddFriend::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.AddFriend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sender_id = 1;
  if (this->sender_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sender_id(), target);
  }

  // int32 receiver_id = 2;
  if (this->receiver_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_receiver_id(), target);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.AddFriend.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.AddFriend)
  return target;
}

size_t AddFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.AddFriend)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 sender_id = 1;
  if (this->sender_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sender_id());
  }

  // int32 receiver_id = 2;
  if (this->receiver_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_receiver_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddFriend::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:im.protocol.AddFriend)
  GOOGLE_DCHECK_NE(&from, this);
  const AddFriend* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddFriend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:im.protocol.AddFriend)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:im.protocol.AddFriend)
    MergeFrom(*source);
  }
}

void AddFriend::MergeFrom(const AddFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.AddFriend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.sender_id() != 0) {
    _internal_set_sender_id(from._internal_sender_id());
  }
  if (from.receiver_id() != 0) {
    _internal_set_receiver_id(from._internal_receiver_id());
  }
}

void AddFriend::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:im.protocol.AddFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriend::CopyFrom(const AddFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.AddFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriend::IsInitialized() const {
  return true;
}

void AddFriend::InternalSwap(AddFriend* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddFriend, receiver_id_)
      + sizeof(AddFriend::receiver_id_)
      - PROTOBUF_FIELD_OFFSET(AddFriend, sender_id_)>(
          reinterpret_cast<char*>(&sender_id_),
          reinterpret_cast<char*>(&other->sender_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddFriend::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddGroup::InitAsDefaultInstance() {
}
class AddGroup::_Internal {
 public:
};

AddGroup::AddGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:im.protocol.AddGroup)
}
AddGroup::AddGroup(const AddGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  ::memcpy(&sender_id_, &from.sender_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&sender_id_)) + sizeof(group_id_));
  // @@protoc_insertion_point(copy_constructor:im.protocol.AddGroup)
}

void AddGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddGroup_ack_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&sender_id_)) + sizeof(group_id_));
}

AddGroup::~AddGroup() {
  // @@protoc_insertion_point(destructor:im.protocol.AddGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddGroup::ArenaDtor(void* object) {
  AddGroup* _this = reinterpret_cast< AddGroup* >(object);
  (void)_this;
}
void AddGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddGroup& AddGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddGroup_ack_2eproto.base);
  return *internal_default_instance();
}


void AddGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.AddGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&sender_id_)) + sizeof(group_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 sender_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "im.protocol.AddGroup.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.AddGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sender_id = 1;
  if (this->sender_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sender_id(), target);
  }

  // int32 group_id = 2;
  if (this->group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_group_id(), target);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.AddGroup.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.AddGroup)
  return target;
}

size_t AddGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.AddGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 sender_id = 1;
  if (this->sender_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sender_id());
  }

  // int32 group_id = 2;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:im.protocol.AddGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const AddGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:im.protocol.AddGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:im.protocol.AddGroup)
    MergeFrom(*source);
  }
}

void AddGroup::MergeFrom(const AddGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.AddGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.sender_id() != 0) {
    _internal_set_sender_id(from._internal_sender_id());
  }
  if (from.group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
}

void AddGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:im.protocol.AddGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddGroup::CopyFrom(const AddGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.AddGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddGroup::IsInitialized() const {
  return true;
}

void AddGroup::InternalSwap(AddGroup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddGroup, group_id_)
      + sizeof(AddGroup::group_id_)
      - PROTOBUF_FIELD_OFFSET(AddGroup, sender_id_)>(
          reinterpret_cast<char*>(&sender_id_),
          reinterpret_cast<char*>(&other->sender_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginRequest::InitAsDefaultInstance() {
}
class LoginRequest::_Internal {
 public:
};

LoginRequest::LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:im.protocol.LoginRequest)
}
LoginRequest::LoginRequest(const LoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  can_login_ = from.can_login_;
  // @@protoc_insertion_point(copy_constructor:im.protocol.LoginRequest)
}

void LoginRequest::SharedCtor() {
  can_login_ = false;
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:im.protocol.LoginRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LoginRequest::ArenaDtor(void* object) {
  LoginRequest* _this = reinterpret_cast< LoginRequest* >(object);
  (void)_this;
}
void LoginRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginRequest& LoginRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginRequest_ack_2eproto.base);
  return *internal_default_instance();
}


void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.LoginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  can_login_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool can_login = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          can_login_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.LoginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool can_login = 1;
  if (this->can_login() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_can_login(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.LoginRequest)
  return target;
}

size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.LoginRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool can_login = 1;
  if (this->can_login() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:im.protocol.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:im.protocol.LoginRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:im.protocol.LoginRequest)
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.can_login() != 0) {
    _internal_set_can_login(from._internal_can_login());
  }
}

void LoginRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:im.protocol.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  return true;
}

void LoginRequest::InternalSwap(LoginRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(can_login_, other->can_login_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace im
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::im::protocol::Ack* Arena::CreateMaybeMessage< ::im::protocol::Ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::Ack >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::SingleChat* Arena::CreateMaybeMessage< ::im::protocol::SingleChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::SingleChat >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::UserInfo* Arena::CreateMaybeMessage< ::im::protocol::UserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::UserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::GroupChat* Arena::CreateMaybeMessage< ::im::protocol::GroupChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::GroupChat >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::GroupInfo* Arena::CreateMaybeMessage< ::im::protocol::GroupInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::GroupInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::FileTransfer* Arena::CreateMaybeMessage< ::im::protocol::FileTransfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::FileTransfer >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::AddFriend* Arena::CreateMaybeMessage< ::im::protocol::AddFriend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::AddFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::AddGroup* Arena::CreateMaybeMessage< ::im::protocol::AddGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::AddGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::LoginRequest* Arena::CreateMaybeMessage< ::im::protocol::LoginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::LoginRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
