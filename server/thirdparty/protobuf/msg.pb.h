// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto;
namespace im {
namespace protocol {
class AFriendFrom1;
class AFriendFrom1DefaultTypeInternal;
extern AFriendFrom1DefaultTypeInternal _AFriendFrom1_default_instance_;
class AFriendFrom2;
class AFriendFrom2DefaultTypeInternal;
extern AFriendFrom2DefaultTypeInternal _AFriendFrom2_default_instance_;
class AGroupFrom1;
class AGroupFrom1DefaultTypeInternal;
extern AGroupFrom1DefaultTypeInternal _AGroupFrom1_default_instance_;
class AGroupFrom2;
class AGroupFrom2DefaultTypeInternal;
extern AGroupFrom2DefaultTypeInternal _AGroupFrom2_default_instance_;
class GChat;
class GChatDefaultTypeInternal;
extern GChatDefaultTypeInternal _GChat_default_instance_;
class GRegister;
class GRegisterDefaultTypeInternal;
extern GRegisterDefaultTypeInternal _GRegister_default_instance_;
class HeartBeat;
class HeartBeatDefaultTypeInternal;
extern HeartBeatDefaultTypeInternal _HeartBeat_default_instance_;
class Login;
class LoginDefaultTypeInternal;
extern LoginDefaultTypeInternal _Login_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class SGroup;
class SGroupDefaultTypeInternal;
extern SGroupDefaultTypeInternal _SGroup_default_instance_;
class SUser;
class SUserDefaultTypeInternal;
extern SUserDefaultTypeInternal _SUser_default_instance_;
class UChat;
class UChatDefaultTypeInternal;
extern UChatDefaultTypeInternal _UChat_default_instance_;
class URegister;
class URegisterDefaultTypeInternal;
extern URegisterDefaultTypeInternal _URegister_default_instance_;
}  // namespace protocol
}  // namespace im
PROTOBUF_NAMESPACE_OPEN
template<> ::im::protocol::AFriendFrom1* Arena::CreateMaybeMessage<::im::protocol::AFriendFrom1>(Arena*);
template<> ::im::protocol::AFriendFrom2* Arena::CreateMaybeMessage<::im::protocol::AFriendFrom2>(Arena*);
template<> ::im::protocol::AGroupFrom1* Arena::CreateMaybeMessage<::im::protocol::AGroupFrom1>(Arena*);
template<> ::im::protocol::AGroupFrom2* Arena::CreateMaybeMessage<::im::protocol::AGroupFrom2>(Arena*);
template<> ::im::protocol::GChat* Arena::CreateMaybeMessage<::im::protocol::GChat>(Arena*);
template<> ::im::protocol::GRegister* Arena::CreateMaybeMessage<::im::protocol::GRegister>(Arena*);
template<> ::im::protocol::HeartBeat* Arena::CreateMaybeMessage<::im::protocol::HeartBeat>(Arena*);
template<> ::im::protocol::Login* Arena::CreateMaybeMessage<::im::protocol::Login>(Arena*);
template<> ::im::protocol::Message* Arena::CreateMaybeMessage<::im::protocol::Message>(Arena*);
template<> ::im::protocol::SGroup* Arena::CreateMaybeMessage<::im::protocol::SGroup>(Arena*);
template<> ::im::protocol::SUser* Arena::CreateMaybeMessage<::im::protocol::SUser>(Arena*);
template<> ::im::protocol::UChat* Arena::CreateMaybeMessage<::im::protocol::UChat>(Arena*);
template<> ::im::protocol::URegister* Arena::CreateMaybeMessage<::im::protocol::URegister>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace im {
namespace protocol {

enum Message_Type : int {
  Message_Type_UREGISTER = 0,
  Message_Type_GREGISTER = 1,
  Message_Type_LOGIN = 2,
  Message_Type_UCHAT = 3,
  Message_Type_GCHAT = 4,
  Message_Type_AFF1 = 5,
  Message_Type_AFF2 = 6,
  Message_Type_AGF1 = 7,
  Message_Type_AGF2 = 8,
  Message_Type_SUSER = 9,
  Message_Type_SGROUP = 10,
  Message_Type_HEARTBEAT = 11,
  Message_Type_Message_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Message_Type_Message_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Message_Type_IsValid(int value);
constexpr Message_Type Message_Type_Type_MIN = Message_Type_UREGISTER;
constexpr Message_Type Message_Type_Type_MAX = Message_Type_HEARTBEAT;
constexpr int Message_Type_Type_ARRAYSIZE = Message_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_Type_descriptor();
template<typename T>
inline const std::string& Message_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Message_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Message_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Message_Type_descriptor(), enum_t_value);
}
inline bool Message_Type_Parse(
    const std::string& name, Message_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Message_Type>(
    Message_Type_descriptor(), name, value);
}
// ===================================================================

class Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.Message) */ {
 public:
  inline Message() : Message(nullptr) {};
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  enum ContentCase {
    kUregister = 3,
    kGregister = 4,
    kLogin = 5,
    kUchat = 6,
    kGchat = 7,
    kAff1 = 8,
    kAff2 = 9,
    kAgf1 = 10,
    kAgf2 = 11,
    kSuser = 12,
    kSgroup = 13,
    kHeartbeat = 14,
    CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Message_Type Type;
  static constexpr Type UREGISTER =
    Message_Type_UREGISTER;
  static constexpr Type GREGISTER =
    Message_Type_GREGISTER;
  static constexpr Type LOGIN =
    Message_Type_LOGIN;
  static constexpr Type UCHAT =
    Message_Type_UCHAT;
  static constexpr Type GCHAT =
    Message_Type_GCHAT;
  static constexpr Type AFF1 =
    Message_Type_AFF1;
  static constexpr Type AFF2 =
    Message_Type_AFF2;
  static constexpr Type AGF1 =
    Message_Type_AGF1;
  static constexpr Type AGF2 =
    Message_Type_AGF2;
  static constexpr Type SUSER =
    Message_Type_SUSER;
  static constexpr Type SGROUP =
    Message_Type_SGROUP;
  static constexpr Type HEARTBEAT =
    Message_Type_HEARTBEAT;
  static inline bool Type_IsValid(int value) {
    return Message_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Message_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Message_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Message_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Message_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Message_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Message_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 2,
    kTypeFieldNumber = 1,
    kUregisterFieldNumber = 3,
    kGregisterFieldNumber = 4,
    kLoginFieldNumber = 5,
    kUchatFieldNumber = 6,
    kGchatFieldNumber = 7,
    kAff1FieldNumber = 8,
    kAff2FieldNumber = 9,
    kAgf1FieldNumber = 10,
    kAgf2FieldNumber = 11,
    kSuserFieldNumber = 12,
    kSgroupFieldNumber = 13,
    kHeartbeatFieldNumber = 14,
  };
  // .google.protobuf.Timestamp timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .im.protocol.Message.Type type = 1;
  void clear_type();
  ::im::protocol::Message_Type type() const;
  void set_type(::im::protocol::Message_Type value);
  private:
  ::im::protocol::Message_Type _internal_type() const;
  void _internal_set_type(::im::protocol::Message_Type value);
  public:

  // .im.protocol.URegister uregister = 3;
  bool has_uregister() const;
  private:
  bool _internal_has_uregister() const;
  public:
  void clear_uregister();
  const ::im::protocol::URegister& uregister() const;
  ::im::protocol::URegister* release_uregister();
  ::im::protocol::URegister* mutable_uregister();
  void set_allocated_uregister(::im::protocol::URegister* uregister);
  private:
  const ::im::protocol::URegister& _internal_uregister() const;
  ::im::protocol::URegister* _internal_mutable_uregister();
  public:
  void unsafe_arena_set_allocated_uregister(
      ::im::protocol::URegister* uregister);
  ::im::protocol::URegister* unsafe_arena_release_uregister();

  // .im.protocol.GRegister gregister = 4;
  bool has_gregister() const;
  private:
  bool _internal_has_gregister() const;
  public:
  void clear_gregister();
  const ::im::protocol::GRegister& gregister() const;
  ::im::protocol::GRegister* release_gregister();
  ::im::protocol::GRegister* mutable_gregister();
  void set_allocated_gregister(::im::protocol::GRegister* gregister);
  private:
  const ::im::protocol::GRegister& _internal_gregister() const;
  ::im::protocol::GRegister* _internal_mutable_gregister();
  public:
  void unsafe_arena_set_allocated_gregister(
      ::im::protocol::GRegister* gregister);
  ::im::protocol::GRegister* unsafe_arena_release_gregister();

  // .im.protocol.Login login = 5;
  bool has_login() const;
  private:
  bool _internal_has_login() const;
  public:
  void clear_login();
  const ::im::protocol::Login& login() const;
  ::im::protocol::Login* release_login();
  ::im::protocol::Login* mutable_login();
  void set_allocated_login(::im::protocol::Login* login);
  private:
  const ::im::protocol::Login& _internal_login() const;
  ::im::protocol::Login* _internal_mutable_login();
  public:
  void unsafe_arena_set_allocated_login(
      ::im::protocol::Login* login);
  ::im::protocol::Login* unsafe_arena_release_login();

  // .im.protocol.UChat uchat = 6;
  bool has_uchat() const;
  private:
  bool _internal_has_uchat() const;
  public:
  void clear_uchat();
  const ::im::protocol::UChat& uchat() const;
  ::im::protocol::UChat* release_uchat();
  ::im::protocol::UChat* mutable_uchat();
  void set_allocated_uchat(::im::protocol::UChat* uchat);
  private:
  const ::im::protocol::UChat& _internal_uchat() const;
  ::im::protocol::UChat* _internal_mutable_uchat();
  public:
  void unsafe_arena_set_allocated_uchat(
      ::im::protocol::UChat* uchat);
  ::im::protocol::UChat* unsafe_arena_release_uchat();

  // .im.protocol.GChat gchat = 7;
  bool has_gchat() const;
  private:
  bool _internal_has_gchat() const;
  public:
  void clear_gchat();
  const ::im::protocol::GChat& gchat() const;
  ::im::protocol::GChat* release_gchat();
  ::im::protocol::GChat* mutable_gchat();
  void set_allocated_gchat(::im::protocol::GChat* gchat);
  private:
  const ::im::protocol::GChat& _internal_gchat() const;
  ::im::protocol::GChat* _internal_mutable_gchat();
  public:
  void unsafe_arena_set_allocated_gchat(
      ::im::protocol::GChat* gchat);
  ::im::protocol::GChat* unsafe_arena_release_gchat();

  // .im.protocol.AFriendFrom1 aff1 = 8;
  bool has_aff1() const;
  private:
  bool _internal_has_aff1() const;
  public:
  void clear_aff1();
  const ::im::protocol::AFriendFrom1& aff1() const;
  ::im::protocol::AFriendFrom1* release_aff1();
  ::im::protocol::AFriendFrom1* mutable_aff1();
  void set_allocated_aff1(::im::protocol::AFriendFrom1* aff1);
  private:
  const ::im::protocol::AFriendFrom1& _internal_aff1() const;
  ::im::protocol::AFriendFrom1* _internal_mutable_aff1();
  public:
  void unsafe_arena_set_allocated_aff1(
      ::im::protocol::AFriendFrom1* aff1);
  ::im::protocol::AFriendFrom1* unsafe_arena_release_aff1();

  // .im.protocol.AFriendFrom2 aff2 = 9;
  bool has_aff2() const;
  private:
  bool _internal_has_aff2() const;
  public:
  void clear_aff2();
  const ::im::protocol::AFriendFrom2& aff2() const;
  ::im::protocol::AFriendFrom2* release_aff2();
  ::im::protocol::AFriendFrom2* mutable_aff2();
  void set_allocated_aff2(::im::protocol::AFriendFrom2* aff2);
  private:
  const ::im::protocol::AFriendFrom2& _internal_aff2() const;
  ::im::protocol::AFriendFrom2* _internal_mutable_aff2();
  public:
  void unsafe_arena_set_allocated_aff2(
      ::im::protocol::AFriendFrom2* aff2);
  ::im::protocol::AFriendFrom2* unsafe_arena_release_aff2();

  // .im.protocol.AGroupFrom1 agf1 = 10;
  bool has_agf1() const;
  private:
  bool _internal_has_agf1() const;
  public:
  void clear_agf1();
  const ::im::protocol::AGroupFrom1& agf1() const;
  ::im::protocol::AGroupFrom1* release_agf1();
  ::im::protocol::AGroupFrom1* mutable_agf1();
  void set_allocated_agf1(::im::protocol::AGroupFrom1* agf1);
  private:
  const ::im::protocol::AGroupFrom1& _internal_agf1() const;
  ::im::protocol::AGroupFrom1* _internal_mutable_agf1();
  public:
  void unsafe_arena_set_allocated_agf1(
      ::im::protocol::AGroupFrom1* agf1);
  ::im::protocol::AGroupFrom1* unsafe_arena_release_agf1();

  // .im.protocol.AGroupFrom2 agf2 = 11;
  bool has_agf2() const;
  private:
  bool _internal_has_agf2() const;
  public:
  void clear_agf2();
  const ::im::protocol::AGroupFrom2& agf2() const;
  ::im::protocol::AGroupFrom2* release_agf2();
  ::im::protocol::AGroupFrom2* mutable_agf2();
  void set_allocated_agf2(::im::protocol::AGroupFrom2* agf2);
  private:
  const ::im::protocol::AGroupFrom2& _internal_agf2() const;
  ::im::protocol::AGroupFrom2* _internal_mutable_agf2();
  public:
  void unsafe_arena_set_allocated_agf2(
      ::im::protocol::AGroupFrom2* agf2);
  ::im::protocol::AGroupFrom2* unsafe_arena_release_agf2();

  // .im.protocol.SUser suser = 12;
  bool has_suser() const;
  private:
  bool _internal_has_suser() const;
  public:
  void clear_suser();
  const ::im::protocol::SUser& suser() const;
  ::im::protocol::SUser* release_suser();
  ::im::protocol::SUser* mutable_suser();
  void set_allocated_suser(::im::protocol::SUser* suser);
  private:
  const ::im::protocol::SUser& _internal_suser() const;
  ::im::protocol::SUser* _internal_mutable_suser();
  public:
  void unsafe_arena_set_allocated_suser(
      ::im::protocol::SUser* suser);
  ::im::protocol::SUser* unsafe_arena_release_suser();

  // .im.protocol.SGroup sgroup = 13;
  bool has_sgroup() const;
  private:
  bool _internal_has_sgroup() const;
  public:
  void clear_sgroup();
  const ::im::protocol::SGroup& sgroup() const;
  ::im::protocol::SGroup* release_sgroup();
  ::im::protocol::SGroup* mutable_sgroup();
  void set_allocated_sgroup(::im::protocol::SGroup* sgroup);
  private:
  const ::im::protocol::SGroup& _internal_sgroup() const;
  ::im::protocol::SGroup* _internal_mutable_sgroup();
  public:
  void unsafe_arena_set_allocated_sgroup(
      ::im::protocol::SGroup* sgroup);
  ::im::protocol::SGroup* unsafe_arena_release_sgroup();

  // .im.protocol.HeartBeat heartbeat = 14;
  bool has_heartbeat() const;
  private:
  bool _internal_has_heartbeat() const;
  public:
  void clear_heartbeat();
  const ::im::protocol::HeartBeat& heartbeat() const;
  ::im::protocol::HeartBeat* release_heartbeat();
  ::im::protocol::HeartBeat* mutable_heartbeat();
  void set_allocated_heartbeat(::im::protocol::HeartBeat* heartbeat);
  private:
  const ::im::protocol::HeartBeat& _internal_heartbeat() const;
  ::im::protocol::HeartBeat* _internal_mutable_heartbeat();
  public:
  void unsafe_arena_set_allocated_heartbeat(
      ::im::protocol::HeartBeat* heartbeat);
  ::im::protocol::HeartBeat* unsafe_arena_release_heartbeat();

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:im.protocol.Message)
 private:
  class _Internal;
  void set_has_uregister();
  void set_has_gregister();
  void set_has_login();
  void set_has_uchat();
  void set_has_gchat();
  void set_has_aff1();
  void set_has_aff2();
  void set_has_agf1();
  void set_has_agf2();
  void set_has_suser();
  void set_has_sgroup();
  void set_has_heartbeat();

  inline bool has_content() const;
  inline void clear_has_content();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  int type_;
  union ContentUnion {
    ContentUnion() {}
    ::im::protocol::URegister* uregister_;
    ::im::protocol::GRegister* gregister_;
    ::im::protocol::Login* login_;
    ::im::protocol::UChat* uchat_;
    ::im::protocol::GChat* gchat_;
    ::im::protocol::AFriendFrom1* aff1_;
    ::im::protocol::AFriendFrom2* aff2_;
    ::im::protocol::AGroupFrom1* agf1_;
    ::im::protocol::AGroupFrom2* agf2_;
    ::im::protocol::SUser* suser_;
    ::im::protocol::SGroup* sgroup_;
    ::im::protocol::HeartBeat* heartbeat_;
  } content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class HeartBeat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.HeartBeat) */ {
 public:
  inline HeartBeat() : HeartBeat(nullptr) {};
  virtual ~HeartBeat();

  HeartBeat(const HeartBeat& from);
  HeartBeat(HeartBeat&& from) noexcept
    : HeartBeat() {
    *this = ::std::move(from);
  }

  inline HeartBeat& operator=(const HeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartBeat& operator=(HeartBeat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HeartBeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeartBeat* internal_default_instance() {
    return reinterpret_cast<const HeartBeat*>(
               &_HeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HeartBeat& a, HeartBeat& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartBeat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartBeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeartBeat* New() const final {
    return CreateMaybeMessage<HeartBeat>(nullptr);
  }

  HeartBeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeartBeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeartBeat& from);
  void MergeFrom(const HeartBeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartBeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.HeartBeat";
  }
  protected:
  explicit HeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.HeartBeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Login PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.Login) */ {
 public:
  inline Login() : Login(nullptr) {};
  virtual ~Login();

  Login(const Login& from);
  Login(Login&& from) noexcept
    : Login() {
    *this = ::std::move(from);
  }

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }
  inline Login& operator=(Login&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Login& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Login* internal_default_instance() {
    return reinterpret_cast<const Login*>(
               &_Login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Login& a, Login& b) {
    a.Swap(&b);
  }
  inline void Swap(Login* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Login* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Login* New() const final {
    return CreateMaybeMessage<Login>(nullptr);
  }

  Login* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Login>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.Login";
  }
  protected:
  explicit Login(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.Login)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class URegister PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.URegister) */ {
 public:
  inline URegister() : URegister(nullptr) {};
  virtual ~URegister();

  URegister(const URegister& from);
  URegister(URegister&& from) noexcept
    : URegister() {
    *this = ::std::move(from);
  }

  inline URegister& operator=(const URegister& from) {
    CopyFrom(from);
    return *this;
  }
  inline URegister& operator=(URegister&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const URegister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const URegister* internal_default_instance() {
    return reinterpret_cast<const URegister*>(
               &_URegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(URegister& a, URegister& b) {
    a.Swap(&b);
  }
  inline void Swap(URegister* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(URegister* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline URegister* New() const final {
    return CreateMaybeMessage<URegister>(nullptr);
  }

  URegister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<URegister>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const URegister& from);
  void MergeFrom(const URegister& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(URegister* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.URegister";
  }
  protected:
  explicit URegister(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kIntroductionFieldNumber = 3,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string introduction = 3;
  void clear_introduction();
  const std::string& introduction() const;
  void set_introduction(const std::string& value);
  void set_introduction(std::string&& value);
  void set_introduction(const char* value);
  void set_introduction(const char* value, size_t size);
  std::string* mutable_introduction();
  std::string* release_introduction();
  void set_allocated_introduction(std::string* introduction);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_introduction();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_introduction(
      std::string* introduction);
  private:
  const std::string& _internal_introduction() const;
  void _internal_set_introduction(const std::string& value);
  std::string* _internal_mutable_introduction();
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.URegister)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr introduction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class GRegister PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.GRegister) */ {
 public:
  inline GRegister() : GRegister(nullptr) {};
  virtual ~GRegister();

  GRegister(const GRegister& from);
  GRegister(GRegister&& from) noexcept
    : GRegister() {
    *this = ::std::move(from);
  }

  inline GRegister& operator=(const GRegister& from) {
    CopyFrom(from);
    return *this;
  }
  inline GRegister& operator=(GRegister&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GRegister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GRegister* internal_default_instance() {
    return reinterpret_cast<const GRegister*>(
               &_GRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GRegister& a, GRegister& b) {
    a.Swap(&b);
  }
  inline void Swap(GRegister* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GRegister* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GRegister* New() const final {
    return CreateMaybeMessage<GRegister>(nullptr);
  }

  GRegister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GRegister>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GRegister& from);
  void MergeFrom(const GRegister& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GRegister* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.GRegister";
  }
  protected:
  explicit GRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupnameFieldNumber = 2,
    kIntroductionFieldNumber = 3,
    kLordIdFieldNumber = 1,
  };
  // string groupname = 2;
  void clear_groupname();
  const std::string& groupname() const;
  void set_groupname(const std::string& value);
  void set_groupname(std::string&& value);
  void set_groupname(const char* value);
  void set_groupname(const char* value, size_t size);
  std::string* mutable_groupname();
  std::string* release_groupname();
  void set_allocated_groupname(std::string* groupname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_groupname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_groupname(
      std::string* groupname);
  private:
  const std::string& _internal_groupname() const;
  void _internal_set_groupname(const std::string& value);
  std::string* _internal_mutable_groupname();
  public:

  // string introduction = 3;
  void clear_introduction();
  const std::string& introduction() const;
  void set_introduction(const std::string& value);
  void set_introduction(std::string&& value);
  void set_introduction(const char* value);
  void set_introduction(const char* value, size_t size);
  std::string* mutable_introduction();
  std::string* release_introduction();
  void set_allocated_introduction(std::string* introduction);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_introduction();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_introduction(
      std::string* introduction);
  private:
  const std::string& _internal_introduction() const;
  void _internal_set_introduction(const std::string& value);
  std::string* _internal_mutable_introduction();
  public:

  // int32 lord_id = 1;
  void clear_lord_id();
  ::PROTOBUF_NAMESPACE_ID::int32 lord_id() const;
  void set_lord_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lord_id() const;
  void _internal_set_lord_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.GRegister)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr introduction_;
  ::PROTOBUF_NAMESPACE_ID::int32 lord_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class UChat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.UChat) */ {
 public:
  inline UChat() : UChat(nullptr) {};
  virtual ~UChat();

  UChat(const UChat& from);
  UChat(UChat&& from) noexcept
    : UChat() {
    *this = ::std::move(from);
  }

  inline UChat& operator=(const UChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline UChat& operator=(UChat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UChat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UChat* internal_default_instance() {
    return reinterpret_cast<const UChat*>(
               &_UChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UChat& a, UChat& b) {
    a.Swap(&b);
  }
  inline void Swap(UChat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UChat* New() const final {
    return CreateMaybeMessage<UChat>(nullptr);
  }

  UChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UChat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UChat& from);
  void MergeFrom(const UChat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UChat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.UChat";
  }
  protected:
  explicit UChat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kSenderIdFieldNumber = 1,
    kReceiverIdFieldNumber = 2,
    kTimeFieldNumber = 4,
  };
  // string message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 sender_id = 1;
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 receiver_id = 2;
  void clear_receiver_id();
  ::PROTOBUF_NAMESPACE_ID::int32 receiver_id() const;
  void set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_receiver_id() const;
  void _internal_set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time = 4;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.UChat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 receiver_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class GChat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.GChat) */ {
 public:
  inline GChat() : GChat(nullptr) {};
  virtual ~GChat();

  GChat(const GChat& from);
  GChat(GChat&& from) noexcept
    : GChat() {
    *this = ::std::move(from);
  }

  inline GChat& operator=(const GChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline GChat& operator=(GChat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GChat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GChat* internal_default_instance() {
    return reinterpret_cast<const GChat*>(
               &_GChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GChat& a, GChat& b) {
    a.Swap(&b);
  }
  inline void Swap(GChat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GChat* New() const final {
    return CreateMaybeMessage<GChat>(nullptr);
  }

  GChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GChat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GChat& from);
  void MergeFrom(const GChat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GChat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.GChat";
  }
  protected:
  explicit GChat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kSenderIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kTimeFieldNumber = 4,
  };
  // string message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 sender_id = 1;
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 group_id = 2;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time = 4;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.GChat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 group_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AFriendFrom1 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.AFriendFrom1) */ {
 public:
  inline AFriendFrom1() : AFriendFrom1(nullptr) {};
  virtual ~AFriendFrom1();

  AFriendFrom1(const AFriendFrom1& from);
  AFriendFrom1(AFriendFrom1&& from) noexcept
    : AFriendFrom1() {
    *this = ::std::move(from);
  }

  inline AFriendFrom1& operator=(const AFriendFrom1& from) {
    CopyFrom(from);
    return *this;
  }
  inline AFriendFrom1& operator=(AFriendFrom1&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AFriendFrom1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AFriendFrom1* internal_default_instance() {
    return reinterpret_cast<const AFriendFrom1*>(
               &_AFriendFrom1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AFriendFrom1& a, AFriendFrom1& b) {
    a.Swap(&b);
  }
  inline void Swap(AFriendFrom1* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AFriendFrom1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AFriendFrom1* New() const final {
    return CreateMaybeMessage<AFriendFrom1>(nullptr);
  }

  AFriendFrom1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AFriendFrom1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AFriendFrom1& from);
  void MergeFrom(const AFriendFrom1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AFriendFrom1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.AFriendFrom1";
  }
  protected:
  explicit AFriendFrom1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kSenderIdFieldNumber = 1,
    kReceiverIdFieldNumber = 2,
    kTimeFieldNumber = 4,
  };
  // string message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 sender_id = 1;
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 receiver_id = 2;
  void clear_receiver_id();
  ::PROTOBUF_NAMESPACE_ID::int32 receiver_id() const;
  void set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_receiver_id() const;
  void _internal_set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time = 4;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.AFriendFrom1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 receiver_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AFriendFrom2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.AFriendFrom2) */ {
 public:
  inline AFriendFrom2() : AFriendFrom2(nullptr) {};
  virtual ~AFriendFrom2();

  AFriendFrom2(const AFriendFrom2& from);
  AFriendFrom2(AFriendFrom2&& from) noexcept
    : AFriendFrom2() {
    *this = ::std::move(from);
  }

  inline AFriendFrom2& operator=(const AFriendFrom2& from) {
    CopyFrom(from);
    return *this;
  }
  inline AFriendFrom2& operator=(AFriendFrom2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AFriendFrom2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AFriendFrom2* internal_default_instance() {
    return reinterpret_cast<const AFriendFrom2*>(
               &_AFriendFrom2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AFriendFrom2& a, AFriendFrom2& b) {
    a.Swap(&b);
  }
  inline void Swap(AFriendFrom2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AFriendFrom2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AFriendFrom2* New() const final {
    return CreateMaybeMessage<AFriendFrom2>(nullptr);
  }

  AFriendFrom2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AFriendFrom2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AFriendFrom2& from);
  void MergeFrom(const AFriendFrom2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AFriendFrom2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.AFriendFrom2";
  }
  protected:
  explicit AFriendFrom2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 4,
    kSenderIdFieldNumber = 1,
    kReceiverIdFieldNumber = 2,
    kStatusFieldNumber = 3,
    kTimeFieldNumber = 5,
  };
  // string message = 4;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 sender_id = 1;
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 receiver_id = 2;
  void clear_receiver_id();
  ::PROTOBUF_NAMESPACE_ID::int32 receiver_id() const;
  void set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_receiver_id() const;
  void _internal_set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool status = 3;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // int32 time = 5;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.AFriendFrom2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 receiver_id_;
  bool status_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AGroupFrom1 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.AGroupFrom1) */ {
 public:
  inline AGroupFrom1() : AGroupFrom1(nullptr) {};
  virtual ~AGroupFrom1();

  AGroupFrom1(const AGroupFrom1& from);
  AGroupFrom1(AGroupFrom1&& from) noexcept
    : AGroupFrom1() {
    *this = ::std::move(from);
  }

  inline AGroupFrom1& operator=(const AGroupFrom1& from) {
    CopyFrom(from);
    return *this;
  }
  inline AGroupFrom1& operator=(AGroupFrom1&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AGroupFrom1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AGroupFrom1* internal_default_instance() {
    return reinterpret_cast<const AGroupFrom1*>(
               &_AGroupFrom1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AGroupFrom1& a, AGroupFrom1& b) {
    a.Swap(&b);
  }
  inline void Swap(AGroupFrom1* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AGroupFrom1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AGroupFrom1* New() const final {
    return CreateMaybeMessage<AGroupFrom1>(nullptr);
  }

  AGroupFrom1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AGroupFrom1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AGroupFrom1& from);
  void MergeFrom(const AGroupFrom1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AGroupFrom1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.AGroupFrom1";
  }
  protected:
  explicit AGroupFrom1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kSenderIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kTimeFieldNumber = 4,
  };
  // string message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 sender_id = 1;
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 group_id = 2;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time = 4;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.AGroupFrom1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 group_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AGroupFrom2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.AGroupFrom2) */ {
 public:
  inline AGroupFrom2() : AGroupFrom2(nullptr) {};
  virtual ~AGroupFrom2();

  AGroupFrom2(const AGroupFrom2& from);
  AGroupFrom2(AGroupFrom2&& from) noexcept
    : AGroupFrom2() {
    *this = ::std::move(from);
  }

  inline AGroupFrom2& operator=(const AGroupFrom2& from) {
    CopyFrom(from);
    return *this;
  }
  inline AGroupFrom2& operator=(AGroupFrom2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AGroupFrom2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AGroupFrom2* internal_default_instance() {
    return reinterpret_cast<const AGroupFrom2*>(
               &_AGroupFrom2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AGroupFrom2& a, AGroupFrom2& b) {
    a.Swap(&b);
  }
  inline void Swap(AGroupFrom2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AGroupFrom2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AGroupFrom2* New() const final {
    return CreateMaybeMessage<AGroupFrom2>(nullptr);
  }

  AGroupFrom2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AGroupFrom2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AGroupFrom2& from);
  void MergeFrom(const AGroupFrom2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AGroupFrom2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.AGroupFrom2";
  }
  protected:
  explicit AGroupFrom2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 4,
    kSenderIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kStatusFieldNumber = 3,
    kTimeFieldNumber = 5,
  };
  // string message = 4;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 sender_id = 1;
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 group_id = 2;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool status = 3;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // int32 time = 5;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.AGroupFrom2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 group_id_;
  bool status_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SUser PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.SUser) */ {
 public:
  inline SUser() : SUser(nullptr) {};
  virtual ~SUser();

  SUser(const SUser& from);
  SUser(SUser&& from) noexcept
    : SUser() {
    *this = ::std::move(from);
  }

  inline SUser& operator=(const SUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline SUser& operator=(SUser&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SUser* internal_default_instance() {
    return reinterpret_cast<const SUser*>(
               &_SUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SUser& a, SUser& b) {
    a.Swap(&b);
  }
  inline void Swap(SUser* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SUser* New() const final {
    return CreateMaybeMessage<SUser>(nullptr);
  }

  SUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SUser& from);
  void MergeFrom(const SUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.SUser";
  }
  protected:
  explicit SUser(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSenderIdFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 sender_id = 1;
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.SUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SGroup PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.SGroup) */ {
 public:
  inline SGroup() : SGroup(nullptr) {};
  virtual ~SGroup();

  SGroup(const SGroup& from);
  SGroup(SGroup&& from) noexcept
    : SGroup() {
    *this = ::std::move(from);
  }

  inline SGroup& operator=(const SGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline SGroup& operator=(SGroup&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SGroup* internal_default_instance() {
    return reinterpret_cast<const SGroup*>(
               &_SGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SGroup& a, SGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(SGroup* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SGroup* New() const final {
    return CreateMaybeMessage<SGroup>(nullptr);
  }

  SGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SGroup& from);
  void MergeFrom(const SGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.SGroup";
  }
  protected:
  explicit SGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSenderIdFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 sender_id = 1;
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.SGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message

// .im.protocol.Message.Type type = 1;
inline void Message::clear_type() {
  type_ = 0;
}
inline ::im::protocol::Message_Type Message::_internal_type() const {
  return static_cast< ::im::protocol::Message_Type >(type_);
}
inline ::im::protocol::Message_Type Message::type() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.type)
  return _internal_type();
}
inline void Message::_internal_set_type(::im::protocol::Message_Type value) {
  
  type_ = value;
}
inline void Message::set_type(::im::protocol::Message_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:im.protocol.Message.type)
}

// .google.protobuf.Timestamp timestamp = 2;
inline bool Message::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool Message::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Message::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Message::timestamp() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.timestamp)
  return _internal_timestamp();
}
inline void Message::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Message.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Message::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Message::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:im.protocol.Message.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Message::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Message::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Message.timestamp)
  return _internal_mutable_timestamp();
}
inline void Message::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Message.timestamp)
}

// .im.protocol.URegister uregister = 3;
inline bool Message::_internal_has_uregister() const {
  return content_case() == kUregister;
}
inline bool Message::has_uregister() const {
  return _internal_has_uregister();
}
inline void Message::set_has_uregister() {
  _oneof_case_[0] = kUregister;
}
inline void Message::clear_uregister() {
  if (_internal_has_uregister()) {
    if (GetArena() == nullptr) {
      delete content_.uregister_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::URegister* Message::release_uregister() {
  // @@protoc_insertion_point(field_release:im.protocol.Message.uregister)
  if (_internal_has_uregister()) {
    clear_has_content();
      ::im::protocol::URegister* temp = content_.uregister_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.uregister_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::URegister& Message::_internal_uregister() const {
  return _internal_has_uregister()
      ? *content_.uregister_
      : *reinterpret_cast< ::im::protocol::URegister*>(&::im::protocol::_URegister_default_instance_);
}
inline const ::im::protocol::URegister& Message::uregister() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.uregister)
  return _internal_uregister();
}
inline ::im::protocol::URegister* Message::unsafe_arena_release_uregister() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Message.uregister)
  if (_internal_has_uregister()) {
    clear_has_content();
    ::im::protocol::URegister* temp = content_.uregister_;
    content_.uregister_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_uregister(::im::protocol::URegister* uregister) {
  clear_content();
  if (uregister) {
    set_has_uregister();
    content_.uregister_ = uregister;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Message.uregister)
}
inline ::im::protocol::URegister* Message::_internal_mutable_uregister() {
  if (!_internal_has_uregister()) {
    clear_content();
    set_has_uregister();
    content_.uregister_ = CreateMaybeMessage< ::im::protocol::URegister >(GetArena());
  }
  return content_.uregister_;
}
inline ::im::protocol::URegister* Message::mutable_uregister() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Message.uregister)
  return _internal_mutable_uregister();
}

// .im.protocol.GRegister gregister = 4;
inline bool Message::_internal_has_gregister() const {
  return content_case() == kGregister;
}
inline bool Message::has_gregister() const {
  return _internal_has_gregister();
}
inline void Message::set_has_gregister() {
  _oneof_case_[0] = kGregister;
}
inline void Message::clear_gregister() {
  if (_internal_has_gregister()) {
    if (GetArena() == nullptr) {
      delete content_.gregister_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::GRegister* Message::release_gregister() {
  // @@protoc_insertion_point(field_release:im.protocol.Message.gregister)
  if (_internal_has_gregister()) {
    clear_has_content();
      ::im::protocol::GRegister* temp = content_.gregister_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.gregister_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::GRegister& Message::_internal_gregister() const {
  return _internal_has_gregister()
      ? *content_.gregister_
      : *reinterpret_cast< ::im::protocol::GRegister*>(&::im::protocol::_GRegister_default_instance_);
}
inline const ::im::protocol::GRegister& Message::gregister() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.gregister)
  return _internal_gregister();
}
inline ::im::protocol::GRegister* Message::unsafe_arena_release_gregister() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Message.gregister)
  if (_internal_has_gregister()) {
    clear_has_content();
    ::im::protocol::GRegister* temp = content_.gregister_;
    content_.gregister_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_gregister(::im::protocol::GRegister* gregister) {
  clear_content();
  if (gregister) {
    set_has_gregister();
    content_.gregister_ = gregister;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Message.gregister)
}
inline ::im::protocol::GRegister* Message::_internal_mutable_gregister() {
  if (!_internal_has_gregister()) {
    clear_content();
    set_has_gregister();
    content_.gregister_ = CreateMaybeMessage< ::im::protocol::GRegister >(GetArena());
  }
  return content_.gregister_;
}
inline ::im::protocol::GRegister* Message::mutable_gregister() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Message.gregister)
  return _internal_mutable_gregister();
}

// .im.protocol.Login login = 5;
inline bool Message::_internal_has_login() const {
  return content_case() == kLogin;
}
inline bool Message::has_login() const {
  return _internal_has_login();
}
inline void Message::set_has_login() {
  _oneof_case_[0] = kLogin;
}
inline void Message::clear_login() {
  if (_internal_has_login()) {
    if (GetArena() == nullptr) {
      delete content_.login_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::Login* Message::release_login() {
  // @@protoc_insertion_point(field_release:im.protocol.Message.login)
  if (_internal_has_login()) {
    clear_has_content();
      ::im::protocol::Login* temp = content_.login_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.login_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::Login& Message::_internal_login() const {
  return _internal_has_login()
      ? *content_.login_
      : *reinterpret_cast< ::im::protocol::Login*>(&::im::protocol::_Login_default_instance_);
}
inline const ::im::protocol::Login& Message::login() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.login)
  return _internal_login();
}
inline ::im::protocol::Login* Message::unsafe_arena_release_login() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Message.login)
  if (_internal_has_login()) {
    clear_has_content();
    ::im::protocol::Login* temp = content_.login_;
    content_.login_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_login(::im::protocol::Login* login) {
  clear_content();
  if (login) {
    set_has_login();
    content_.login_ = login;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Message.login)
}
inline ::im::protocol::Login* Message::_internal_mutable_login() {
  if (!_internal_has_login()) {
    clear_content();
    set_has_login();
    content_.login_ = CreateMaybeMessage< ::im::protocol::Login >(GetArena());
  }
  return content_.login_;
}
inline ::im::protocol::Login* Message::mutable_login() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Message.login)
  return _internal_mutable_login();
}

// .im.protocol.UChat uchat = 6;
inline bool Message::_internal_has_uchat() const {
  return content_case() == kUchat;
}
inline bool Message::has_uchat() const {
  return _internal_has_uchat();
}
inline void Message::set_has_uchat() {
  _oneof_case_[0] = kUchat;
}
inline void Message::clear_uchat() {
  if (_internal_has_uchat()) {
    if (GetArena() == nullptr) {
      delete content_.uchat_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::UChat* Message::release_uchat() {
  // @@protoc_insertion_point(field_release:im.protocol.Message.uchat)
  if (_internal_has_uchat()) {
    clear_has_content();
      ::im::protocol::UChat* temp = content_.uchat_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.uchat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::UChat& Message::_internal_uchat() const {
  return _internal_has_uchat()
      ? *content_.uchat_
      : *reinterpret_cast< ::im::protocol::UChat*>(&::im::protocol::_UChat_default_instance_);
}
inline const ::im::protocol::UChat& Message::uchat() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.uchat)
  return _internal_uchat();
}
inline ::im::protocol::UChat* Message::unsafe_arena_release_uchat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Message.uchat)
  if (_internal_has_uchat()) {
    clear_has_content();
    ::im::protocol::UChat* temp = content_.uchat_;
    content_.uchat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_uchat(::im::protocol::UChat* uchat) {
  clear_content();
  if (uchat) {
    set_has_uchat();
    content_.uchat_ = uchat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Message.uchat)
}
inline ::im::protocol::UChat* Message::_internal_mutable_uchat() {
  if (!_internal_has_uchat()) {
    clear_content();
    set_has_uchat();
    content_.uchat_ = CreateMaybeMessage< ::im::protocol::UChat >(GetArena());
  }
  return content_.uchat_;
}
inline ::im::protocol::UChat* Message::mutable_uchat() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Message.uchat)
  return _internal_mutable_uchat();
}

// .im.protocol.GChat gchat = 7;
inline bool Message::_internal_has_gchat() const {
  return content_case() == kGchat;
}
inline bool Message::has_gchat() const {
  return _internal_has_gchat();
}
inline void Message::set_has_gchat() {
  _oneof_case_[0] = kGchat;
}
inline void Message::clear_gchat() {
  if (_internal_has_gchat()) {
    if (GetArena() == nullptr) {
      delete content_.gchat_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::GChat* Message::release_gchat() {
  // @@protoc_insertion_point(field_release:im.protocol.Message.gchat)
  if (_internal_has_gchat()) {
    clear_has_content();
      ::im::protocol::GChat* temp = content_.gchat_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.gchat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::GChat& Message::_internal_gchat() const {
  return _internal_has_gchat()
      ? *content_.gchat_
      : *reinterpret_cast< ::im::protocol::GChat*>(&::im::protocol::_GChat_default_instance_);
}
inline const ::im::protocol::GChat& Message::gchat() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.gchat)
  return _internal_gchat();
}
inline ::im::protocol::GChat* Message::unsafe_arena_release_gchat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Message.gchat)
  if (_internal_has_gchat()) {
    clear_has_content();
    ::im::protocol::GChat* temp = content_.gchat_;
    content_.gchat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_gchat(::im::protocol::GChat* gchat) {
  clear_content();
  if (gchat) {
    set_has_gchat();
    content_.gchat_ = gchat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Message.gchat)
}
inline ::im::protocol::GChat* Message::_internal_mutable_gchat() {
  if (!_internal_has_gchat()) {
    clear_content();
    set_has_gchat();
    content_.gchat_ = CreateMaybeMessage< ::im::protocol::GChat >(GetArena());
  }
  return content_.gchat_;
}
inline ::im::protocol::GChat* Message::mutable_gchat() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Message.gchat)
  return _internal_mutable_gchat();
}

// .im.protocol.AFriendFrom1 aff1 = 8;
inline bool Message::_internal_has_aff1() const {
  return content_case() == kAff1;
}
inline bool Message::has_aff1() const {
  return _internal_has_aff1();
}
inline void Message::set_has_aff1() {
  _oneof_case_[0] = kAff1;
}
inline void Message::clear_aff1() {
  if (_internal_has_aff1()) {
    if (GetArena() == nullptr) {
      delete content_.aff1_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::AFriendFrom1* Message::release_aff1() {
  // @@protoc_insertion_point(field_release:im.protocol.Message.aff1)
  if (_internal_has_aff1()) {
    clear_has_content();
      ::im::protocol::AFriendFrom1* temp = content_.aff1_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.aff1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::AFriendFrom1& Message::_internal_aff1() const {
  return _internal_has_aff1()
      ? *content_.aff1_
      : *reinterpret_cast< ::im::protocol::AFriendFrom1*>(&::im::protocol::_AFriendFrom1_default_instance_);
}
inline const ::im::protocol::AFriendFrom1& Message::aff1() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.aff1)
  return _internal_aff1();
}
inline ::im::protocol::AFriendFrom1* Message::unsafe_arena_release_aff1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Message.aff1)
  if (_internal_has_aff1()) {
    clear_has_content();
    ::im::protocol::AFriendFrom1* temp = content_.aff1_;
    content_.aff1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_aff1(::im::protocol::AFriendFrom1* aff1) {
  clear_content();
  if (aff1) {
    set_has_aff1();
    content_.aff1_ = aff1;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Message.aff1)
}
inline ::im::protocol::AFriendFrom1* Message::_internal_mutable_aff1() {
  if (!_internal_has_aff1()) {
    clear_content();
    set_has_aff1();
    content_.aff1_ = CreateMaybeMessage< ::im::protocol::AFriendFrom1 >(GetArena());
  }
  return content_.aff1_;
}
inline ::im::protocol::AFriendFrom1* Message::mutable_aff1() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Message.aff1)
  return _internal_mutable_aff1();
}

// .im.protocol.AFriendFrom2 aff2 = 9;
inline bool Message::_internal_has_aff2() const {
  return content_case() == kAff2;
}
inline bool Message::has_aff2() const {
  return _internal_has_aff2();
}
inline void Message::set_has_aff2() {
  _oneof_case_[0] = kAff2;
}
inline void Message::clear_aff2() {
  if (_internal_has_aff2()) {
    if (GetArena() == nullptr) {
      delete content_.aff2_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::AFriendFrom2* Message::release_aff2() {
  // @@protoc_insertion_point(field_release:im.protocol.Message.aff2)
  if (_internal_has_aff2()) {
    clear_has_content();
      ::im::protocol::AFriendFrom2* temp = content_.aff2_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.aff2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::AFriendFrom2& Message::_internal_aff2() const {
  return _internal_has_aff2()
      ? *content_.aff2_
      : *reinterpret_cast< ::im::protocol::AFriendFrom2*>(&::im::protocol::_AFriendFrom2_default_instance_);
}
inline const ::im::protocol::AFriendFrom2& Message::aff2() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.aff2)
  return _internal_aff2();
}
inline ::im::protocol::AFriendFrom2* Message::unsafe_arena_release_aff2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Message.aff2)
  if (_internal_has_aff2()) {
    clear_has_content();
    ::im::protocol::AFriendFrom2* temp = content_.aff2_;
    content_.aff2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_aff2(::im::protocol::AFriendFrom2* aff2) {
  clear_content();
  if (aff2) {
    set_has_aff2();
    content_.aff2_ = aff2;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Message.aff2)
}
inline ::im::protocol::AFriendFrom2* Message::_internal_mutable_aff2() {
  if (!_internal_has_aff2()) {
    clear_content();
    set_has_aff2();
    content_.aff2_ = CreateMaybeMessage< ::im::protocol::AFriendFrom2 >(GetArena());
  }
  return content_.aff2_;
}
inline ::im::protocol::AFriendFrom2* Message::mutable_aff2() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Message.aff2)
  return _internal_mutable_aff2();
}

// .im.protocol.AGroupFrom1 agf1 = 10;
inline bool Message::_internal_has_agf1() const {
  return content_case() == kAgf1;
}
inline bool Message::has_agf1() const {
  return _internal_has_agf1();
}
inline void Message::set_has_agf1() {
  _oneof_case_[0] = kAgf1;
}
inline void Message::clear_agf1() {
  if (_internal_has_agf1()) {
    if (GetArena() == nullptr) {
      delete content_.agf1_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::AGroupFrom1* Message::release_agf1() {
  // @@protoc_insertion_point(field_release:im.protocol.Message.agf1)
  if (_internal_has_agf1()) {
    clear_has_content();
      ::im::protocol::AGroupFrom1* temp = content_.agf1_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.agf1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::AGroupFrom1& Message::_internal_agf1() const {
  return _internal_has_agf1()
      ? *content_.agf1_
      : *reinterpret_cast< ::im::protocol::AGroupFrom1*>(&::im::protocol::_AGroupFrom1_default_instance_);
}
inline const ::im::protocol::AGroupFrom1& Message::agf1() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.agf1)
  return _internal_agf1();
}
inline ::im::protocol::AGroupFrom1* Message::unsafe_arena_release_agf1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Message.agf1)
  if (_internal_has_agf1()) {
    clear_has_content();
    ::im::protocol::AGroupFrom1* temp = content_.agf1_;
    content_.agf1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_agf1(::im::protocol::AGroupFrom1* agf1) {
  clear_content();
  if (agf1) {
    set_has_agf1();
    content_.agf1_ = agf1;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Message.agf1)
}
inline ::im::protocol::AGroupFrom1* Message::_internal_mutable_agf1() {
  if (!_internal_has_agf1()) {
    clear_content();
    set_has_agf1();
    content_.agf1_ = CreateMaybeMessage< ::im::protocol::AGroupFrom1 >(GetArena());
  }
  return content_.agf1_;
}
inline ::im::protocol::AGroupFrom1* Message::mutable_agf1() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Message.agf1)
  return _internal_mutable_agf1();
}

// .im.protocol.AGroupFrom2 agf2 = 11;
inline bool Message::_internal_has_agf2() const {
  return content_case() == kAgf2;
}
inline bool Message::has_agf2() const {
  return _internal_has_agf2();
}
inline void Message::set_has_agf2() {
  _oneof_case_[0] = kAgf2;
}
inline void Message::clear_agf2() {
  if (_internal_has_agf2()) {
    if (GetArena() == nullptr) {
      delete content_.agf2_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::AGroupFrom2* Message::release_agf2() {
  // @@protoc_insertion_point(field_release:im.protocol.Message.agf2)
  if (_internal_has_agf2()) {
    clear_has_content();
      ::im::protocol::AGroupFrom2* temp = content_.agf2_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.agf2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::AGroupFrom2& Message::_internal_agf2() const {
  return _internal_has_agf2()
      ? *content_.agf2_
      : *reinterpret_cast< ::im::protocol::AGroupFrom2*>(&::im::protocol::_AGroupFrom2_default_instance_);
}
inline const ::im::protocol::AGroupFrom2& Message::agf2() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.agf2)
  return _internal_agf2();
}
inline ::im::protocol::AGroupFrom2* Message::unsafe_arena_release_agf2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Message.agf2)
  if (_internal_has_agf2()) {
    clear_has_content();
    ::im::protocol::AGroupFrom2* temp = content_.agf2_;
    content_.agf2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_agf2(::im::protocol::AGroupFrom2* agf2) {
  clear_content();
  if (agf2) {
    set_has_agf2();
    content_.agf2_ = agf2;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Message.agf2)
}
inline ::im::protocol::AGroupFrom2* Message::_internal_mutable_agf2() {
  if (!_internal_has_agf2()) {
    clear_content();
    set_has_agf2();
    content_.agf2_ = CreateMaybeMessage< ::im::protocol::AGroupFrom2 >(GetArena());
  }
  return content_.agf2_;
}
inline ::im::protocol::AGroupFrom2* Message::mutable_agf2() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Message.agf2)
  return _internal_mutable_agf2();
}

// .im.protocol.SUser suser = 12;
inline bool Message::_internal_has_suser() const {
  return content_case() == kSuser;
}
inline bool Message::has_suser() const {
  return _internal_has_suser();
}
inline void Message::set_has_suser() {
  _oneof_case_[0] = kSuser;
}
inline void Message::clear_suser() {
  if (_internal_has_suser()) {
    if (GetArena() == nullptr) {
      delete content_.suser_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::SUser* Message::release_suser() {
  // @@protoc_insertion_point(field_release:im.protocol.Message.suser)
  if (_internal_has_suser()) {
    clear_has_content();
      ::im::protocol::SUser* temp = content_.suser_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.suser_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::SUser& Message::_internal_suser() const {
  return _internal_has_suser()
      ? *content_.suser_
      : *reinterpret_cast< ::im::protocol::SUser*>(&::im::protocol::_SUser_default_instance_);
}
inline const ::im::protocol::SUser& Message::suser() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.suser)
  return _internal_suser();
}
inline ::im::protocol::SUser* Message::unsafe_arena_release_suser() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Message.suser)
  if (_internal_has_suser()) {
    clear_has_content();
    ::im::protocol::SUser* temp = content_.suser_;
    content_.suser_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_suser(::im::protocol::SUser* suser) {
  clear_content();
  if (suser) {
    set_has_suser();
    content_.suser_ = suser;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Message.suser)
}
inline ::im::protocol::SUser* Message::_internal_mutable_suser() {
  if (!_internal_has_suser()) {
    clear_content();
    set_has_suser();
    content_.suser_ = CreateMaybeMessage< ::im::protocol::SUser >(GetArena());
  }
  return content_.suser_;
}
inline ::im::protocol::SUser* Message::mutable_suser() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Message.suser)
  return _internal_mutable_suser();
}

// .im.protocol.SGroup sgroup = 13;
inline bool Message::_internal_has_sgroup() const {
  return content_case() == kSgroup;
}
inline bool Message::has_sgroup() const {
  return _internal_has_sgroup();
}
inline void Message::set_has_sgroup() {
  _oneof_case_[0] = kSgroup;
}
inline void Message::clear_sgroup() {
  if (_internal_has_sgroup()) {
    if (GetArena() == nullptr) {
      delete content_.sgroup_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::SGroup* Message::release_sgroup() {
  // @@protoc_insertion_point(field_release:im.protocol.Message.sgroup)
  if (_internal_has_sgroup()) {
    clear_has_content();
      ::im::protocol::SGroup* temp = content_.sgroup_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.sgroup_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::SGroup& Message::_internal_sgroup() const {
  return _internal_has_sgroup()
      ? *content_.sgroup_
      : *reinterpret_cast< ::im::protocol::SGroup*>(&::im::protocol::_SGroup_default_instance_);
}
inline const ::im::protocol::SGroup& Message::sgroup() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.sgroup)
  return _internal_sgroup();
}
inline ::im::protocol::SGroup* Message::unsafe_arena_release_sgroup() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Message.sgroup)
  if (_internal_has_sgroup()) {
    clear_has_content();
    ::im::protocol::SGroup* temp = content_.sgroup_;
    content_.sgroup_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_sgroup(::im::protocol::SGroup* sgroup) {
  clear_content();
  if (sgroup) {
    set_has_sgroup();
    content_.sgroup_ = sgroup;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Message.sgroup)
}
inline ::im::protocol::SGroup* Message::_internal_mutable_sgroup() {
  if (!_internal_has_sgroup()) {
    clear_content();
    set_has_sgroup();
    content_.sgroup_ = CreateMaybeMessage< ::im::protocol::SGroup >(GetArena());
  }
  return content_.sgroup_;
}
inline ::im::protocol::SGroup* Message::mutable_sgroup() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Message.sgroup)
  return _internal_mutable_sgroup();
}

// .im.protocol.HeartBeat heartbeat = 14;
inline bool Message::_internal_has_heartbeat() const {
  return content_case() == kHeartbeat;
}
inline bool Message::has_heartbeat() const {
  return _internal_has_heartbeat();
}
inline void Message::set_has_heartbeat() {
  _oneof_case_[0] = kHeartbeat;
}
inline void Message::clear_heartbeat() {
  if (_internal_has_heartbeat()) {
    if (GetArena() == nullptr) {
      delete content_.heartbeat_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::HeartBeat* Message::release_heartbeat() {
  // @@protoc_insertion_point(field_release:im.protocol.Message.heartbeat)
  if (_internal_has_heartbeat()) {
    clear_has_content();
      ::im::protocol::HeartBeat* temp = content_.heartbeat_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.heartbeat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::HeartBeat& Message::_internal_heartbeat() const {
  return _internal_has_heartbeat()
      ? *content_.heartbeat_
      : *reinterpret_cast< ::im::protocol::HeartBeat*>(&::im::protocol::_HeartBeat_default_instance_);
}
inline const ::im::protocol::HeartBeat& Message::heartbeat() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.heartbeat)
  return _internal_heartbeat();
}
inline ::im::protocol::HeartBeat* Message::unsafe_arena_release_heartbeat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Message.heartbeat)
  if (_internal_has_heartbeat()) {
    clear_has_content();
    ::im::protocol::HeartBeat* temp = content_.heartbeat_;
    content_.heartbeat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_heartbeat(::im::protocol::HeartBeat* heartbeat) {
  clear_content();
  if (heartbeat) {
    set_has_heartbeat();
    content_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Message.heartbeat)
}
inline ::im::protocol::HeartBeat* Message::_internal_mutable_heartbeat() {
  if (!_internal_has_heartbeat()) {
    clear_content();
    set_has_heartbeat();
    content_.heartbeat_ = CreateMaybeMessage< ::im::protocol::HeartBeat >(GetArena());
  }
  return content_.heartbeat_;
}
inline ::im::protocol::HeartBeat* Message::mutable_heartbeat() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Message.heartbeat)
  return _internal_mutable_heartbeat();
}

inline bool Message::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void Message::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline Message::ContentCase Message::content_case() const {
  return Message::ContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// HeartBeat

// int32 id = 1;
inline void HeartBeat::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeartBeat::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeartBeat::id() const {
  // @@protoc_insertion_point(field_get:im.protocol.HeartBeat.id)
  return _internal_id();
}
inline void HeartBeat::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void HeartBeat::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.HeartBeat.id)
}

// -------------------------------------------------------------------

// Login

// int32 user_id = 1;
inline void Login::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Login::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Login::user_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.Login.user_id)
  return _internal_user_id();
}
inline void Login::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void Login::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.Login.user_id)
}

// string password = 2;
inline void Login::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Login::password() const {
  // @@protoc_insertion_point(field_get:im.protocol.Login.password)
  return _internal_password();
}
inline void Login::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:im.protocol.Login.password)
}
inline std::string* Login::mutable_password() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Login.password)
  return _internal_mutable_password();
}
inline const std::string& Login::_internal_password() const {
  return password_.Get();
}
inline void Login::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Login::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.Login.password)
}
inline void Login::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.Login.password)
}
inline void Login::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.Login.password)
}
inline std::string* Login::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Login::release_password() {
  // @@protoc_insertion_point(field_release:im.protocol.Login.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Login::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Login.password)
}
inline std::string* Login::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Login.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Login::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Login.password)
}

// -------------------------------------------------------------------

// URegister

// string username = 1;
inline void URegister::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& URegister::username() const {
  // @@protoc_insertion_point(field_get:im.protocol.URegister.username)
  return _internal_username();
}
inline void URegister::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:im.protocol.URegister.username)
}
inline std::string* URegister::mutable_username() {
  // @@protoc_insertion_point(field_mutable:im.protocol.URegister.username)
  return _internal_mutable_username();
}
inline const std::string& URegister::_internal_username() const {
  return username_.Get();
}
inline void URegister::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void URegister::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.URegister.username)
}
inline void URegister::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.URegister.username)
}
inline void URegister::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.URegister.username)
}
inline std::string* URegister::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* URegister::release_username() {
  // @@protoc_insertion_point(field_release:im.protocol.URegister.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void URegister::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.URegister.username)
}
inline std::string* URegister::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.URegister.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void URegister::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.URegister.username)
}

// string password = 2;
inline void URegister::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& URegister::password() const {
  // @@protoc_insertion_point(field_get:im.protocol.URegister.password)
  return _internal_password();
}
inline void URegister::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:im.protocol.URegister.password)
}
inline std::string* URegister::mutable_password() {
  // @@protoc_insertion_point(field_mutable:im.protocol.URegister.password)
  return _internal_mutable_password();
}
inline const std::string& URegister::_internal_password() const {
  return password_.Get();
}
inline void URegister::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void URegister::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.URegister.password)
}
inline void URegister::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.URegister.password)
}
inline void URegister::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.URegister.password)
}
inline std::string* URegister::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* URegister::release_password() {
  // @@protoc_insertion_point(field_release:im.protocol.URegister.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void URegister::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.URegister.password)
}
inline std::string* URegister::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.URegister.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void URegister::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.URegister.password)
}

// string introduction = 3;
inline void URegister::clear_introduction() {
  introduction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& URegister::introduction() const {
  // @@protoc_insertion_point(field_get:im.protocol.URegister.introduction)
  return _internal_introduction();
}
inline void URegister::set_introduction(const std::string& value) {
  _internal_set_introduction(value);
  // @@protoc_insertion_point(field_set:im.protocol.URegister.introduction)
}
inline std::string* URegister::mutable_introduction() {
  // @@protoc_insertion_point(field_mutable:im.protocol.URegister.introduction)
  return _internal_mutable_introduction();
}
inline const std::string& URegister::_internal_introduction() const {
  return introduction_.Get();
}
inline void URegister::_internal_set_introduction(const std::string& value) {
  
  introduction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void URegister::set_introduction(std::string&& value) {
  
  introduction_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.URegister.introduction)
}
inline void URegister::set_introduction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  introduction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.URegister.introduction)
}
inline void URegister::set_introduction(const char* value,
    size_t size) {
  
  introduction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.URegister.introduction)
}
inline std::string* URegister::_internal_mutable_introduction() {
  
  return introduction_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* URegister::release_introduction() {
  // @@protoc_insertion_point(field_release:im.protocol.URegister.introduction)
  return introduction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void URegister::set_allocated_introduction(std::string* introduction) {
  if (introduction != nullptr) {
    
  } else {
    
  }
  introduction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), introduction,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.URegister.introduction)
}
inline std::string* URegister::unsafe_arena_release_introduction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.URegister.introduction)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return introduction_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void URegister::unsafe_arena_set_allocated_introduction(
    std::string* introduction) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (introduction != nullptr) {
    
  } else {
    
  }
  introduction_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      introduction, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.URegister.introduction)
}

// -------------------------------------------------------------------

// GRegister

// int32 lord_id = 1;
inline void GRegister::clear_lord_id() {
  lord_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GRegister::_internal_lord_id() const {
  return lord_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GRegister::lord_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.GRegister.lord_id)
  return _internal_lord_id();
}
inline void GRegister::_internal_set_lord_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lord_id_ = value;
}
inline void GRegister::set_lord_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lord_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.GRegister.lord_id)
}

// string groupname = 2;
inline void GRegister::clear_groupname() {
  groupname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GRegister::groupname() const {
  // @@protoc_insertion_point(field_get:im.protocol.GRegister.groupname)
  return _internal_groupname();
}
inline void GRegister::set_groupname(const std::string& value) {
  _internal_set_groupname(value);
  // @@protoc_insertion_point(field_set:im.protocol.GRegister.groupname)
}
inline std::string* GRegister::mutable_groupname() {
  // @@protoc_insertion_point(field_mutable:im.protocol.GRegister.groupname)
  return _internal_mutable_groupname();
}
inline const std::string& GRegister::_internal_groupname() const {
  return groupname_.Get();
}
inline void GRegister::_internal_set_groupname(const std::string& value) {
  
  groupname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GRegister::set_groupname(std::string&& value) {
  
  groupname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.GRegister.groupname)
}
inline void GRegister::set_groupname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.GRegister.groupname)
}
inline void GRegister::set_groupname(const char* value,
    size_t size) {
  
  groupname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.GRegister.groupname)
}
inline std::string* GRegister::_internal_mutable_groupname() {
  
  return groupname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GRegister::release_groupname() {
  // @@protoc_insertion_point(field_release:im.protocol.GRegister.groupname)
  return groupname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GRegister::set_allocated_groupname(std::string* groupname) {
  if (groupname != nullptr) {
    
  } else {
    
  }
  groupname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.GRegister.groupname)
}
inline std::string* GRegister::unsafe_arena_release_groupname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.GRegister.groupname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return groupname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GRegister::unsafe_arena_set_allocated_groupname(
    std::string* groupname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (groupname != nullptr) {
    
  } else {
    
  }
  groupname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      groupname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.GRegister.groupname)
}

// string introduction = 3;
inline void GRegister::clear_introduction() {
  introduction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GRegister::introduction() const {
  // @@protoc_insertion_point(field_get:im.protocol.GRegister.introduction)
  return _internal_introduction();
}
inline void GRegister::set_introduction(const std::string& value) {
  _internal_set_introduction(value);
  // @@protoc_insertion_point(field_set:im.protocol.GRegister.introduction)
}
inline std::string* GRegister::mutable_introduction() {
  // @@protoc_insertion_point(field_mutable:im.protocol.GRegister.introduction)
  return _internal_mutable_introduction();
}
inline const std::string& GRegister::_internal_introduction() const {
  return introduction_.Get();
}
inline void GRegister::_internal_set_introduction(const std::string& value) {
  
  introduction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GRegister::set_introduction(std::string&& value) {
  
  introduction_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.GRegister.introduction)
}
inline void GRegister::set_introduction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  introduction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.GRegister.introduction)
}
inline void GRegister::set_introduction(const char* value,
    size_t size) {
  
  introduction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.GRegister.introduction)
}
inline std::string* GRegister::_internal_mutable_introduction() {
  
  return introduction_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GRegister::release_introduction() {
  // @@protoc_insertion_point(field_release:im.protocol.GRegister.introduction)
  return introduction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GRegister::set_allocated_introduction(std::string* introduction) {
  if (introduction != nullptr) {
    
  } else {
    
  }
  introduction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), introduction,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.GRegister.introduction)
}
inline std::string* GRegister::unsafe_arena_release_introduction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.GRegister.introduction)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return introduction_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GRegister::unsafe_arena_set_allocated_introduction(
    std::string* introduction) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (introduction != nullptr) {
    
  } else {
    
  }
  introduction_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      introduction, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.GRegister.introduction)
}

// -------------------------------------------------------------------

// UChat

// int32 sender_id = 1;
inline void UChat::clear_sender_id() {
  sender_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UChat::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UChat::sender_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.UChat.sender_id)
  return _internal_sender_id();
}
inline void UChat::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sender_id_ = value;
}
inline void UChat::set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.UChat.sender_id)
}

// int32 receiver_id = 2;
inline void UChat::clear_receiver_id() {
  receiver_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UChat::_internal_receiver_id() const {
  return receiver_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UChat::receiver_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.UChat.receiver_id)
  return _internal_receiver_id();
}
inline void UChat::_internal_set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  receiver_id_ = value;
}
inline void UChat::set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_receiver_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.UChat.receiver_id)
}

// string message = 3;
inline void UChat::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UChat::message() const {
  // @@protoc_insertion_point(field_get:im.protocol.UChat.message)
  return _internal_message();
}
inline void UChat::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:im.protocol.UChat.message)
}
inline std::string* UChat::mutable_message() {
  // @@protoc_insertion_point(field_mutable:im.protocol.UChat.message)
  return _internal_mutable_message();
}
inline const std::string& UChat::_internal_message() const {
  return message_.Get();
}
inline void UChat::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UChat::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.UChat.message)
}
inline void UChat::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.UChat.message)
}
inline void UChat::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.UChat.message)
}
inline std::string* UChat::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UChat::release_message() {
  // @@protoc_insertion_point(field_release:im.protocol.UChat.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UChat::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.UChat.message)
}
inline std::string* UChat::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.UChat.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UChat::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.UChat.message)
}

// int32 time = 4;
inline void UChat::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UChat::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UChat::time() const {
  // @@protoc_insertion_point(field_get:im.protocol.UChat.time)
  return _internal_time();
}
inline void UChat::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void UChat::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:im.protocol.UChat.time)
}

// -------------------------------------------------------------------

// GChat

// int32 sender_id = 1;
inline void GChat::clear_sender_id() {
  sender_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GChat::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GChat::sender_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.GChat.sender_id)
  return _internal_sender_id();
}
inline void GChat::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sender_id_ = value;
}
inline void GChat::set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.GChat.sender_id)
}

// int32 group_id = 2;
inline void GChat::clear_group_id() {
  group_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GChat::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GChat::group_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.GChat.group_id)
  return _internal_group_id();
}
inline void GChat::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  group_id_ = value;
}
inline void GChat::set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.GChat.group_id)
}

// string message = 3;
inline void GChat::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GChat::message() const {
  // @@protoc_insertion_point(field_get:im.protocol.GChat.message)
  return _internal_message();
}
inline void GChat::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:im.protocol.GChat.message)
}
inline std::string* GChat::mutable_message() {
  // @@protoc_insertion_point(field_mutable:im.protocol.GChat.message)
  return _internal_mutable_message();
}
inline const std::string& GChat::_internal_message() const {
  return message_.Get();
}
inline void GChat::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GChat::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.GChat.message)
}
inline void GChat::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.GChat.message)
}
inline void GChat::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.GChat.message)
}
inline std::string* GChat::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GChat::release_message() {
  // @@protoc_insertion_point(field_release:im.protocol.GChat.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GChat::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.GChat.message)
}
inline std::string* GChat::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.GChat.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GChat::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.GChat.message)
}

// int32 time = 4;
inline void GChat::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GChat::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GChat::time() const {
  // @@protoc_insertion_point(field_get:im.protocol.GChat.time)
  return _internal_time();
}
inline void GChat::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void GChat::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:im.protocol.GChat.time)
}

// -------------------------------------------------------------------

// AFriendFrom1

// int32 sender_id = 1;
inline void AFriendFrom1::clear_sender_id() {
  sender_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AFriendFrom1::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AFriendFrom1::sender_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.AFriendFrom1.sender_id)
  return _internal_sender_id();
}
inline void AFriendFrom1::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sender_id_ = value;
}
inline void AFriendFrom1::set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.AFriendFrom1.sender_id)
}

// int32 receiver_id = 2;
inline void AFriendFrom1::clear_receiver_id() {
  receiver_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AFriendFrom1::_internal_receiver_id() const {
  return receiver_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AFriendFrom1::receiver_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.AFriendFrom1.receiver_id)
  return _internal_receiver_id();
}
inline void AFriendFrom1::_internal_set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  receiver_id_ = value;
}
inline void AFriendFrom1::set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_receiver_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.AFriendFrom1.receiver_id)
}

// string message = 3;
inline void AFriendFrom1::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AFriendFrom1::message() const {
  // @@protoc_insertion_point(field_get:im.protocol.AFriendFrom1.message)
  return _internal_message();
}
inline void AFriendFrom1::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:im.protocol.AFriendFrom1.message)
}
inline std::string* AFriendFrom1::mutable_message() {
  // @@protoc_insertion_point(field_mutable:im.protocol.AFriendFrom1.message)
  return _internal_mutable_message();
}
inline const std::string& AFriendFrom1::_internal_message() const {
  return message_.Get();
}
inline void AFriendFrom1::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AFriendFrom1::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.AFriendFrom1.message)
}
inline void AFriendFrom1::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.AFriendFrom1.message)
}
inline void AFriendFrom1::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.AFriendFrom1.message)
}
inline std::string* AFriendFrom1::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AFriendFrom1::release_message() {
  // @@protoc_insertion_point(field_release:im.protocol.AFriendFrom1.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AFriendFrom1::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.AFriendFrom1.message)
}
inline std::string* AFriendFrom1::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.AFriendFrom1.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AFriendFrom1::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.AFriendFrom1.message)
}

// int32 time = 4;
inline void AFriendFrom1::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AFriendFrom1::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AFriendFrom1::time() const {
  // @@protoc_insertion_point(field_get:im.protocol.AFriendFrom1.time)
  return _internal_time();
}
inline void AFriendFrom1::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void AFriendFrom1::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:im.protocol.AFriendFrom1.time)
}

// -------------------------------------------------------------------

// AFriendFrom2

// int32 sender_id = 1;
inline void AFriendFrom2::clear_sender_id() {
  sender_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AFriendFrom2::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AFriendFrom2::sender_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.AFriendFrom2.sender_id)
  return _internal_sender_id();
}
inline void AFriendFrom2::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sender_id_ = value;
}
inline void AFriendFrom2::set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.AFriendFrom2.sender_id)
}

// int32 receiver_id = 2;
inline void AFriendFrom2::clear_receiver_id() {
  receiver_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AFriendFrom2::_internal_receiver_id() const {
  return receiver_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AFriendFrom2::receiver_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.AFriendFrom2.receiver_id)
  return _internal_receiver_id();
}
inline void AFriendFrom2::_internal_set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  receiver_id_ = value;
}
inline void AFriendFrom2::set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_receiver_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.AFriendFrom2.receiver_id)
}

// bool status = 3;
inline void AFriendFrom2::clear_status() {
  status_ = false;
}
inline bool AFriendFrom2::_internal_status() const {
  return status_;
}
inline bool AFriendFrom2::status() const {
  // @@protoc_insertion_point(field_get:im.protocol.AFriendFrom2.status)
  return _internal_status();
}
inline void AFriendFrom2::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void AFriendFrom2::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:im.protocol.AFriendFrom2.status)
}

// string message = 4;
inline void AFriendFrom2::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AFriendFrom2::message() const {
  // @@protoc_insertion_point(field_get:im.protocol.AFriendFrom2.message)
  return _internal_message();
}
inline void AFriendFrom2::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:im.protocol.AFriendFrom2.message)
}
inline std::string* AFriendFrom2::mutable_message() {
  // @@protoc_insertion_point(field_mutable:im.protocol.AFriendFrom2.message)
  return _internal_mutable_message();
}
inline const std::string& AFriendFrom2::_internal_message() const {
  return message_.Get();
}
inline void AFriendFrom2::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AFriendFrom2::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.AFriendFrom2.message)
}
inline void AFriendFrom2::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.AFriendFrom2.message)
}
inline void AFriendFrom2::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.AFriendFrom2.message)
}
inline std::string* AFriendFrom2::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AFriendFrom2::release_message() {
  // @@protoc_insertion_point(field_release:im.protocol.AFriendFrom2.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AFriendFrom2::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.AFriendFrom2.message)
}
inline std::string* AFriendFrom2::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.AFriendFrom2.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AFriendFrom2::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.AFriendFrom2.message)
}

// int32 time = 5;
inline void AFriendFrom2::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AFriendFrom2::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AFriendFrom2::time() const {
  // @@protoc_insertion_point(field_get:im.protocol.AFriendFrom2.time)
  return _internal_time();
}
inline void AFriendFrom2::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void AFriendFrom2::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:im.protocol.AFriendFrom2.time)
}

// -------------------------------------------------------------------

// AGroupFrom1

// int32 sender_id = 1;
inline void AGroupFrom1::clear_sender_id() {
  sender_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AGroupFrom1::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AGroupFrom1::sender_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.AGroupFrom1.sender_id)
  return _internal_sender_id();
}
inline void AGroupFrom1::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sender_id_ = value;
}
inline void AGroupFrom1::set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.AGroupFrom1.sender_id)
}

// int32 group_id = 2;
inline void AGroupFrom1::clear_group_id() {
  group_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AGroupFrom1::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AGroupFrom1::group_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.AGroupFrom1.group_id)
  return _internal_group_id();
}
inline void AGroupFrom1::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  group_id_ = value;
}
inline void AGroupFrom1::set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.AGroupFrom1.group_id)
}

// string message = 3;
inline void AGroupFrom1::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AGroupFrom1::message() const {
  // @@protoc_insertion_point(field_get:im.protocol.AGroupFrom1.message)
  return _internal_message();
}
inline void AGroupFrom1::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:im.protocol.AGroupFrom1.message)
}
inline std::string* AGroupFrom1::mutable_message() {
  // @@protoc_insertion_point(field_mutable:im.protocol.AGroupFrom1.message)
  return _internal_mutable_message();
}
inline const std::string& AGroupFrom1::_internal_message() const {
  return message_.Get();
}
inline void AGroupFrom1::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AGroupFrom1::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.AGroupFrom1.message)
}
inline void AGroupFrom1::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.AGroupFrom1.message)
}
inline void AGroupFrom1::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.AGroupFrom1.message)
}
inline std::string* AGroupFrom1::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AGroupFrom1::release_message() {
  // @@protoc_insertion_point(field_release:im.protocol.AGroupFrom1.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AGroupFrom1::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.AGroupFrom1.message)
}
inline std::string* AGroupFrom1::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.AGroupFrom1.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AGroupFrom1::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.AGroupFrom1.message)
}

// int32 time = 4;
inline void AGroupFrom1::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AGroupFrom1::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AGroupFrom1::time() const {
  // @@protoc_insertion_point(field_get:im.protocol.AGroupFrom1.time)
  return _internal_time();
}
inline void AGroupFrom1::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void AGroupFrom1::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:im.protocol.AGroupFrom1.time)
}

// -------------------------------------------------------------------

// AGroupFrom2

// int32 sender_id = 1;
inline void AGroupFrom2::clear_sender_id() {
  sender_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AGroupFrom2::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AGroupFrom2::sender_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.AGroupFrom2.sender_id)
  return _internal_sender_id();
}
inline void AGroupFrom2::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sender_id_ = value;
}
inline void AGroupFrom2::set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.AGroupFrom2.sender_id)
}

// int32 group_id = 2;
inline void AGroupFrom2::clear_group_id() {
  group_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AGroupFrom2::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AGroupFrom2::group_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.AGroupFrom2.group_id)
  return _internal_group_id();
}
inline void AGroupFrom2::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  group_id_ = value;
}
inline void AGroupFrom2::set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.AGroupFrom2.group_id)
}

// bool status = 3;
inline void AGroupFrom2::clear_status() {
  status_ = false;
}
inline bool AGroupFrom2::_internal_status() const {
  return status_;
}
inline bool AGroupFrom2::status() const {
  // @@protoc_insertion_point(field_get:im.protocol.AGroupFrom2.status)
  return _internal_status();
}
inline void AGroupFrom2::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void AGroupFrom2::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:im.protocol.AGroupFrom2.status)
}

// string message = 4;
inline void AGroupFrom2::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AGroupFrom2::message() const {
  // @@protoc_insertion_point(field_get:im.protocol.AGroupFrom2.message)
  return _internal_message();
}
inline void AGroupFrom2::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:im.protocol.AGroupFrom2.message)
}
inline std::string* AGroupFrom2::mutable_message() {
  // @@protoc_insertion_point(field_mutable:im.protocol.AGroupFrom2.message)
  return _internal_mutable_message();
}
inline const std::string& AGroupFrom2::_internal_message() const {
  return message_.Get();
}
inline void AGroupFrom2::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AGroupFrom2::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.AGroupFrom2.message)
}
inline void AGroupFrom2::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.AGroupFrom2.message)
}
inline void AGroupFrom2::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.AGroupFrom2.message)
}
inline std::string* AGroupFrom2::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AGroupFrom2::release_message() {
  // @@protoc_insertion_point(field_release:im.protocol.AGroupFrom2.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AGroupFrom2::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.AGroupFrom2.message)
}
inline std::string* AGroupFrom2::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.AGroupFrom2.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AGroupFrom2::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.AGroupFrom2.message)
}

// int32 time = 5;
inline void AGroupFrom2::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AGroupFrom2::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AGroupFrom2::time() const {
  // @@protoc_insertion_point(field_get:im.protocol.AGroupFrom2.time)
  return _internal_time();
}
inline void AGroupFrom2::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void AGroupFrom2::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:im.protocol.AGroupFrom2.time)
}

// -------------------------------------------------------------------

// SUser

// int32 sender_id = 1;
inline void SUser::clear_sender_id() {
  sender_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUser::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUser::sender_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.SUser.sender_id)
  return _internal_sender_id();
}
inline void SUser::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sender_id_ = value;
}
inline void SUser::set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.SUser.sender_id)
}

// string message = 2;
inline void SUser::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SUser::message() const {
  // @@protoc_insertion_point(field_get:im.protocol.SUser.message)
  return _internal_message();
}
inline void SUser::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:im.protocol.SUser.message)
}
inline std::string* SUser::mutable_message() {
  // @@protoc_insertion_point(field_mutable:im.protocol.SUser.message)
  return _internal_mutable_message();
}
inline const std::string& SUser::_internal_message() const {
  return message_.Get();
}
inline void SUser::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SUser::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.SUser.message)
}
inline void SUser::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.SUser.message)
}
inline void SUser::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.SUser.message)
}
inline std::string* SUser::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SUser::release_message() {
  // @@protoc_insertion_point(field_release:im.protocol.SUser.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SUser::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.SUser.message)
}
inline std::string* SUser::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.SUser.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SUser::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.SUser.message)
}

// -------------------------------------------------------------------

// SGroup

// int32 sender_id = 1;
inline void SGroup::clear_sender_id() {
  sender_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGroup::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGroup::sender_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.SGroup.sender_id)
  return _internal_sender_id();
}
inline void SGroup::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sender_id_ = value;
}
inline void SGroup::set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.SGroup.sender_id)
}

// string message = 2;
inline void SGroup::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SGroup::message() const {
  // @@protoc_insertion_point(field_get:im.protocol.SGroup.message)
  return _internal_message();
}
inline void SGroup::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:im.protocol.SGroup.message)
}
inline std::string* SGroup::mutable_message() {
  // @@protoc_insertion_point(field_mutable:im.protocol.SGroup.message)
  return _internal_mutable_message();
}
inline const std::string& SGroup::_internal_message() const {
  return message_.Get();
}
inline void SGroup::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SGroup::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.SGroup.message)
}
inline void SGroup::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.SGroup.message)
}
inline void SGroup::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.SGroup.message)
}
inline std::string* SGroup::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SGroup::release_message() {
  // @@protoc_insertion_point(field_release:im.protocol.SGroup.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SGroup::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.SGroup.message)
}
inline std::string* SGroup::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.SGroup.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SGroup::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.SGroup.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace im

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::im::protocol::Message_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::im::protocol::Message_Type>() {
  return ::im::protocol::Message_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
