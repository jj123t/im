// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ack.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ack_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ack_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ack_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ack_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ack_2eproto;
namespace im {
namespace protocol {
class Ack;
struct AckDefaultTypeInternal;
extern AckDefaultTypeInternal _Ack_default_instance_;
class ackAddFriendToRecv;
struct ackAddFriendToRecvDefaultTypeInternal;
extern ackAddFriendToRecvDefaultTypeInternal _ackAddFriendToRecv_default_instance_;
class ackAddFriendToSend;
struct ackAddFriendToSendDefaultTypeInternal;
extern ackAddFriendToSendDefaultTypeInternal _ackAddFriendToSend_default_instance_;
class ackAddGroupToRecv;
struct ackAddGroupToRecvDefaultTypeInternal;
extern ackAddGroupToRecvDefaultTypeInternal _ackAddGroupToRecv_default_instance_;
class ackAddGroupToSend;
struct ackAddGroupToSendDefaultTypeInternal;
extern ackAddGroupToSendDefaultTypeInternal _ackAddGroupToSend_default_instance_;
class ackFileTransfer;
struct ackFileTransferDefaultTypeInternal;
extern ackFileTransferDefaultTypeInternal _ackFileTransfer_default_instance_;
class ackGroupChat;
struct ackGroupChatDefaultTypeInternal;
extern ackGroupChatDefaultTypeInternal _ackGroupChat_default_instance_;
class ackGroupInfo;
struct ackGroupInfoDefaultTypeInternal;
extern ackGroupInfoDefaultTypeInternal _ackGroupInfo_default_instance_;
class ackLoginRequest;
struct ackLoginRequestDefaultTypeInternal;
extern ackLoginRequestDefaultTypeInternal _ackLoginRequest_default_instance_;
class ackSingleChat;
struct ackSingleChatDefaultTypeInternal;
extern ackSingleChatDefaultTypeInternal _ackSingleChat_default_instance_;
class ackUserInfo;
struct ackUserInfoDefaultTypeInternal;
extern ackUserInfoDefaultTypeInternal _ackUserInfo_default_instance_;
}  // namespace protocol
}  // namespace im
PROTOBUF_NAMESPACE_OPEN
template<> ::im::protocol::Ack* Arena::CreateMaybeMessage<::im::protocol::Ack>(Arena*);
template<> ::im::protocol::ackAddFriendToRecv* Arena::CreateMaybeMessage<::im::protocol::ackAddFriendToRecv>(Arena*);
template<> ::im::protocol::ackAddFriendToSend* Arena::CreateMaybeMessage<::im::protocol::ackAddFriendToSend>(Arena*);
template<> ::im::protocol::ackAddGroupToRecv* Arena::CreateMaybeMessage<::im::protocol::ackAddGroupToRecv>(Arena*);
template<> ::im::protocol::ackAddGroupToSend* Arena::CreateMaybeMessage<::im::protocol::ackAddGroupToSend>(Arena*);
template<> ::im::protocol::ackFileTransfer* Arena::CreateMaybeMessage<::im::protocol::ackFileTransfer>(Arena*);
template<> ::im::protocol::ackGroupChat* Arena::CreateMaybeMessage<::im::protocol::ackGroupChat>(Arena*);
template<> ::im::protocol::ackGroupInfo* Arena::CreateMaybeMessage<::im::protocol::ackGroupInfo>(Arena*);
template<> ::im::protocol::ackLoginRequest* Arena::CreateMaybeMessage<::im::protocol::ackLoginRequest>(Arena*);
template<> ::im::protocol::ackSingleChat* Arena::CreateMaybeMessage<::im::protocol::ackSingleChat>(Arena*);
template<> ::im::protocol::ackUserInfo* Arena::CreateMaybeMessage<::im::protocol::ackUserInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace im {
namespace protocol {

enum Ack_Type : int {
  Ack_Type_USER_INFO = 0,
  Ack_Type_GROUP_INFO = 1,
  Ack_Type_FILE_TRANSFER = 2,
  Ack_Type_ADD_FRIEND_RECV = 3,
  Ack_Type_ADD_FRIEND_SEND = 4,
  Ack_Type_ADD_GROUP_RECV = 5,
  Ack_Type_ADD_GROUP_SEND = 6,
  Ack_Type_SINGLE_CHAT = 7,
  Ack_Type_GROUP_CHAT = 8,
  Ack_Type_LOGIN_REQUEST = 9,
  Ack_Type_HEARTBEAT = 10,
  Ack_Type_Ack_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Ack_Type_Ack_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Ack_Type_IsValid(int value);
constexpr Ack_Type Ack_Type_Type_MIN = Ack_Type_USER_INFO;
constexpr Ack_Type Ack_Type_Type_MAX = Ack_Type_HEARTBEAT;
constexpr int Ack_Type_Type_ARRAYSIZE = Ack_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Ack_Type_descriptor();
template<typename T>
inline const std::string& Ack_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Ack_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Ack_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Ack_Type_descriptor(), enum_t_value);
}
inline bool Ack_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Ack_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Ack_Type>(
    Ack_Type_descriptor(), name, value);
}
// ===================================================================

class Ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.Ack) */ {
 public:
  inline Ack() : Ack(nullptr) {}
  ~Ack() override;
  explicit PROTOBUF_CONSTEXPR Ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ack(const Ack& from);
  Ack(Ack&& from) noexcept
    : Ack() {
    *this = ::std::move(from);
  }

  inline Ack& operator=(const Ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ack& operator=(Ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ack& default_instance() {
    return *internal_default_instance();
  }
  enum ContentCase {
    kUserInfo = 3,
    kGroupInfo = 4,
    kFileTransfer = 5,
    kAddFriendRecv = 6,
    kAddFriendSend = 7,
    kAddGroupRecv = 8,
    kAddGroupSend = 9,
    kLoginRequest = 10,
    kSingleChat = 11,
    kGroupChat = 12,
    CONTENT_NOT_SET = 0,
  };

  static inline const Ack* internal_default_instance() {
    return reinterpret_cast<const Ack*>(
               &_Ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Ack& a, Ack& b) {
    a.Swap(&b);
  }
  inline void Swap(Ack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ack& from) {
    Ack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.Ack";
  }
  protected:
  explicit Ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Ack_Type Type;
  static constexpr Type USER_INFO =
    Ack_Type_USER_INFO;
  static constexpr Type GROUP_INFO =
    Ack_Type_GROUP_INFO;
  static constexpr Type FILE_TRANSFER =
    Ack_Type_FILE_TRANSFER;
  static constexpr Type ADD_FRIEND_RECV =
    Ack_Type_ADD_FRIEND_RECV;
  static constexpr Type ADD_FRIEND_SEND =
    Ack_Type_ADD_FRIEND_SEND;
  static constexpr Type ADD_GROUP_RECV =
    Ack_Type_ADD_GROUP_RECV;
  static constexpr Type ADD_GROUP_SEND =
    Ack_Type_ADD_GROUP_SEND;
  static constexpr Type SINGLE_CHAT =
    Ack_Type_SINGLE_CHAT;
  static constexpr Type GROUP_CHAT =
    Ack_Type_GROUP_CHAT;
  static constexpr Type LOGIN_REQUEST =
    Ack_Type_LOGIN_REQUEST;
  static constexpr Type HEARTBEAT =
    Ack_Type_HEARTBEAT;
  static inline bool Type_IsValid(int value) {
    return Ack_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Ack_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Ack_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Ack_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Ack_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Ack_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Ack_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 2,
    kTypeFieldNumber = 1,
    kUserInfoFieldNumber = 3,
    kGroupInfoFieldNumber = 4,
    kFileTransferFieldNumber = 5,
    kAddFriendRecvFieldNumber = 6,
    kAddFriendSendFieldNumber = 7,
    kAddGroupRecvFieldNumber = 8,
    kAddGroupSendFieldNumber = 9,
    kLoginRequestFieldNumber = 10,
    kSingleChatFieldNumber = 11,
    kGroupChatFieldNumber = 12,
  };
  // .google.protobuf.Timestamp timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .im.protocol.Ack.Type type = 1;
  void clear_type();
  ::im::protocol::Ack_Type type() const;
  void set_type(::im::protocol::Ack_Type value);
  private:
  ::im::protocol::Ack_Type _internal_type() const;
  void _internal_set_type(::im::protocol::Ack_Type value);
  public:

  // .im.protocol.ackUserInfo user_info = 3;
  bool has_user_info() const;
  private:
  bool _internal_has_user_info() const;
  public:
  void clear_user_info();
  const ::im::protocol::ackUserInfo& user_info() const;
  PROTOBUF_NODISCARD ::im::protocol::ackUserInfo* release_user_info();
  ::im::protocol::ackUserInfo* mutable_user_info();
  void set_allocated_user_info(::im::protocol::ackUserInfo* user_info);
  private:
  const ::im::protocol::ackUserInfo& _internal_user_info() const;
  ::im::protocol::ackUserInfo* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::im::protocol::ackUserInfo* user_info);
  ::im::protocol::ackUserInfo* unsafe_arena_release_user_info();

  // .im.protocol.ackGroupInfo group_info = 4;
  bool has_group_info() const;
  private:
  bool _internal_has_group_info() const;
  public:
  void clear_group_info();
  const ::im::protocol::ackGroupInfo& group_info() const;
  PROTOBUF_NODISCARD ::im::protocol::ackGroupInfo* release_group_info();
  ::im::protocol::ackGroupInfo* mutable_group_info();
  void set_allocated_group_info(::im::protocol::ackGroupInfo* group_info);
  private:
  const ::im::protocol::ackGroupInfo& _internal_group_info() const;
  ::im::protocol::ackGroupInfo* _internal_mutable_group_info();
  public:
  void unsafe_arena_set_allocated_group_info(
      ::im::protocol::ackGroupInfo* group_info);
  ::im::protocol::ackGroupInfo* unsafe_arena_release_group_info();

  // .im.protocol.ackFileTransfer file_transfer = 5;
  bool has_file_transfer() const;
  private:
  bool _internal_has_file_transfer() const;
  public:
  void clear_file_transfer();
  const ::im::protocol::ackFileTransfer& file_transfer() const;
  PROTOBUF_NODISCARD ::im::protocol::ackFileTransfer* release_file_transfer();
  ::im::protocol::ackFileTransfer* mutable_file_transfer();
  void set_allocated_file_transfer(::im::protocol::ackFileTransfer* file_transfer);
  private:
  const ::im::protocol::ackFileTransfer& _internal_file_transfer() const;
  ::im::protocol::ackFileTransfer* _internal_mutable_file_transfer();
  public:
  void unsafe_arena_set_allocated_file_transfer(
      ::im::protocol::ackFileTransfer* file_transfer);
  ::im::protocol::ackFileTransfer* unsafe_arena_release_file_transfer();

  // .im.protocol.ackAddFriendToRecv add_friend_recv = 6;
  bool has_add_friend_recv() const;
  private:
  bool _internal_has_add_friend_recv() const;
  public:
  void clear_add_friend_recv();
  const ::im::protocol::ackAddFriendToRecv& add_friend_recv() const;
  PROTOBUF_NODISCARD ::im::protocol::ackAddFriendToRecv* release_add_friend_recv();
  ::im::protocol::ackAddFriendToRecv* mutable_add_friend_recv();
  void set_allocated_add_friend_recv(::im::protocol::ackAddFriendToRecv* add_friend_recv);
  private:
  const ::im::protocol::ackAddFriendToRecv& _internal_add_friend_recv() const;
  ::im::protocol::ackAddFriendToRecv* _internal_mutable_add_friend_recv();
  public:
  void unsafe_arena_set_allocated_add_friend_recv(
      ::im::protocol::ackAddFriendToRecv* add_friend_recv);
  ::im::protocol::ackAddFriendToRecv* unsafe_arena_release_add_friend_recv();

  // .im.protocol.ackAddFriendToSend add_friend_send = 7;
  bool has_add_friend_send() const;
  private:
  bool _internal_has_add_friend_send() const;
  public:
  void clear_add_friend_send();
  const ::im::protocol::ackAddFriendToSend& add_friend_send() const;
  PROTOBUF_NODISCARD ::im::protocol::ackAddFriendToSend* release_add_friend_send();
  ::im::protocol::ackAddFriendToSend* mutable_add_friend_send();
  void set_allocated_add_friend_send(::im::protocol::ackAddFriendToSend* add_friend_send);
  private:
  const ::im::protocol::ackAddFriendToSend& _internal_add_friend_send() const;
  ::im::protocol::ackAddFriendToSend* _internal_mutable_add_friend_send();
  public:
  void unsafe_arena_set_allocated_add_friend_send(
      ::im::protocol::ackAddFriendToSend* add_friend_send);
  ::im::protocol::ackAddFriendToSend* unsafe_arena_release_add_friend_send();

  // .im.protocol.ackAddGroupToRecv add_group_recv = 8;
  bool has_add_group_recv() const;
  private:
  bool _internal_has_add_group_recv() const;
  public:
  void clear_add_group_recv();
  const ::im::protocol::ackAddGroupToRecv& add_group_recv() const;
  PROTOBUF_NODISCARD ::im::protocol::ackAddGroupToRecv* release_add_group_recv();
  ::im::protocol::ackAddGroupToRecv* mutable_add_group_recv();
  void set_allocated_add_group_recv(::im::protocol::ackAddGroupToRecv* add_group_recv);
  private:
  const ::im::protocol::ackAddGroupToRecv& _internal_add_group_recv() const;
  ::im::protocol::ackAddGroupToRecv* _internal_mutable_add_group_recv();
  public:
  void unsafe_arena_set_allocated_add_group_recv(
      ::im::protocol::ackAddGroupToRecv* add_group_recv);
  ::im::protocol::ackAddGroupToRecv* unsafe_arena_release_add_group_recv();

  // .im.protocol.ackAddGroupToSend add_group_send = 9;
  bool has_add_group_send() const;
  private:
  bool _internal_has_add_group_send() const;
  public:
  void clear_add_group_send();
  const ::im::protocol::ackAddGroupToSend& add_group_send() const;
  PROTOBUF_NODISCARD ::im::protocol::ackAddGroupToSend* release_add_group_send();
  ::im::protocol::ackAddGroupToSend* mutable_add_group_send();
  void set_allocated_add_group_send(::im::protocol::ackAddGroupToSend* add_group_send);
  private:
  const ::im::protocol::ackAddGroupToSend& _internal_add_group_send() const;
  ::im::protocol::ackAddGroupToSend* _internal_mutable_add_group_send();
  public:
  void unsafe_arena_set_allocated_add_group_send(
      ::im::protocol::ackAddGroupToSend* add_group_send);
  ::im::protocol::ackAddGroupToSend* unsafe_arena_release_add_group_send();

  // .im.protocol.ackLoginRequest login_request = 10;
  bool has_login_request() const;
  private:
  bool _internal_has_login_request() const;
  public:
  void clear_login_request();
  const ::im::protocol::ackLoginRequest& login_request() const;
  PROTOBUF_NODISCARD ::im::protocol::ackLoginRequest* release_login_request();
  ::im::protocol::ackLoginRequest* mutable_login_request();
  void set_allocated_login_request(::im::protocol::ackLoginRequest* login_request);
  private:
  const ::im::protocol::ackLoginRequest& _internal_login_request() const;
  ::im::protocol::ackLoginRequest* _internal_mutable_login_request();
  public:
  void unsafe_arena_set_allocated_login_request(
      ::im::protocol::ackLoginRequest* login_request);
  ::im::protocol::ackLoginRequest* unsafe_arena_release_login_request();

  // .im.protocol.ackSingleChat single_chat = 11;
  bool has_single_chat() const;
  private:
  bool _internal_has_single_chat() const;
  public:
  void clear_single_chat();
  const ::im::protocol::ackSingleChat& single_chat() const;
  PROTOBUF_NODISCARD ::im::protocol::ackSingleChat* release_single_chat();
  ::im::protocol::ackSingleChat* mutable_single_chat();
  void set_allocated_single_chat(::im::protocol::ackSingleChat* single_chat);
  private:
  const ::im::protocol::ackSingleChat& _internal_single_chat() const;
  ::im::protocol::ackSingleChat* _internal_mutable_single_chat();
  public:
  void unsafe_arena_set_allocated_single_chat(
      ::im::protocol::ackSingleChat* single_chat);
  ::im::protocol::ackSingleChat* unsafe_arena_release_single_chat();

  // .im.protocol.ackGroupChat group_chat = 12;
  bool has_group_chat() const;
  private:
  bool _internal_has_group_chat() const;
  public:
  void clear_group_chat();
  const ::im::protocol::ackGroupChat& group_chat() const;
  PROTOBUF_NODISCARD ::im::protocol::ackGroupChat* release_group_chat();
  ::im::protocol::ackGroupChat* mutable_group_chat();
  void set_allocated_group_chat(::im::protocol::ackGroupChat* group_chat);
  private:
  const ::im::protocol::ackGroupChat& _internal_group_chat() const;
  ::im::protocol::ackGroupChat* _internal_mutable_group_chat();
  public:
  void unsafe_arena_set_allocated_group_chat(
      ::im::protocol::ackGroupChat* group_chat);
  ::im::protocol::ackGroupChat* unsafe_arena_release_group_chat();

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:im.protocol.Ack)
 private:
  class _Internal;
  void set_has_user_info();
  void set_has_group_info();
  void set_has_file_transfer();
  void set_has_add_friend_recv();
  void set_has_add_friend_send();
  void set_has_add_group_recv();
  void set_has_add_group_send();
  void set_has_login_request();
  void set_has_single_chat();
  void set_has_group_chat();

  inline bool has_content() const;
  inline void clear_has_content();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
    int type_;
    union ContentUnion {
      constexpr ContentUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::im::protocol::ackUserInfo* user_info_;
      ::im::protocol::ackGroupInfo* group_info_;
      ::im::protocol::ackFileTransfer* file_transfer_;
      ::im::protocol::ackAddFriendToRecv* add_friend_recv_;
      ::im::protocol::ackAddFriendToSend* add_friend_send_;
      ::im::protocol::ackAddGroupToRecv* add_group_recv_;
      ::im::protocol::ackAddGroupToSend* add_group_send_;
      ::im::protocol::ackLoginRequest* login_request_;
      ::im::protocol::ackSingleChat* single_chat_;
      ::im::protocol::ackGroupChat* group_chat_;
    } content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ack_2eproto;
};
// -------------------------------------------------------------------

class ackSingleChat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.ackSingleChat) */ {
 public:
  inline ackSingleChat() : ackSingleChat(nullptr) {}
  ~ackSingleChat() override;
  explicit PROTOBUF_CONSTEXPR ackSingleChat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ackSingleChat(const ackSingleChat& from);
  ackSingleChat(ackSingleChat&& from) noexcept
    : ackSingleChat() {
    *this = ::std::move(from);
  }

  inline ackSingleChat& operator=(const ackSingleChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ackSingleChat& operator=(ackSingleChat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ackSingleChat& default_instance() {
    return *internal_default_instance();
  }
  static inline const ackSingleChat* internal_default_instance() {
    return reinterpret_cast<const ackSingleChat*>(
               &_ackSingleChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ackSingleChat& a, ackSingleChat& b) {
    a.Swap(&b);
  }
  inline void Swap(ackSingleChat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ackSingleChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ackSingleChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ackSingleChat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ackSingleChat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ackSingleChat& from) {
    ackSingleChat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ackSingleChat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.ackSingleChat";
  }
  protected:
  explicit ackSingleChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 3,
    kSenderIdFieldNumber = 1,
    kReceiverIdFieldNumber = 2,
    kTimeFieldNumber = 4,
  };
  // string content = 3;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int32 sender_id = 1;
  void clear_sender_id();
  int32_t sender_id() const;
  void set_sender_id(int32_t value);
  private:
  int32_t _internal_sender_id() const;
  void _internal_set_sender_id(int32_t value);
  public:

  // int32 receiver_id = 2;
  void clear_receiver_id();
  int32_t receiver_id() const;
  void set_receiver_id(int32_t value);
  private:
  int32_t _internal_receiver_id() const;
  void _internal_set_receiver_id(int32_t value);
  public:

  // int32 time = 4;
  void clear_time();
  int32_t time() const;
  void set_time(int32_t value);
  private:
  int32_t _internal_time() const;
  void _internal_set_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.ackSingleChat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    int32_t sender_id_;
    int32_t receiver_id_;
    int32_t time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ack_2eproto;
};
// -------------------------------------------------------------------

class ackUserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.ackUserInfo) */ {
 public:
  inline ackUserInfo() : ackUserInfo(nullptr) {}
  ~ackUserInfo() override;
  explicit PROTOBUF_CONSTEXPR ackUserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ackUserInfo(const ackUserInfo& from);
  ackUserInfo(ackUserInfo&& from) noexcept
    : ackUserInfo() {
    *this = ::std::move(from);
  }

  inline ackUserInfo& operator=(const ackUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ackUserInfo& operator=(ackUserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ackUserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ackUserInfo* internal_default_instance() {
    return reinterpret_cast<const ackUserInfo*>(
               &_ackUserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ackUserInfo& a, ackUserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ackUserInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ackUserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ackUserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ackUserInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ackUserInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ackUserInfo& from) {
    ackUserInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ackUserInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.ackUserInfo";
  }
  protected:
  explicit ackUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kContentFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string username = 2;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string content = 3;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.ackUserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ack_2eproto;
};
// -------------------------------------------------------------------

class ackGroupChat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.ackGroupChat) */ {
 public:
  inline ackGroupChat() : ackGroupChat(nullptr) {}
  ~ackGroupChat() override;
  explicit PROTOBUF_CONSTEXPR ackGroupChat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ackGroupChat(const ackGroupChat& from);
  ackGroupChat(ackGroupChat&& from) noexcept
    : ackGroupChat() {
    *this = ::std::move(from);
  }

  inline ackGroupChat& operator=(const ackGroupChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ackGroupChat& operator=(ackGroupChat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ackGroupChat& default_instance() {
    return *internal_default_instance();
  }
  static inline const ackGroupChat* internal_default_instance() {
    return reinterpret_cast<const ackGroupChat*>(
               &_ackGroupChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ackGroupChat& a, ackGroupChat& b) {
    a.Swap(&b);
  }
  inline void Swap(ackGroupChat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ackGroupChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ackGroupChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ackGroupChat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ackGroupChat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ackGroupChat& from) {
    ackGroupChat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ackGroupChat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.ackGroupChat";
  }
  protected:
  explicit ackGroupChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 3,
    kSenderIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kTimeFieldNumber = 4,
  };
  // string content = 3;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int32 sender_id = 1;
  void clear_sender_id();
  int32_t sender_id() const;
  void set_sender_id(int32_t value);
  private:
  int32_t _internal_sender_id() const;
  void _internal_set_sender_id(int32_t value);
  public:

  // int32 group_id = 2;
  void clear_group_id();
  int32_t group_id() const;
  void set_group_id(int32_t value);
  private:
  int32_t _internal_group_id() const;
  void _internal_set_group_id(int32_t value);
  public:

  // int32 time = 4;
  void clear_time();
  int32_t time() const;
  void set_time(int32_t value);
  private:
  int32_t _internal_time() const;
  void _internal_set_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.ackGroupChat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    int32_t sender_id_;
    int32_t group_id_;
    int32_t time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ack_2eproto;
};
// -------------------------------------------------------------------

class ackGroupInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.ackGroupInfo) */ {
 public:
  inline ackGroupInfo() : ackGroupInfo(nullptr) {}
  ~ackGroupInfo() override;
  explicit PROTOBUF_CONSTEXPR ackGroupInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ackGroupInfo(const ackGroupInfo& from);
  ackGroupInfo(ackGroupInfo&& from) noexcept
    : ackGroupInfo() {
    *this = ::std::move(from);
  }

  inline ackGroupInfo& operator=(const ackGroupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ackGroupInfo& operator=(ackGroupInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ackGroupInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ackGroupInfo* internal_default_instance() {
    return reinterpret_cast<const ackGroupInfo*>(
               &_ackGroupInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ackGroupInfo& a, ackGroupInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ackGroupInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ackGroupInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ackGroupInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ackGroupInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ackGroupInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ackGroupInfo& from) {
    ackGroupInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ackGroupInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.ackGroupInfo";
  }
  protected:
  explicit ackGroupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupnameFieldNumber = 2,
    kContentFieldNumber = 3,
    kGroupIdFieldNumber = 1,
  };
  // string groupname = 2;
  void clear_groupname();
  const std::string& groupname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_groupname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_groupname();
  PROTOBUF_NODISCARD std::string* release_groupname();
  void set_allocated_groupname(std::string* groupname);
  private:
  const std::string& _internal_groupname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_groupname(const std::string& value);
  std::string* _internal_mutable_groupname();
  public:

  // string content = 3;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int32 group_id = 1;
  void clear_group_id();
  int32_t group_id() const;
  void set_group_id(int32_t value);
  private:
  int32_t _internal_group_id() const;
  void _internal_set_group_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.ackGroupInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    int32_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ack_2eproto;
};
// -------------------------------------------------------------------

class ackFileTransfer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.ackFileTransfer) */ {
 public:
  inline ackFileTransfer() : ackFileTransfer(nullptr) {}
  ~ackFileTransfer() override;
  explicit PROTOBUF_CONSTEXPR ackFileTransfer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ackFileTransfer(const ackFileTransfer& from);
  ackFileTransfer(ackFileTransfer&& from) noexcept
    : ackFileTransfer() {
    *this = ::std::move(from);
  }

  inline ackFileTransfer& operator=(const ackFileTransfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ackFileTransfer& operator=(ackFileTransfer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ackFileTransfer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ackFileTransfer* internal_default_instance() {
    return reinterpret_cast<const ackFileTransfer*>(
               &_ackFileTransfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ackFileTransfer& a, ackFileTransfer& b) {
    a.Swap(&b);
  }
  inline void Swap(ackFileTransfer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ackFileTransfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ackFileTransfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ackFileTransfer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ackFileTransfer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ackFileTransfer& from) {
    ackFileTransfer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ackFileTransfer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.ackFileTransfer";
  }
  protected:
  explicit ackFileTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 3,
    kSenderIdFieldNumber = 1,
    kReceiverIdFieldNumber = 2,
    kStatusFieldNumber = 4,
  };
  // string file_name = 3;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // int32 sender_id = 1;
  void clear_sender_id();
  int32_t sender_id() const;
  void set_sender_id(int32_t value);
  private:
  int32_t _internal_sender_id() const;
  void _internal_set_sender_id(int32_t value);
  public:

  // int32 receiver_id = 2;
  void clear_receiver_id();
  int32_t receiver_id() const;
  void set_receiver_id(int32_t value);
  private:
  int32_t _internal_receiver_id() const;
  void _internal_set_receiver_id(int32_t value);
  public:

  // bool status = 4;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.ackFileTransfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
    int32_t sender_id_;
    int32_t receiver_id_;
    bool status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ack_2eproto;
};
// -------------------------------------------------------------------

class ackAddFriendToRecv final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.ackAddFriendToRecv) */ {
 public:
  inline ackAddFriendToRecv() : ackAddFriendToRecv(nullptr) {}
  ~ackAddFriendToRecv() override;
  explicit PROTOBUF_CONSTEXPR ackAddFriendToRecv(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ackAddFriendToRecv(const ackAddFriendToRecv& from);
  ackAddFriendToRecv(ackAddFriendToRecv&& from) noexcept
    : ackAddFriendToRecv() {
    *this = ::std::move(from);
  }

  inline ackAddFriendToRecv& operator=(const ackAddFriendToRecv& from) {
    CopyFrom(from);
    return *this;
  }
  inline ackAddFriendToRecv& operator=(ackAddFriendToRecv&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ackAddFriendToRecv& default_instance() {
    return *internal_default_instance();
  }
  static inline const ackAddFriendToRecv* internal_default_instance() {
    return reinterpret_cast<const ackAddFriendToRecv*>(
               &_ackAddFriendToRecv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ackAddFriendToRecv& a, ackAddFriendToRecv& b) {
    a.Swap(&b);
  }
  inline void Swap(ackAddFriendToRecv* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ackAddFriendToRecv* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ackAddFriendToRecv* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ackAddFriendToRecv>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ackAddFriendToRecv& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ackAddFriendToRecv& from) {
    ackAddFriendToRecv::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ackAddFriendToRecv* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.ackAddFriendToRecv";
  }
  protected:
  explicit ackAddFriendToRecv(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSenderIdFieldNumber = 1,
    kTimeFieldNumber = 3,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 sender_id = 1;
  void clear_sender_id();
  int32_t sender_id() const;
  void set_sender_id(int32_t value);
  private:
  int32_t _internal_sender_id() const;
  void _internal_set_sender_id(int32_t value);
  public:

  // int32 time = 3;
  void clear_time();
  int32_t time() const;
  void set_time(int32_t value);
  private:
  int32_t _internal_time() const;
  void _internal_set_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.ackAddFriendToRecv)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int32_t sender_id_;
    int32_t time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ack_2eproto;
};
// -------------------------------------------------------------------

class ackAddFriendToSend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.ackAddFriendToSend) */ {
 public:
  inline ackAddFriendToSend() : ackAddFriendToSend(nullptr) {}
  ~ackAddFriendToSend() override;
  explicit PROTOBUF_CONSTEXPR ackAddFriendToSend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ackAddFriendToSend(const ackAddFriendToSend& from);
  ackAddFriendToSend(ackAddFriendToSend&& from) noexcept
    : ackAddFriendToSend() {
    *this = ::std::move(from);
  }

  inline ackAddFriendToSend& operator=(const ackAddFriendToSend& from) {
    CopyFrom(from);
    return *this;
  }
  inline ackAddFriendToSend& operator=(ackAddFriendToSend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ackAddFriendToSend& default_instance() {
    return *internal_default_instance();
  }
  static inline const ackAddFriendToSend* internal_default_instance() {
    return reinterpret_cast<const ackAddFriendToSend*>(
               &_ackAddFriendToSend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ackAddFriendToSend& a, ackAddFriendToSend& b) {
    a.Swap(&b);
  }
  inline void Swap(ackAddFriendToSend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ackAddFriendToSend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ackAddFriendToSend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ackAddFriendToSend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ackAddFriendToSend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ackAddFriendToSend& from) {
    ackAddFriendToSend::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ackAddFriendToSend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.ackAddFriendToSend";
  }
  protected:
  explicit ackAddFriendToSend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kReceiverIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 receiver_id = 1;
  void clear_receiver_id();
  int32_t receiver_id() const;
  void set_receiver_id(int32_t value);
  private:
  int32_t _internal_receiver_id() const;
  void _internal_set_receiver_id(int32_t value);
  public:

  // bool status = 2;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.ackAddFriendToSend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int32_t receiver_id_;
    bool status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ack_2eproto;
};
// -------------------------------------------------------------------

class ackAddGroupToRecv final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.ackAddGroupToRecv) */ {
 public:
  inline ackAddGroupToRecv() : ackAddGroupToRecv(nullptr) {}
  ~ackAddGroupToRecv() override;
  explicit PROTOBUF_CONSTEXPR ackAddGroupToRecv(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ackAddGroupToRecv(const ackAddGroupToRecv& from);
  ackAddGroupToRecv(ackAddGroupToRecv&& from) noexcept
    : ackAddGroupToRecv() {
    *this = ::std::move(from);
  }

  inline ackAddGroupToRecv& operator=(const ackAddGroupToRecv& from) {
    CopyFrom(from);
    return *this;
  }
  inline ackAddGroupToRecv& operator=(ackAddGroupToRecv&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ackAddGroupToRecv& default_instance() {
    return *internal_default_instance();
  }
  static inline const ackAddGroupToRecv* internal_default_instance() {
    return reinterpret_cast<const ackAddGroupToRecv*>(
               &_ackAddGroupToRecv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ackAddGroupToRecv& a, ackAddGroupToRecv& b) {
    a.Swap(&b);
  }
  inline void Swap(ackAddGroupToRecv* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ackAddGroupToRecv* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ackAddGroupToRecv* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ackAddGroupToRecv>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ackAddGroupToRecv& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ackAddGroupToRecv& from) {
    ackAddGroupToRecv::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ackAddGroupToRecv* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.ackAddGroupToRecv";
  }
  protected:
  explicit ackAddGroupToRecv(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSenderIdFieldNumber = 1,
    kTimeFieldNumber = 3,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 sender_id = 1;
  void clear_sender_id();
  int32_t sender_id() const;
  void set_sender_id(int32_t value);
  private:
  int32_t _internal_sender_id() const;
  void _internal_set_sender_id(int32_t value);
  public:

  // int32 time = 3;
  void clear_time();
  int32_t time() const;
  void set_time(int32_t value);
  private:
  int32_t _internal_time() const;
  void _internal_set_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.ackAddGroupToRecv)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int32_t sender_id_;
    int32_t time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ack_2eproto;
};
// -------------------------------------------------------------------

class ackAddGroupToSend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.ackAddGroupToSend) */ {
 public:
  inline ackAddGroupToSend() : ackAddGroupToSend(nullptr) {}
  ~ackAddGroupToSend() override;
  explicit PROTOBUF_CONSTEXPR ackAddGroupToSend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ackAddGroupToSend(const ackAddGroupToSend& from);
  ackAddGroupToSend(ackAddGroupToSend&& from) noexcept
    : ackAddGroupToSend() {
    *this = ::std::move(from);
  }

  inline ackAddGroupToSend& operator=(const ackAddGroupToSend& from) {
    CopyFrom(from);
    return *this;
  }
  inline ackAddGroupToSend& operator=(ackAddGroupToSend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ackAddGroupToSend& default_instance() {
    return *internal_default_instance();
  }
  static inline const ackAddGroupToSend* internal_default_instance() {
    return reinterpret_cast<const ackAddGroupToSend*>(
               &_ackAddGroupToSend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ackAddGroupToSend& a, ackAddGroupToSend& b) {
    a.Swap(&b);
  }
  inline void Swap(ackAddGroupToSend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ackAddGroupToSend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ackAddGroupToSend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ackAddGroupToSend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ackAddGroupToSend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ackAddGroupToSend& from) {
    ackAddGroupToSend::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ackAddGroupToSend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.ackAddGroupToSend";
  }
  protected:
  explicit ackAddGroupToSend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kGroupIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 group_id = 1;
  void clear_group_id();
  int32_t group_id() const;
  void set_group_id(int32_t value);
  private:
  int32_t _internal_group_id() const;
  void _internal_set_group_id(int32_t value);
  public:

  // bool status = 2;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.ackAddGroupToSend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int32_t group_id_;
    bool status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ack_2eproto;
};
// -------------------------------------------------------------------

class ackLoginRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.ackLoginRequest) */ {
 public:
  inline ackLoginRequest() : ackLoginRequest(nullptr) {}
  ~ackLoginRequest() override;
  explicit PROTOBUF_CONSTEXPR ackLoginRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ackLoginRequest(const ackLoginRequest& from);
  ackLoginRequest(ackLoginRequest&& from) noexcept
    : ackLoginRequest() {
    *this = ::std::move(from);
  }

  inline ackLoginRequest& operator=(const ackLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ackLoginRequest& operator=(ackLoginRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ackLoginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ackLoginRequest* internal_default_instance() {
    return reinterpret_cast<const ackLoginRequest*>(
               &_ackLoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ackLoginRequest& a, ackLoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ackLoginRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ackLoginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ackLoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ackLoginRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ackLoginRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ackLoginRequest& from) {
    ackLoginRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ackLoginRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.ackLoginRequest";
  }
  protected:
  explicit ackLoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.ackLoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ack_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ack

// .im.protocol.Ack.Type type = 1;
inline void Ack::clear_type() {
  _impl_.type_ = 0;
}
inline ::im::protocol::Ack_Type Ack::_internal_type() const {
  return static_cast< ::im::protocol::Ack_Type >(_impl_.type_);
}
inline ::im::protocol::Ack_Type Ack::type() const {
  // @@protoc_insertion_point(field_get:im.protocol.Ack.type)
  return _internal_type();
}
inline void Ack::_internal_set_type(::im::protocol::Ack_Type value) {
  
  _impl_.type_ = value;
}
inline void Ack::set_type(::im::protocol::Ack_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:im.protocol.Ack.type)
}

// .google.protobuf.Timestamp timestamp = 2;
inline bool Ack::_internal_has_timestamp() const {
  return this != internal_default_instance() && _impl_.timestamp_ != nullptr;
}
inline bool Ack::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Ack::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Ack::timestamp() const {
  // @@protoc_insertion_point(field_get:im.protocol.Ack.timestamp)
  return _internal_timestamp();
}
inline void Ack::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Ack.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Ack::release_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Ack::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:im.protocol.Ack.timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Ack::_internal_mutable_timestamp() {
  
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Ack::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:im.protocol.Ack.timestamp)
  return _msg;
}
inline void Ack::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Ack.timestamp)
}

// .im.protocol.ackUserInfo user_info = 3;
inline bool Ack::_internal_has_user_info() const {
  return content_case() == kUserInfo;
}
inline bool Ack::has_user_info() const {
  return _internal_has_user_info();
}
inline void Ack::set_has_user_info() {
  _impl_._oneof_case_[0] = kUserInfo;
}
inline void Ack::clear_user_info() {
  if (_internal_has_user_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.content_.user_info_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::ackUserInfo* Ack::release_user_info() {
  // @@protoc_insertion_point(field_release:im.protocol.Ack.user_info)
  if (_internal_has_user_info()) {
    clear_has_content();
    ::im::protocol::ackUserInfo* temp = _impl_.content_.user_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.user_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::ackUserInfo& Ack::_internal_user_info() const {
  return _internal_has_user_info()
      ? *_impl_.content_.user_info_
      : reinterpret_cast< ::im::protocol::ackUserInfo&>(::im::protocol::_ackUserInfo_default_instance_);
}
inline const ::im::protocol::ackUserInfo& Ack::user_info() const {
  // @@protoc_insertion_point(field_get:im.protocol.Ack.user_info)
  return _internal_user_info();
}
inline ::im::protocol::ackUserInfo* Ack::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Ack.user_info)
  if (_internal_has_user_info()) {
    clear_has_content();
    ::im::protocol::ackUserInfo* temp = _impl_.content_.user_info_;
    _impl_.content_.user_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ack::unsafe_arena_set_allocated_user_info(::im::protocol::ackUserInfo* user_info) {
  clear_content();
  if (user_info) {
    set_has_user_info();
    _impl_.content_.user_info_ = user_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Ack.user_info)
}
inline ::im::protocol::ackUserInfo* Ack::_internal_mutable_user_info() {
  if (!_internal_has_user_info()) {
    clear_content();
    set_has_user_info();
    _impl_.content_.user_info_ = CreateMaybeMessage< ::im::protocol::ackUserInfo >(GetArenaForAllocation());
  }
  return _impl_.content_.user_info_;
}
inline ::im::protocol::ackUserInfo* Ack::mutable_user_info() {
  ::im::protocol::ackUserInfo* _msg = _internal_mutable_user_info();
  // @@protoc_insertion_point(field_mutable:im.protocol.Ack.user_info)
  return _msg;
}

// .im.protocol.ackGroupInfo group_info = 4;
inline bool Ack::_internal_has_group_info() const {
  return content_case() == kGroupInfo;
}
inline bool Ack::has_group_info() const {
  return _internal_has_group_info();
}
inline void Ack::set_has_group_info() {
  _impl_._oneof_case_[0] = kGroupInfo;
}
inline void Ack::clear_group_info() {
  if (_internal_has_group_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.content_.group_info_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::ackGroupInfo* Ack::release_group_info() {
  // @@protoc_insertion_point(field_release:im.protocol.Ack.group_info)
  if (_internal_has_group_info()) {
    clear_has_content();
    ::im::protocol::ackGroupInfo* temp = _impl_.content_.group_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.group_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::ackGroupInfo& Ack::_internal_group_info() const {
  return _internal_has_group_info()
      ? *_impl_.content_.group_info_
      : reinterpret_cast< ::im::protocol::ackGroupInfo&>(::im::protocol::_ackGroupInfo_default_instance_);
}
inline const ::im::protocol::ackGroupInfo& Ack::group_info() const {
  // @@protoc_insertion_point(field_get:im.protocol.Ack.group_info)
  return _internal_group_info();
}
inline ::im::protocol::ackGroupInfo* Ack::unsafe_arena_release_group_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Ack.group_info)
  if (_internal_has_group_info()) {
    clear_has_content();
    ::im::protocol::ackGroupInfo* temp = _impl_.content_.group_info_;
    _impl_.content_.group_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ack::unsafe_arena_set_allocated_group_info(::im::protocol::ackGroupInfo* group_info) {
  clear_content();
  if (group_info) {
    set_has_group_info();
    _impl_.content_.group_info_ = group_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Ack.group_info)
}
inline ::im::protocol::ackGroupInfo* Ack::_internal_mutable_group_info() {
  if (!_internal_has_group_info()) {
    clear_content();
    set_has_group_info();
    _impl_.content_.group_info_ = CreateMaybeMessage< ::im::protocol::ackGroupInfo >(GetArenaForAllocation());
  }
  return _impl_.content_.group_info_;
}
inline ::im::protocol::ackGroupInfo* Ack::mutable_group_info() {
  ::im::protocol::ackGroupInfo* _msg = _internal_mutable_group_info();
  // @@protoc_insertion_point(field_mutable:im.protocol.Ack.group_info)
  return _msg;
}

// .im.protocol.ackFileTransfer file_transfer = 5;
inline bool Ack::_internal_has_file_transfer() const {
  return content_case() == kFileTransfer;
}
inline bool Ack::has_file_transfer() const {
  return _internal_has_file_transfer();
}
inline void Ack::set_has_file_transfer() {
  _impl_._oneof_case_[0] = kFileTransfer;
}
inline void Ack::clear_file_transfer() {
  if (_internal_has_file_transfer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.content_.file_transfer_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::ackFileTransfer* Ack::release_file_transfer() {
  // @@protoc_insertion_point(field_release:im.protocol.Ack.file_transfer)
  if (_internal_has_file_transfer()) {
    clear_has_content();
    ::im::protocol::ackFileTransfer* temp = _impl_.content_.file_transfer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.file_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::ackFileTransfer& Ack::_internal_file_transfer() const {
  return _internal_has_file_transfer()
      ? *_impl_.content_.file_transfer_
      : reinterpret_cast< ::im::protocol::ackFileTransfer&>(::im::protocol::_ackFileTransfer_default_instance_);
}
inline const ::im::protocol::ackFileTransfer& Ack::file_transfer() const {
  // @@protoc_insertion_point(field_get:im.protocol.Ack.file_transfer)
  return _internal_file_transfer();
}
inline ::im::protocol::ackFileTransfer* Ack::unsafe_arena_release_file_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Ack.file_transfer)
  if (_internal_has_file_transfer()) {
    clear_has_content();
    ::im::protocol::ackFileTransfer* temp = _impl_.content_.file_transfer_;
    _impl_.content_.file_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ack::unsafe_arena_set_allocated_file_transfer(::im::protocol::ackFileTransfer* file_transfer) {
  clear_content();
  if (file_transfer) {
    set_has_file_transfer();
    _impl_.content_.file_transfer_ = file_transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Ack.file_transfer)
}
inline ::im::protocol::ackFileTransfer* Ack::_internal_mutable_file_transfer() {
  if (!_internal_has_file_transfer()) {
    clear_content();
    set_has_file_transfer();
    _impl_.content_.file_transfer_ = CreateMaybeMessage< ::im::protocol::ackFileTransfer >(GetArenaForAllocation());
  }
  return _impl_.content_.file_transfer_;
}
inline ::im::protocol::ackFileTransfer* Ack::mutable_file_transfer() {
  ::im::protocol::ackFileTransfer* _msg = _internal_mutable_file_transfer();
  // @@protoc_insertion_point(field_mutable:im.protocol.Ack.file_transfer)
  return _msg;
}

// .im.protocol.ackAddFriendToRecv add_friend_recv = 6;
inline bool Ack::_internal_has_add_friend_recv() const {
  return content_case() == kAddFriendRecv;
}
inline bool Ack::has_add_friend_recv() const {
  return _internal_has_add_friend_recv();
}
inline void Ack::set_has_add_friend_recv() {
  _impl_._oneof_case_[0] = kAddFriendRecv;
}
inline void Ack::clear_add_friend_recv() {
  if (_internal_has_add_friend_recv()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.content_.add_friend_recv_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::ackAddFriendToRecv* Ack::release_add_friend_recv() {
  // @@protoc_insertion_point(field_release:im.protocol.Ack.add_friend_recv)
  if (_internal_has_add_friend_recv()) {
    clear_has_content();
    ::im::protocol::ackAddFriendToRecv* temp = _impl_.content_.add_friend_recv_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.add_friend_recv_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::ackAddFriendToRecv& Ack::_internal_add_friend_recv() const {
  return _internal_has_add_friend_recv()
      ? *_impl_.content_.add_friend_recv_
      : reinterpret_cast< ::im::protocol::ackAddFriendToRecv&>(::im::protocol::_ackAddFriendToRecv_default_instance_);
}
inline const ::im::protocol::ackAddFriendToRecv& Ack::add_friend_recv() const {
  // @@protoc_insertion_point(field_get:im.protocol.Ack.add_friend_recv)
  return _internal_add_friend_recv();
}
inline ::im::protocol::ackAddFriendToRecv* Ack::unsafe_arena_release_add_friend_recv() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Ack.add_friend_recv)
  if (_internal_has_add_friend_recv()) {
    clear_has_content();
    ::im::protocol::ackAddFriendToRecv* temp = _impl_.content_.add_friend_recv_;
    _impl_.content_.add_friend_recv_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ack::unsafe_arena_set_allocated_add_friend_recv(::im::protocol::ackAddFriendToRecv* add_friend_recv) {
  clear_content();
  if (add_friend_recv) {
    set_has_add_friend_recv();
    _impl_.content_.add_friend_recv_ = add_friend_recv;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Ack.add_friend_recv)
}
inline ::im::protocol::ackAddFriendToRecv* Ack::_internal_mutable_add_friend_recv() {
  if (!_internal_has_add_friend_recv()) {
    clear_content();
    set_has_add_friend_recv();
    _impl_.content_.add_friend_recv_ = CreateMaybeMessage< ::im::protocol::ackAddFriendToRecv >(GetArenaForAllocation());
  }
  return _impl_.content_.add_friend_recv_;
}
inline ::im::protocol::ackAddFriendToRecv* Ack::mutable_add_friend_recv() {
  ::im::protocol::ackAddFriendToRecv* _msg = _internal_mutable_add_friend_recv();
  // @@protoc_insertion_point(field_mutable:im.protocol.Ack.add_friend_recv)
  return _msg;
}

// .im.protocol.ackAddFriendToSend add_friend_send = 7;
inline bool Ack::_internal_has_add_friend_send() const {
  return content_case() == kAddFriendSend;
}
inline bool Ack::has_add_friend_send() const {
  return _internal_has_add_friend_send();
}
inline void Ack::set_has_add_friend_send() {
  _impl_._oneof_case_[0] = kAddFriendSend;
}
inline void Ack::clear_add_friend_send() {
  if (_internal_has_add_friend_send()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.content_.add_friend_send_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::ackAddFriendToSend* Ack::release_add_friend_send() {
  // @@protoc_insertion_point(field_release:im.protocol.Ack.add_friend_send)
  if (_internal_has_add_friend_send()) {
    clear_has_content();
    ::im::protocol::ackAddFriendToSend* temp = _impl_.content_.add_friend_send_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.add_friend_send_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::ackAddFriendToSend& Ack::_internal_add_friend_send() const {
  return _internal_has_add_friend_send()
      ? *_impl_.content_.add_friend_send_
      : reinterpret_cast< ::im::protocol::ackAddFriendToSend&>(::im::protocol::_ackAddFriendToSend_default_instance_);
}
inline const ::im::protocol::ackAddFriendToSend& Ack::add_friend_send() const {
  // @@protoc_insertion_point(field_get:im.protocol.Ack.add_friend_send)
  return _internal_add_friend_send();
}
inline ::im::protocol::ackAddFriendToSend* Ack::unsafe_arena_release_add_friend_send() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Ack.add_friend_send)
  if (_internal_has_add_friend_send()) {
    clear_has_content();
    ::im::protocol::ackAddFriendToSend* temp = _impl_.content_.add_friend_send_;
    _impl_.content_.add_friend_send_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ack::unsafe_arena_set_allocated_add_friend_send(::im::protocol::ackAddFriendToSend* add_friend_send) {
  clear_content();
  if (add_friend_send) {
    set_has_add_friend_send();
    _impl_.content_.add_friend_send_ = add_friend_send;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Ack.add_friend_send)
}
inline ::im::protocol::ackAddFriendToSend* Ack::_internal_mutable_add_friend_send() {
  if (!_internal_has_add_friend_send()) {
    clear_content();
    set_has_add_friend_send();
    _impl_.content_.add_friend_send_ = CreateMaybeMessage< ::im::protocol::ackAddFriendToSend >(GetArenaForAllocation());
  }
  return _impl_.content_.add_friend_send_;
}
inline ::im::protocol::ackAddFriendToSend* Ack::mutable_add_friend_send() {
  ::im::protocol::ackAddFriendToSend* _msg = _internal_mutable_add_friend_send();
  // @@protoc_insertion_point(field_mutable:im.protocol.Ack.add_friend_send)
  return _msg;
}

// .im.protocol.ackAddGroupToRecv add_group_recv = 8;
inline bool Ack::_internal_has_add_group_recv() const {
  return content_case() == kAddGroupRecv;
}
inline bool Ack::has_add_group_recv() const {
  return _internal_has_add_group_recv();
}
inline void Ack::set_has_add_group_recv() {
  _impl_._oneof_case_[0] = kAddGroupRecv;
}
inline void Ack::clear_add_group_recv() {
  if (_internal_has_add_group_recv()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.content_.add_group_recv_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::ackAddGroupToRecv* Ack::release_add_group_recv() {
  // @@protoc_insertion_point(field_release:im.protocol.Ack.add_group_recv)
  if (_internal_has_add_group_recv()) {
    clear_has_content();
    ::im::protocol::ackAddGroupToRecv* temp = _impl_.content_.add_group_recv_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.add_group_recv_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::ackAddGroupToRecv& Ack::_internal_add_group_recv() const {
  return _internal_has_add_group_recv()
      ? *_impl_.content_.add_group_recv_
      : reinterpret_cast< ::im::protocol::ackAddGroupToRecv&>(::im::protocol::_ackAddGroupToRecv_default_instance_);
}
inline const ::im::protocol::ackAddGroupToRecv& Ack::add_group_recv() const {
  // @@protoc_insertion_point(field_get:im.protocol.Ack.add_group_recv)
  return _internal_add_group_recv();
}
inline ::im::protocol::ackAddGroupToRecv* Ack::unsafe_arena_release_add_group_recv() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Ack.add_group_recv)
  if (_internal_has_add_group_recv()) {
    clear_has_content();
    ::im::protocol::ackAddGroupToRecv* temp = _impl_.content_.add_group_recv_;
    _impl_.content_.add_group_recv_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ack::unsafe_arena_set_allocated_add_group_recv(::im::protocol::ackAddGroupToRecv* add_group_recv) {
  clear_content();
  if (add_group_recv) {
    set_has_add_group_recv();
    _impl_.content_.add_group_recv_ = add_group_recv;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Ack.add_group_recv)
}
inline ::im::protocol::ackAddGroupToRecv* Ack::_internal_mutable_add_group_recv() {
  if (!_internal_has_add_group_recv()) {
    clear_content();
    set_has_add_group_recv();
    _impl_.content_.add_group_recv_ = CreateMaybeMessage< ::im::protocol::ackAddGroupToRecv >(GetArenaForAllocation());
  }
  return _impl_.content_.add_group_recv_;
}
inline ::im::protocol::ackAddGroupToRecv* Ack::mutable_add_group_recv() {
  ::im::protocol::ackAddGroupToRecv* _msg = _internal_mutable_add_group_recv();
  // @@protoc_insertion_point(field_mutable:im.protocol.Ack.add_group_recv)
  return _msg;
}

// .im.protocol.ackAddGroupToSend add_group_send = 9;
inline bool Ack::_internal_has_add_group_send() const {
  return content_case() == kAddGroupSend;
}
inline bool Ack::has_add_group_send() const {
  return _internal_has_add_group_send();
}
inline void Ack::set_has_add_group_send() {
  _impl_._oneof_case_[0] = kAddGroupSend;
}
inline void Ack::clear_add_group_send() {
  if (_internal_has_add_group_send()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.content_.add_group_send_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::ackAddGroupToSend* Ack::release_add_group_send() {
  // @@protoc_insertion_point(field_release:im.protocol.Ack.add_group_send)
  if (_internal_has_add_group_send()) {
    clear_has_content();
    ::im::protocol::ackAddGroupToSend* temp = _impl_.content_.add_group_send_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.add_group_send_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::ackAddGroupToSend& Ack::_internal_add_group_send() const {
  return _internal_has_add_group_send()
      ? *_impl_.content_.add_group_send_
      : reinterpret_cast< ::im::protocol::ackAddGroupToSend&>(::im::protocol::_ackAddGroupToSend_default_instance_);
}
inline const ::im::protocol::ackAddGroupToSend& Ack::add_group_send() const {
  // @@protoc_insertion_point(field_get:im.protocol.Ack.add_group_send)
  return _internal_add_group_send();
}
inline ::im::protocol::ackAddGroupToSend* Ack::unsafe_arena_release_add_group_send() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Ack.add_group_send)
  if (_internal_has_add_group_send()) {
    clear_has_content();
    ::im::protocol::ackAddGroupToSend* temp = _impl_.content_.add_group_send_;
    _impl_.content_.add_group_send_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ack::unsafe_arena_set_allocated_add_group_send(::im::protocol::ackAddGroupToSend* add_group_send) {
  clear_content();
  if (add_group_send) {
    set_has_add_group_send();
    _impl_.content_.add_group_send_ = add_group_send;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Ack.add_group_send)
}
inline ::im::protocol::ackAddGroupToSend* Ack::_internal_mutable_add_group_send() {
  if (!_internal_has_add_group_send()) {
    clear_content();
    set_has_add_group_send();
    _impl_.content_.add_group_send_ = CreateMaybeMessage< ::im::protocol::ackAddGroupToSend >(GetArenaForAllocation());
  }
  return _impl_.content_.add_group_send_;
}
inline ::im::protocol::ackAddGroupToSend* Ack::mutable_add_group_send() {
  ::im::protocol::ackAddGroupToSend* _msg = _internal_mutable_add_group_send();
  // @@protoc_insertion_point(field_mutable:im.protocol.Ack.add_group_send)
  return _msg;
}

// .im.protocol.ackLoginRequest login_request = 10;
inline bool Ack::_internal_has_login_request() const {
  return content_case() == kLoginRequest;
}
inline bool Ack::has_login_request() const {
  return _internal_has_login_request();
}
inline void Ack::set_has_login_request() {
  _impl_._oneof_case_[0] = kLoginRequest;
}
inline void Ack::clear_login_request() {
  if (_internal_has_login_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.content_.login_request_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::ackLoginRequest* Ack::release_login_request() {
  // @@protoc_insertion_point(field_release:im.protocol.Ack.login_request)
  if (_internal_has_login_request()) {
    clear_has_content();
    ::im::protocol::ackLoginRequest* temp = _impl_.content_.login_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.login_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::ackLoginRequest& Ack::_internal_login_request() const {
  return _internal_has_login_request()
      ? *_impl_.content_.login_request_
      : reinterpret_cast< ::im::protocol::ackLoginRequest&>(::im::protocol::_ackLoginRequest_default_instance_);
}
inline const ::im::protocol::ackLoginRequest& Ack::login_request() const {
  // @@protoc_insertion_point(field_get:im.protocol.Ack.login_request)
  return _internal_login_request();
}
inline ::im::protocol::ackLoginRequest* Ack::unsafe_arena_release_login_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Ack.login_request)
  if (_internal_has_login_request()) {
    clear_has_content();
    ::im::protocol::ackLoginRequest* temp = _impl_.content_.login_request_;
    _impl_.content_.login_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ack::unsafe_arena_set_allocated_login_request(::im::protocol::ackLoginRequest* login_request) {
  clear_content();
  if (login_request) {
    set_has_login_request();
    _impl_.content_.login_request_ = login_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Ack.login_request)
}
inline ::im::protocol::ackLoginRequest* Ack::_internal_mutable_login_request() {
  if (!_internal_has_login_request()) {
    clear_content();
    set_has_login_request();
    _impl_.content_.login_request_ = CreateMaybeMessage< ::im::protocol::ackLoginRequest >(GetArenaForAllocation());
  }
  return _impl_.content_.login_request_;
}
inline ::im::protocol::ackLoginRequest* Ack::mutable_login_request() {
  ::im::protocol::ackLoginRequest* _msg = _internal_mutable_login_request();
  // @@protoc_insertion_point(field_mutable:im.protocol.Ack.login_request)
  return _msg;
}

// .im.protocol.ackSingleChat single_chat = 11;
inline bool Ack::_internal_has_single_chat() const {
  return content_case() == kSingleChat;
}
inline bool Ack::has_single_chat() const {
  return _internal_has_single_chat();
}
inline void Ack::set_has_single_chat() {
  _impl_._oneof_case_[0] = kSingleChat;
}
inline void Ack::clear_single_chat() {
  if (_internal_has_single_chat()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.content_.single_chat_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::ackSingleChat* Ack::release_single_chat() {
  // @@protoc_insertion_point(field_release:im.protocol.Ack.single_chat)
  if (_internal_has_single_chat()) {
    clear_has_content();
    ::im::protocol::ackSingleChat* temp = _impl_.content_.single_chat_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.single_chat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::ackSingleChat& Ack::_internal_single_chat() const {
  return _internal_has_single_chat()
      ? *_impl_.content_.single_chat_
      : reinterpret_cast< ::im::protocol::ackSingleChat&>(::im::protocol::_ackSingleChat_default_instance_);
}
inline const ::im::protocol::ackSingleChat& Ack::single_chat() const {
  // @@protoc_insertion_point(field_get:im.protocol.Ack.single_chat)
  return _internal_single_chat();
}
inline ::im::protocol::ackSingleChat* Ack::unsafe_arena_release_single_chat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Ack.single_chat)
  if (_internal_has_single_chat()) {
    clear_has_content();
    ::im::protocol::ackSingleChat* temp = _impl_.content_.single_chat_;
    _impl_.content_.single_chat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ack::unsafe_arena_set_allocated_single_chat(::im::protocol::ackSingleChat* single_chat) {
  clear_content();
  if (single_chat) {
    set_has_single_chat();
    _impl_.content_.single_chat_ = single_chat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Ack.single_chat)
}
inline ::im::protocol::ackSingleChat* Ack::_internal_mutable_single_chat() {
  if (!_internal_has_single_chat()) {
    clear_content();
    set_has_single_chat();
    _impl_.content_.single_chat_ = CreateMaybeMessage< ::im::protocol::ackSingleChat >(GetArenaForAllocation());
  }
  return _impl_.content_.single_chat_;
}
inline ::im::protocol::ackSingleChat* Ack::mutable_single_chat() {
  ::im::protocol::ackSingleChat* _msg = _internal_mutable_single_chat();
  // @@protoc_insertion_point(field_mutable:im.protocol.Ack.single_chat)
  return _msg;
}

// .im.protocol.ackGroupChat group_chat = 12;
inline bool Ack::_internal_has_group_chat() const {
  return content_case() == kGroupChat;
}
inline bool Ack::has_group_chat() const {
  return _internal_has_group_chat();
}
inline void Ack::set_has_group_chat() {
  _impl_._oneof_case_[0] = kGroupChat;
}
inline void Ack::clear_group_chat() {
  if (_internal_has_group_chat()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.content_.group_chat_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::ackGroupChat* Ack::release_group_chat() {
  // @@protoc_insertion_point(field_release:im.protocol.Ack.group_chat)
  if (_internal_has_group_chat()) {
    clear_has_content();
    ::im::protocol::ackGroupChat* temp = _impl_.content_.group_chat_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.group_chat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::ackGroupChat& Ack::_internal_group_chat() const {
  return _internal_has_group_chat()
      ? *_impl_.content_.group_chat_
      : reinterpret_cast< ::im::protocol::ackGroupChat&>(::im::protocol::_ackGroupChat_default_instance_);
}
inline const ::im::protocol::ackGroupChat& Ack::group_chat() const {
  // @@protoc_insertion_point(field_get:im.protocol.Ack.group_chat)
  return _internal_group_chat();
}
inline ::im::protocol::ackGroupChat* Ack::unsafe_arena_release_group_chat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Ack.group_chat)
  if (_internal_has_group_chat()) {
    clear_has_content();
    ::im::protocol::ackGroupChat* temp = _impl_.content_.group_chat_;
    _impl_.content_.group_chat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ack::unsafe_arena_set_allocated_group_chat(::im::protocol::ackGroupChat* group_chat) {
  clear_content();
  if (group_chat) {
    set_has_group_chat();
    _impl_.content_.group_chat_ = group_chat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Ack.group_chat)
}
inline ::im::protocol::ackGroupChat* Ack::_internal_mutable_group_chat() {
  if (!_internal_has_group_chat()) {
    clear_content();
    set_has_group_chat();
    _impl_.content_.group_chat_ = CreateMaybeMessage< ::im::protocol::ackGroupChat >(GetArenaForAllocation());
  }
  return _impl_.content_.group_chat_;
}
inline ::im::protocol::ackGroupChat* Ack::mutable_group_chat() {
  ::im::protocol::ackGroupChat* _msg = _internal_mutable_group_chat();
  // @@protoc_insertion_point(field_mutable:im.protocol.Ack.group_chat)
  return _msg;
}

inline bool Ack::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void Ack::clear_has_content() {
  _impl_._oneof_case_[0] = CONTENT_NOT_SET;
}
inline Ack::ContentCase Ack::content_case() const {
  return Ack::ContentCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ackSingleChat

// int32 sender_id = 1;
inline void ackSingleChat::clear_sender_id() {
  _impl_.sender_id_ = 0;
}
inline int32_t ackSingleChat::_internal_sender_id() const {
  return _impl_.sender_id_;
}
inline int32_t ackSingleChat::sender_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackSingleChat.sender_id)
  return _internal_sender_id();
}
inline void ackSingleChat::_internal_set_sender_id(int32_t value) {
  
  _impl_.sender_id_ = value;
}
inline void ackSingleChat::set_sender_id(int32_t value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackSingleChat.sender_id)
}

// int32 receiver_id = 2;
inline void ackSingleChat::clear_receiver_id() {
  _impl_.receiver_id_ = 0;
}
inline int32_t ackSingleChat::_internal_receiver_id() const {
  return _impl_.receiver_id_;
}
inline int32_t ackSingleChat::receiver_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackSingleChat.receiver_id)
  return _internal_receiver_id();
}
inline void ackSingleChat::_internal_set_receiver_id(int32_t value) {
  
  _impl_.receiver_id_ = value;
}
inline void ackSingleChat::set_receiver_id(int32_t value) {
  _internal_set_receiver_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackSingleChat.receiver_id)
}

// string content = 3;
inline void ackSingleChat::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& ackSingleChat::content() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackSingleChat.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ackSingleChat::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.protocol.ackSingleChat.content)
}
inline std::string* ackSingleChat::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:im.protocol.ackSingleChat.content)
  return _s;
}
inline const std::string& ackSingleChat::_internal_content() const {
  return _impl_.content_.Get();
}
inline void ackSingleChat::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* ackSingleChat::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* ackSingleChat::release_content() {
  // @@protoc_insertion_point(field_release:im.protocol.ackSingleChat.content)
  return _impl_.content_.Release();
}
inline void ackSingleChat::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.protocol.ackSingleChat.content)
}

// int32 time = 4;
inline void ackSingleChat::clear_time() {
  _impl_.time_ = 0;
}
inline int32_t ackSingleChat::_internal_time() const {
  return _impl_.time_;
}
inline int32_t ackSingleChat::time() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackSingleChat.time)
  return _internal_time();
}
inline void ackSingleChat::_internal_set_time(int32_t value) {
  
  _impl_.time_ = value;
}
inline void ackSingleChat::set_time(int32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackSingleChat.time)
}

// -------------------------------------------------------------------

// ackUserInfo

// int32 id = 1;
inline void ackUserInfo::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t ackUserInfo::_internal_id() const {
  return _impl_.id_;
}
inline int32_t ackUserInfo::id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackUserInfo.id)
  return _internal_id();
}
inline void ackUserInfo::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void ackUserInfo::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackUserInfo.id)
}

// string username = 2;
inline void ackUserInfo::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& ackUserInfo::username() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackUserInfo.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ackUserInfo::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.protocol.ackUserInfo.username)
}
inline std::string* ackUserInfo::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:im.protocol.ackUserInfo.username)
  return _s;
}
inline const std::string& ackUserInfo::_internal_username() const {
  return _impl_.username_.Get();
}
inline void ackUserInfo::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* ackUserInfo::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* ackUserInfo::release_username() {
  // @@protoc_insertion_point(field_release:im.protocol.ackUserInfo.username)
  return _impl_.username_.Release();
}
inline void ackUserInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.protocol.ackUserInfo.username)
}

// string content = 3;
inline void ackUserInfo::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& ackUserInfo::content() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackUserInfo.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ackUserInfo::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.protocol.ackUserInfo.content)
}
inline std::string* ackUserInfo::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:im.protocol.ackUserInfo.content)
  return _s;
}
inline const std::string& ackUserInfo::_internal_content() const {
  return _impl_.content_.Get();
}
inline void ackUserInfo::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* ackUserInfo::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* ackUserInfo::release_content() {
  // @@protoc_insertion_point(field_release:im.protocol.ackUserInfo.content)
  return _impl_.content_.Release();
}
inline void ackUserInfo::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.protocol.ackUserInfo.content)
}

// -------------------------------------------------------------------

// ackGroupChat

// int32 sender_id = 1;
inline void ackGroupChat::clear_sender_id() {
  _impl_.sender_id_ = 0;
}
inline int32_t ackGroupChat::_internal_sender_id() const {
  return _impl_.sender_id_;
}
inline int32_t ackGroupChat::sender_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackGroupChat.sender_id)
  return _internal_sender_id();
}
inline void ackGroupChat::_internal_set_sender_id(int32_t value) {
  
  _impl_.sender_id_ = value;
}
inline void ackGroupChat::set_sender_id(int32_t value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackGroupChat.sender_id)
}

// int32 group_id = 2;
inline void ackGroupChat::clear_group_id() {
  _impl_.group_id_ = 0;
}
inline int32_t ackGroupChat::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int32_t ackGroupChat::group_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackGroupChat.group_id)
  return _internal_group_id();
}
inline void ackGroupChat::_internal_set_group_id(int32_t value) {
  
  _impl_.group_id_ = value;
}
inline void ackGroupChat::set_group_id(int32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackGroupChat.group_id)
}

// string content = 3;
inline void ackGroupChat::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& ackGroupChat::content() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackGroupChat.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ackGroupChat::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.protocol.ackGroupChat.content)
}
inline std::string* ackGroupChat::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:im.protocol.ackGroupChat.content)
  return _s;
}
inline const std::string& ackGroupChat::_internal_content() const {
  return _impl_.content_.Get();
}
inline void ackGroupChat::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* ackGroupChat::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* ackGroupChat::release_content() {
  // @@protoc_insertion_point(field_release:im.protocol.ackGroupChat.content)
  return _impl_.content_.Release();
}
inline void ackGroupChat::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.protocol.ackGroupChat.content)
}

// int32 time = 4;
inline void ackGroupChat::clear_time() {
  _impl_.time_ = 0;
}
inline int32_t ackGroupChat::_internal_time() const {
  return _impl_.time_;
}
inline int32_t ackGroupChat::time() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackGroupChat.time)
  return _internal_time();
}
inline void ackGroupChat::_internal_set_time(int32_t value) {
  
  _impl_.time_ = value;
}
inline void ackGroupChat::set_time(int32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackGroupChat.time)
}

// -------------------------------------------------------------------

// ackGroupInfo

// int32 group_id = 1;
inline void ackGroupInfo::clear_group_id() {
  _impl_.group_id_ = 0;
}
inline int32_t ackGroupInfo::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int32_t ackGroupInfo::group_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackGroupInfo.group_id)
  return _internal_group_id();
}
inline void ackGroupInfo::_internal_set_group_id(int32_t value) {
  
  _impl_.group_id_ = value;
}
inline void ackGroupInfo::set_group_id(int32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackGroupInfo.group_id)
}

// string groupname = 2;
inline void ackGroupInfo::clear_groupname() {
  _impl_.groupname_.ClearToEmpty();
}
inline const std::string& ackGroupInfo::groupname() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackGroupInfo.groupname)
  return _internal_groupname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ackGroupInfo::set_groupname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.groupname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.protocol.ackGroupInfo.groupname)
}
inline std::string* ackGroupInfo::mutable_groupname() {
  std::string* _s = _internal_mutable_groupname();
  // @@protoc_insertion_point(field_mutable:im.protocol.ackGroupInfo.groupname)
  return _s;
}
inline const std::string& ackGroupInfo::_internal_groupname() const {
  return _impl_.groupname_.Get();
}
inline void ackGroupInfo::_internal_set_groupname(const std::string& value) {
  
  _impl_.groupname_.Set(value, GetArenaForAllocation());
}
inline std::string* ackGroupInfo::_internal_mutable_groupname() {
  
  return _impl_.groupname_.Mutable(GetArenaForAllocation());
}
inline std::string* ackGroupInfo::release_groupname() {
  // @@protoc_insertion_point(field_release:im.protocol.ackGroupInfo.groupname)
  return _impl_.groupname_.Release();
}
inline void ackGroupInfo::set_allocated_groupname(std::string* groupname) {
  if (groupname != nullptr) {
    
  } else {
    
  }
  _impl_.groupname_.SetAllocated(groupname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.groupname_.IsDefault()) {
    _impl_.groupname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.protocol.ackGroupInfo.groupname)
}

// string content = 3;
inline void ackGroupInfo::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& ackGroupInfo::content() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackGroupInfo.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ackGroupInfo::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.protocol.ackGroupInfo.content)
}
inline std::string* ackGroupInfo::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:im.protocol.ackGroupInfo.content)
  return _s;
}
inline const std::string& ackGroupInfo::_internal_content() const {
  return _impl_.content_.Get();
}
inline void ackGroupInfo::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* ackGroupInfo::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* ackGroupInfo::release_content() {
  // @@protoc_insertion_point(field_release:im.protocol.ackGroupInfo.content)
  return _impl_.content_.Release();
}
inline void ackGroupInfo::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.protocol.ackGroupInfo.content)
}

// -------------------------------------------------------------------

// ackFileTransfer

// int32 sender_id = 1;
inline void ackFileTransfer::clear_sender_id() {
  _impl_.sender_id_ = 0;
}
inline int32_t ackFileTransfer::_internal_sender_id() const {
  return _impl_.sender_id_;
}
inline int32_t ackFileTransfer::sender_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackFileTransfer.sender_id)
  return _internal_sender_id();
}
inline void ackFileTransfer::_internal_set_sender_id(int32_t value) {
  
  _impl_.sender_id_ = value;
}
inline void ackFileTransfer::set_sender_id(int32_t value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackFileTransfer.sender_id)
}

// int32 receiver_id = 2;
inline void ackFileTransfer::clear_receiver_id() {
  _impl_.receiver_id_ = 0;
}
inline int32_t ackFileTransfer::_internal_receiver_id() const {
  return _impl_.receiver_id_;
}
inline int32_t ackFileTransfer::receiver_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackFileTransfer.receiver_id)
  return _internal_receiver_id();
}
inline void ackFileTransfer::_internal_set_receiver_id(int32_t value) {
  
  _impl_.receiver_id_ = value;
}
inline void ackFileTransfer::set_receiver_id(int32_t value) {
  _internal_set_receiver_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackFileTransfer.receiver_id)
}

// string file_name = 3;
inline void ackFileTransfer::clear_file_name() {
  _impl_.file_name_.ClearToEmpty();
}
inline const std::string& ackFileTransfer::file_name() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackFileTransfer.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ackFileTransfer::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.protocol.ackFileTransfer.file_name)
}
inline std::string* ackFileTransfer::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:im.protocol.ackFileTransfer.file_name)
  return _s;
}
inline const std::string& ackFileTransfer::_internal_file_name() const {
  return _impl_.file_name_.Get();
}
inline void ackFileTransfer::_internal_set_file_name(const std::string& value) {
  
  _impl_.file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ackFileTransfer::_internal_mutable_file_name() {
  
  return _impl_.file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ackFileTransfer::release_file_name() {
  // @@protoc_insertion_point(field_release:im.protocol.ackFileTransfer.file_name)
  return _impl_.file_name_.Release();
}
inline void ackFileTransfer::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  _impl_.file_name_.SetAllocated(file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.protocol.ackFileTransfer.file_name)
}

// bool status = 4;
inline void ackFileTransfer::clear_status() {
  _impl_.status_ = false;
}
inline bool ackFileTransfer::_internal_status() const {
  return _impl_.status_;
}
inline bool ackFileTransfer::status() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackFileTransfer.status)
  return _internal_status();
}
inline void ackFileTransfer::_internal_set_status(bool value) {
  
  _impl_.status_ = value;
}
inline void ackFileTransfer::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackFileTransfer.status)
}

// -------------------------------------------------------------------

// ackAddFriendToRecv

// int32 sender_id = 1;
inline void ackAddFriendToRecv::clear_sender_id() {
  _impl_.sender_id_ = 0;
}
inline int32_t ackAddFriendToRecv::_internal_sender_id() const {
  return _impl_.sender_id_;
}
inline int32_t ackAddFriendToRecv::sender_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAddFriendToRecv.sender_id)
  return _internal_sender_id();
}
inline void ackAddFriendToRecv::_internal_set_sender_id(int32_t value) {
  
  _impl_.sender_id_ = value;
}
inline void ackAddFriendToRecv::set_sender_id(int32_t value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackAddFriendToRecv.sender_id)
}

// string message = 2;
inline void ackAddFriendToRecv::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ackAddFriendToRecv::message() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAddFriendToRecv.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ackAddFriendToRecv::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.protocol.ackAddFriendToRecv.message)
}
inline std::string* ackAddFriendToRecv::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:im.protocol.ackAddFriendToRecv.message)
  return _s;
}
inline const std::string& ackAddFriendToRecv::_internal_message() const {
  return _impl_.message_.Get();
}
inline void ackAddFriendToRecv::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* ackAddFriendToRecv::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* ackAddFriendToRecv::release_message() {
  // @@protoc_insertion_point(field_release:im.protocol.ackAddFriendToRecv.message)
  return _impl_.message_.Release();
}
inline void ackAddFriendToRecv::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.protocol.ackAddFriendToRecv.message)
}

// int32 time = 3;
inline void ackAddFriendToRecv::clear_time() {
  _impl_.time_ = 0;
}
inline int32_t ackAddFriendToRecv::_internal_time() const {
  return _impl_.time_;
}
inline int32_t ackAddFriendToRecv::time() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAddFriendToRecv.time)
  return _internal_time();
}
inline void ackAddFriendToRecv::_internal_set_time(int32_t value) {
  
  _impl_.time_ = value;
}
inline void ackAddFriendToRecv::set_time(int32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackAddFriendToRecv.time)
}

// -------------------------------------------------------------------

// ackAddFriendToSend

// int32 receiver_id = 1;
inline void ackAddFriendToSend::clear_receiver_id() {
  _impl_.receiver_id_ = 0;
}
inline int32_t ackAddFriendToSend::_internal_receiver_id() const {
  return _impl_.receiver_id_;
}
inline int32_t ackAddFriendToSend::receiver_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAddFriendToSend.receiver_id)
  return _internal_receiver_id();
}
inline void ackAddFriendToSend::_internal_set_receiver_id(int32_t value) {
  
  _impl_.receiver_id_ = value;
}
inline void ackAddFriendToSend::set_receiver_id(int32_t value) {
  _internal_set_receiver_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackAddFriendToSend.receiver_id)
}

// bool status = 2;
inline void ackAddFriendToSend::clear_status() {
  _impl_.status_ = false;
}
inline bool ackAddFriendToSend::_internal_status() const {
  return _impl_.status_;
}
inline bool ackAddFriendToSend::status() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAddFriendToSend.status)
  return _internal_status();
}
inline void ackAddFriendToSend::_internal_set_status(bool value) {
  
  _impl_.status_ = value;
}
inline void ackAddFriendToSend::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackAddFriendToSend.status)
}

// string message = 3;
inline void ackAddFriendToSend::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ackAddFriendToSend::message() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAddFriendToSend.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ackAddFriendToSend::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.protocol.ackAddFriendToSend.message)
}
inline std::string* ackAddFriendToSend::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:im.protocol.ackAddFriendToSend.message)
  return _s;
}
inline const std::string& ackAddFriendToSend::_internal_message() const {
  return _impl_.message_.Get();
}
inline void ackAddFriendToSend::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* ackAddFriendToSend::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* ackAddFriendToSend::release_message() {
  // @@protoc_insertion_point(field_release:im.protocol.ackAddFriendToSend.message)
  return _impl_.message_.Release();
}
inline void ackAddFriendToSend::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.protocol.ackAddFriendToSend.message)
}

// -------------------------------------------------------------------

// ackAddGroupToRecv

// int32 sender_id = 1;
inline void ackAddGroupToRecv::clear_sender_id() {
  _impl_.sender_id_ = 0;
}
inline int32_t ackAddGroupToRecv::_internal_sender_id() const {
  return _impl_.sender_id_;
}
inline int32_t ackAddGroupToRecv::sender_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAddGroupToRecv.sender_id)
  return _internal_sender_id();
}
inline void ackAddGroupToRecv::_internal_set_sender_id(int32_t value) {
  
  _impl_.sender_id_ = value;
}
inline void ackAddGroupToRecv::set_sender_id(int32_t value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackAddGroupToRecv.sender_id)
}

// string message = 2;
inline void ackAddGroupToRecv::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ackAddGroupToRecv::message() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAddGroupToRecv.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ackAddGroupToRecv::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.protocol.ackAddGroupToRecv.message)
}
inline std::string* ackAddGroupToRecv::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:im.protocol.ackAddGroupToRecv.message)
  return _s;
}
inline const std::string& ackAddGroupToRecv::_internal_message() const {
  return _impl_.message_.Get();
}
inline void ackAddGroupToRecv::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* ackAddGroupToRecv::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* ackAddGroupToRecv::release_message() {
  // @@protoc_insertion_point(field_release:im.protocol.ackAddGroupToRecv.message)
  return _impl_.message_.Release();
}
inline void ackAddGroupToRecv::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.protocol.ackAddGroupToRecv.message)
}

// int32 time = 3;
inline void ackAddGroupToRecv::clear_time() {
  _impl_.time_ = 0;
}
inline int32_t ackAddGroupToRecv::_internal_time() const {
  return _impl_.time_;
}
inline int32_t ackAddGroupToRecv::time() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAddGroupToRecv.time)
  return _internal_time();
}
inline void ackAddGroupToRecv::_internal_set_time(int32_t value) {
  
  _impl_.time_ = value;
}
inline void ackAddGroupToRecv::set_time(int32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackAddGroupToRecv.time)
}

// -------------------------------------------------------------------

// ackAddGroupToSend

// int32 group_id = 1;
inline void ackAddGroupToSend::clear_group_id() {
  _impl_.group_id_ = 0;
}
inline int32_t ackAddGroupToSend::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int32_t ackAddGroupToSend::group_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAddGroupToSend.group_id)
  return _internal_group_id();
}
inline void ackAddGroupToSend::_internal_set_group_id(int32_t value) {
  
  _impl_.group_id_ = value;
}
inline void ackAddGroupToSend::set_group_id(int32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackAddGroupToSend.group_id)
}

// bool status = 2;
inline void ackAddGroupToSend::clear_status() {
  _impl_.status_ = false;
}
inline bool ackAddGroupToSend::_internal_status() const {
  return _impl_.status_;
}
inline bool ackAddGroupToSend::status() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAddGroupToSend.status)
  return _internal_status();
}
inline void ackAddGroupToSend::_internal_set_status(bool value) {
  
  _impl_.status_ = value;
}
inline void ackAddGroupToSend::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackAddGroupToSend.status)
}

// string message = 3;
inline void ackAddGroupToSend::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ackAddGroupToSend::message() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackAddGroupToSend.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ackAddGroupToSend::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.protocol.ackAddGroupToSend.message)
}
inline std::string* ackAddGroupToSend::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:im.protocol.ackAddGroupToSend.message)
  return _s;
}
inline const std::string& ackAddGroupToSend::_internal_message() const {
  return _impl_.message_.Get();
}
inline void ackAddGroupToSend::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* ackAddGroupToSend::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* ackAddGroupToSend::release_message() {
  // @@protoc_insertion_point(field_release:im.protocol.ackAddGroupToSend.message)
  return _impl_.message_.Release();
}
inline void ackAddGroupToSend::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.protocol.ackAddGroupToSend.message)
}

// -------------------------------------------------------------------

// ackLoginRequest

// bool status = 1;
inline void ackLoginRequest::clear_status() {
  _impl_.status_ = false;
}
inline bool ackLoginRequest::_internal_status() const {
  return _impl_.status_;
}
inline bool ackLoginRequest::status() const {
  // @@protoc_insertion_point(field_get:im.protocol.ackLoginRequest.status)
  return _internal_status();
}
inline void ackLoginRequest::_internal_set_status(bool value) {
  
  _impl_.status_ = value;
}
inline void ackLoginRequest::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:im.protocol.ackLoginRequest.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace im

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::im::protocol::Ack_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::im::protocol::Ack_Type>() {
  return ::im::protocol::Ack_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ack_2eproto
