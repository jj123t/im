// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace im {
namespace protocol {
PROTOBUF_CONSTEXPR Message::Message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.content_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageDefaultTypeInternal _Message_default_instance_;
PROTOBUF_CONSTEXPR SingleChat::SingleChat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sender_id_)*/0
  , /*decltype(_impl_.receiver_id_)*/0
  , /*decltype(_impl_.time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleChatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleChatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleChatDefaultTypeInternal() {}
  union {
    SingleChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleChatDefaultTypeInternal _SingleChat_default_instance_;
PROTOBUF_CONSTEXPR GroupChat::GroupChat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sender_id_)*/0
  , /*decltype(_impl_.group_id_)*/0
  , /*decltype(_impl_.time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GroupChatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupChatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupChatDefaultTypeInternal() {}
  union {
    GroupChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupChatDefaultTypeInternal _GroupChat_default_instance_;
PROTOBUF_CONSTEXPR FileTransfer::FileTransfer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sender_id_)*/0
  , /*decltype(_impl_.receiver_id_)*/0
  , /*decltype(_impl_.file_size_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileTransferDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileTransferDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileTransferDefaultTypeInternal() {}
  union {
    FileTransfer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileTransferDefaultTypeInternal _FileTransfer_default_instance_;
PROTOBUF_CONSTEXPR AddFriendReply::AddFriendReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.receiver_id_)*/0
  , /*decltype(_impl_.status_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddFriendReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddFriendReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddFriendReplyDefaultTypeInternal() {}
  union {
    AddFriendReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddFriendReplyDefaultTypeInternal _AddFriendReply_default_instance_;
PROTOBUF_CONSTEXPR AddFriend::AddFriend(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sender_id_)*/0
  , /*decltype(_impl_.receiver_id_)*/0
  , /*decltype(_impl_.time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddFriendDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddFriendDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddFriendDefaultTypeInternal() {}
  union {
    AddFriend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddFriendDefaultTypeInternal _AddFriend_default_instance_;
PROTOBUF_CONSTEXPR AddGroupReply::AddGroupReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.group_id_)*/0
  , /*decltype(_impl_.status_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddGroupReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddGroupReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddGroupReplyDefaultTypeInternal() {}
  union {
    AddGroupReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddGroupReplyDefaultTypeInternal _AddGroupReply_default_instance_;
PROTOBUF_CONSTEXPR AddGroup::AddGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sender_id_)*/0
  , /*decltype(_impl_.group_id_)*/0
  , /*decltype(_impl_.time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddGroupDefaultTypeInternal() {}
  union {
    AddGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddGroupDefaultTypeInternal _AddGroup_default_instance_;
PROTOBUF_CONSTEXPR SearchUser::SearchUser(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sender_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchUserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchUserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchUserDefaultTypeInternal() {}
  union {
    SearchUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchUserDefaultTypeInternal _SearchUser_default_instance_;
PROTOBUF_CONSTEXPR SearchGroup::SearchGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sender_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchGroupDefaultTypeInternal() {}
  union {
    SearchGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchGroupDefaultTypeInternal _SearchGroup_default_instance_;
PROTOBUF_CONSTEXPR LoginRequest::LoginRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoginRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginRequestDefaultTypeInternal() {}
  union {
    LoginRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
}  // namespace protocol
}  // namespace im
static ::_pb::Metadata file_level_metadata_msg_2eproto[11];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_msg_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_msg_2eproto = nullptr;

const uint32_t TableStruct_msg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::im::protocol::Message, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::Message, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::Message, _impl_.timestamp_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::im::protocol::Message, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::SingleChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::SingleChat, _impl_.sender_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::SingleChat, _impl_.receiver_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::SingleChat, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::SingleChat, _impl_.time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::GroupChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::GroupChat, _impl_.sender_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::GroupChat, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::GroupChat, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::GroupChat, _impl_.time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::FileTransfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::FileTransfer, _impl_.sender_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::FileTransfer, _impl_.receiver_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::FileTransfer, _impl_.file_name_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::FileTransfer, _impl_.file_hash_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::FileTransfer, _impl_.file_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::AddFriendReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::AddFriendReply, _impl_.receiver_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::AddFriendReply, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::AddFriendReply, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::AddFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::AddFriend, _impl_.sender_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::AddFriend, _impl_.receiver_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::AddFriend, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::AddFriend, _impl_.time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::AddGroupReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::AddGroupReply, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::AddGroupReply, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::AddGroupReply, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::AddGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::AddGroup, _impl_.sender_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::AddGroup, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::AddGroup, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::AddGroup, _impl_.time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::SearchUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::SearchUser, _impl_.sender_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::SearchUser, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::SearchGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::SearchGroup, _impl_.sender_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::SearchGroup, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::LoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::LoginRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::LoginRequest, _impl_.password_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::im::protocol::Message)},
  { 19, -1, -1, sizeof(::im::protocol::SingleChat)},
  { 29, -1, -1, sizeof(::im::protocol::GroupChat)},
  { 39, -1, -1, sizeof(::im::protocol::FileTransfer)},
  { 50, -1, -1, sizeof(::im::protocol::AddFriendReply)},
  { 59, -1, -1, sizeof(::im::protocol::AddFriend)},
  { 69, -1, -1, sizeof(::im::protocol::AddGroupReply)},
  { 78, -1, -1, sizeof(::im::protocol::AddGroup)},
  { 88, -1, -1, sizeof(::im::protocol::SearchUser)},
  { 96, -1, -1, sizeof(::im::protocol::SearchGroup)},
  { 104, -1, -1, sizeof(::im::protocol::LoginRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::im::protocol::_Message_default_instance_._instance,
  &::im::protocol::_SingleChat_default_instance_._instance,
  &::im::protocol::_GroupChat_default_instance_._instance,
  &::im::protocol::_FileTransfer_default_instance_._instance,
  &::im::protocol::_AddFriendReply_default_instance_._instance,
  &::im::protocol::_AddFriend_default_instance_._instance,
  &::im::protocol::_AddGroupReply_default_instance_._instance,
  &::im::protocol::_AddGroup_default_instance_._instance,
  &::im::protocol::_SearchUser_default_instance_._instance,
  &::im::protocol::_SearchGroup_default_instance_._instance,
  &::im::protocol::_LoginRequest_default_instance_._instance,
};

const char descriptor_table_protodef_msg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tmsg.proto\022\013im.protocol\032\037google/protobu"
  "f/timestamp.proto\"\252\006\n\007Message\022\'\n\004type\030\001 "
  "\001(\0162\031.im.protocol.Message.Type\022-\n\ttimest"
  "amp\030\002 \001(\0132\032.google.protobuf.Timestamp\022.\n"
  "\013single_chat\030\003 \001(\0132\027.im.protocol.SingleC"
  "hatH\000\022,\n\ngroup_chat\030\004 \001(\0132\026.im.protocol."
  "GroupChatH\000\0222\n\rfile_transfer\030\005 \001(\0132\031.im."
  "protocol.FileTransferH\000\0227\n\020add_friend_re"
  "ply\030\006 \001(\0132\033.im.protocol.AddFriendReplyH\000"
  "\022,\n\nadd_friend\030\007 \001(\0132\026.im.protocol.AddFr"
  "iendH\000\0225\n\017add_group_reply\030\010 \001(\0132\032.im.pro"
  "tocol.AddGroupReplyH\000\022*\n\tadd_group\030\t \001(\013"
  "2\025.im.protocol.AddGroupH\000\022.\n\013search_user"
  "\030\n \001(\0132\027.im.protocol.SearchUserH\000\0220\n\014sea"
  "rch_group\030\013 \001(\0132\030.im.protocol.SearchGrou"
  "pH\000\0222\n\rlogin_request\030\014 \001(\0132\031.im.protocol"
  ".LoginRequestH\000\"\311\001\n\004Type\022\017\n\013SINGLE_CHAT\020"
  "\000\022\016\n\nGROUP_CHAT\020\001\022\021\n\rFILE_TRANSFER\020\002\022\024\n\020"
  "ADD_FRIEND_REPLY\020\003\022\016\n\nADD_FRIEND\020\004\022\023\n\017AD"
  "D_GROUP_REPLY\020\005\022\r\n\tADD_GROUP\020\006\022\017\n\013SEARCH"
  "_USER\020\007\022\020\n\014SEARCH_GROUP\020\010\022\021\n\rLOGIN_REQUE"
  "ST\020\t\022\r\n\tHEARTBEAT\020\nB\t\n\007content\"S\n\nSingle"
  "Chat\022\021\n\tsender_id\030\001 \001(\005\022\023\n\013receiver_id\030\002"
  " \001(\005\022\017\n\007content\030\003 \001(\t\022\014\n\004time\030\004 \001(\005\"O\n\tG"
  "roupChat\022\021\n\tsender_id\030\001 \001(\005\022\020\n\010group_id\030"
  "\002 \001(\005\022\017\n\007content\030\003 \001(\t\022\014\n\004time\030\004 \001(\005\"o\n\014"
  "FileTransfer\022\021\n\tsender_id\030\001 \001(\005\022\023\n\013recei"
  "ver_id\030\002 \001(\005\022\021\n\tfile_name\030\003 \001(\t\022\021\n\tfile_"
  "hash\030\004 \001(\014\022\021\n\tfile_size\030\005 \001(\003\"F\n\016AddFrie"
  "ndReply\022\023\n\013receiver_id\030\001 \001(\005\022\016\n\006status\030\002"
  " \001(\010\022\017\n\007message\030\003 \001(\t\"R\n\tAddFriend\022\021\n\tse"
  "nder_id\030\001 \001(\005\022\023\n\013receiver_id\030\002 \001(\005\022\017\n\007me"
  "ssage\030\003 \001(\t\022\014\n\004time\030\004 \001(\005\"B\n\rAddGroupRep"
  "ly\022\020\n\010group_id\030\001 \001(\005\022\016\n\006status\030\002 \001(\010\022\017\n\007"
  "message\030\003 \001(\t\"N\n\010AddGroup\022\021\n\tsender_id\030\001"
  " \001(\005\022\020\n\010group_id\030\002 \001(\005\022\017\n\007message\030\003 \001(\t\022"
  "\014\n\004time\030\004 \001(\005\"0\n\nSearchUser\022\021\n\tsender_id"
  "\030\001 \001(\005\022\017\n\007message\030\002 \001(\t\"1\n\013SearchGroup\022\021"
  "\n\tsender_id\030\001 \001(\005\022\017\n\007message\030\002 \001(\t\"1\n\014Lo"
  "ginRequest\022\017\n\007user_id\030\001 \001(\005\022\020\n\010password\030"
  "\002 \001(\tb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_msg_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_msg_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_msg_2eproto = {
    false, false, 1613, descriptor_table_protodef_msg_2eproto,
    "msg.proto",
    &descriptor_table_msg_2eproto_once, descriptor_table_msg_2eproto_deps, 1, 11,
    schemas, file_default_instances, TableStruct_msg_2eproto::offsets,
    file_level_metadata_msg_2eproto, file_level_enum_descriptors_msg_2eproto,
    file_level_service_descriptors_msg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_msg_2eproto_getter() {
  return &descriptor_table_msg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_msg_2eproto(&descriptor_table_msg_2eproto);
namespace im {
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[0];
}
bool Message_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Message_Type Message::SINGLE_CHAT;
constexpr Message_Type Message::GROUP_CHAT;
constexpr Message_Type Message::FILE_TRANSFER;
constexpr Message_Type Message::ADD_FRIEND_REPLY;
constexpr Message_Type Message::ADD_FRIEND;
constexpr Message_Type Message::ADD_GROUP_REPLY;
constexpr Message_Type Message::ADD_GROUP;
constexpr Message_Type Message::SEARCH_USER;
constexpr Message_Type Message::SEARCH_GROUP;
constexpr Message_Type Message::LOGIN_REQUEST;
constexpr Message_Type Message::HEARTBEAT;
constexpr Message_Type Message::Type_MIN;
constexpr Message_Type Message::Type_MAX;
constexpr int Message::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Message::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Message* msg);
  static const ::im::protocol::SingleChat& single_chat(const Message* msg);
  static const ::im::protocol::GroupChat& group_chat(const Message* msg);
  static const ::im::protocol::FileTransfer& file_transfer(const Message* msg);
  static const ::im::protocol::AddFriendReply& add_friend_reply(const Message* msg);
  static const ::im::protocol::AddFriend& add_friend(const Message* msg);
  static const ::im::protocol::AddGroupReply& add_group_reply(const Message* msg);
  static const ::im::protocol::AddGroup& add_group(const Message* msg);
  static const ::im::protocol::SearchUser& search_user(const Message* msg);
  static const ::im::protocol::SearchGroup& search_group(const Message* msg);
  static const ::im::protocol::LoginRequest& login_request(const Message* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Message::_Internal::timestamp(const Message* msg) {
  return *msg->_impl_.timestamp_;
}
const ::im::protocol::SingleChat&
Message::_Internal::single_chat(const Message* msg) {
  return *msg->_impl_.content_.single_chat_;
}
const ::im::protocol::GroupChat&
Message::_Internal::group_chat(const Message* msg) {
  return *msg->_impl_.content_.group_chat_;
}
const ::im::protocol::FileTransfer&
Message::_Internal::file_transfer(const Message* msg) {
  return *msg->_impl_.content_.file_transfer_;
}
const ::im::protocol::AddFriendReply&
Message::_Internal::add_friend_reply(const Message* msg) {
  return *msg->_impl_.content_.add_friend_reply_;
}
const ::im::protocol::AddFriend&
Message::_Internal::add_friend(const Message* msg) {
  return *msg->_impl_.content_.add_friend_;
}
const ::im::protocol::AddGroupReply&
Message::_Internal::add_group_reply(const Message* msg) {
  return *msg->_impl_.content_.add_group_reply_;
}
const ::im::protocol::AddGroup&
Message::_Internal::add_group(const Message* msg) {
  return *msg->_impl_.content_.add_group_;
}
const ::im::protocol::SearchUser&
Message::_Internal::search_user(const Message* msg) {
  return *msg->_impl_.content_.search_user_;
}
const ::im::protocol::SearchGroup&
Message::_Internal::search_group(const Message* msg) {
  return *msg->_impl_.content_.search_group_;
}
const ::im::protocol::LoginRequest&
Message::_Internal::login_request(const Message* msg) {
  return *msg->_impl_.content_.login_request_;
}
void Message::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
void Message::set_allocated_single_chat(::im::protocol::SingleChat* single_chat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (single_chat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(single_chat);
    if (message_arena != submessage_arena) {
      single_chat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, single_chat, submessage_arena);
    }
    set_has_single_chat();
    _impl_.content_.single_chat_ = single_chat;
  }
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Message.single_chat)
}
void Message::set_allocated_group_chat(::im::protocol::GroupChat* group_chat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (group_chat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(group_chat);
    if (message_arena != submessage_arena) {
      group_chat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_chat, submessage_arena);
    }
    set_has_group_chat();
    _impl_.content_.group_chat_ = group_chat;
  }
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Message.group_chat)
}
void Message::set_allocated_file_transfer(::im::protocol::FileTransfer* file_transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (file_transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(file_transfer);
    if (message_arena != submessage_arena) {
      file_transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file_transfer, submessage_arena);
    }
    set_has_file_transfer();
    _impl_.content_.file_transfer_ = file_transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Message.file_transfer)
}
void Message::set_allocated_add_friend_reply(::im::protocol::AddFriendReply* add_friend_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (add_friend_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(add_friend_reply);
    if (message_arena != submessage_arena) {
      add_friend_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_friend_reply, submessage_arena);
    }
    set_has_add_friend_reply();
    _impl_.content_.add_friend_reply_ = add_friend_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Message.add_friend_reply)
}
void Message::set_allocated_add_friend(::im::protocol::AddFriend* add_friend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (add_friend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(add_friend);
    if (message_arena != submessage_arena) {
      add_friend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_friend, submessage_arena);
    }
    set_has_add_friend();
    _impl_.content_.add_friend_ = add_friend;
  }
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Message.add_friend)
}
void Message::set_allocated_add_group_reply(::im::protocol::AddGroupReply* add_group_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (add_group_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(add_group_reply);
    if (message_arena != submessage_arena) {
      add_group_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_group_reply, submessage_arena);
    }
    set_has_add_group_reply();
    _impl_.content_.add_group_reply_ = add_group_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Message.add_group_reply)
}
void Message::set_allocated_add_group(::im::protocol::AddGroup* add_group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (add_group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(add_group);
    if (message_arena != submessage_arena) {
      add_group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_group, submessage_arena);
    }
    set_has_add_group();
    _impl_.content_.add_group_ = add_group;
  }
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Message.add_group)
}
void Message::set_allocated_search_user(::im::protocol::SearchUser* search_user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (search_user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(search_user);
    if (message_arena != submessage_arena) {
      search_user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search_user, submessage_arena);
    }
    set_has_search_user();
    _impl_.content_.search_user_ = search_user;
  }
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Message.search_user)
}
void Message::set_allocated_search_group(::im::protocol::SearchGroup* search_group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (search_group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(search_group);
    if (message_arena != submessage_arena) {
      search_group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search_group, submessage_arena);
    }
    set_has_search_group();
    _impl_.content_.search_group_ = search_group;
  }
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Message.search_group)
}
void Message::set_allocated_login_request(::im::protocol::LoginRequest* login_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (login_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(login_request);
    if (message_arena != submessage_arena) {
      login_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_request, submessage_arena);
    }
    set_has_login_request();
    _impl_.content_.login_request_ = login_request;
  }
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Message.login_request)
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.protocol.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  clear_has_content();
  switch (from.content_case()) {
    case kSingleChat: {
      _this->_internal_mutable_single_chat()->::im::protocol::SingleChat::MergeFrom(
          from._internal_single_chat());
      break;
    }
    case kGroupChat: {
      _this->_internal_mutable_group_chat()->::im::protocol::GroupChat::MergeFrom(
          from._internal_group_chat());
      break;
    }
    case kFileTransfer: {
      _this->_internal_mutable_file_transfer()->::im::protocol::FileTransfer::MergeFrom(
          from._internal_file_transfer());
      break;
    }
    case kAddFriendReply: {
      _this->_internal_mutable_add_friend_reply()->::im::protocol::AddFriendReply::MergeFrom(
          from._internal_add_friend_reply());
      break;
    }
    case kAddFriend: {
      _this->_internal_mutable_add_friend()->::im::protocol::AddFriend::MergeFrom(
          from._internal_add_friend());
      break;
    }
    case kAddGroupReply: {
      _this->_internal_mutable_add_group_reply()->::im::protocol::AddGroupReply::MergeFrom(
          from._internal_add_group_reply());
      break;
    }
    case kAddGroup: {
      _this->_internal_mutable_add_group()->::im::protocol::AddGroup::MergeFrom(
          from._internal_add_group());
      break;
    }
    case kSearchUser: {
      _this->_internal_mutable_search_user()->::im::protocol::SearchUser::MergeFrom(
          from._internal_search_user());
      break;
    }
    case kSearchGroup: {
      _this->_internal_mutable_search_group()->::im::protocol::SearchGroup::MergeFrom(
          from._internal_search_group());
      break;
    }
    case kLoginRequest: {
      _this->_internal_mutable_login_request()->::im::protocol::LoginRequest::MergeFrom(
          from._internal_login_request());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:im.protocol.Message)
}

inline void Message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_content();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:im.protocol.Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (has_content()) {
    clear_content();
  }
}

void Message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:im.protocol.Message)
  switch (content_case()) {
    case kSingleChat: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.single_chat_;
      }
      break;
    }
    case kGroupChat: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.group_chat_;
      }
      break;
    }
    case kFileTransfer: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.file_transfer_;
      }
      break;
    }
    case kAddFriendReply: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.add_friend_reply_;
      }
      break;
    }
    case kAddFriend: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.add_friend_;
      }
      break;
    }
    case kAddGroupReply: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.add_group_reply_;
      }
      break;
    }
    case kAddGroup: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.add_group_;
      }
      break;
    }
    case kSearchUser: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.search_user_;
      }
      break;
    }
    case kSearchGroup: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.search_group_;
      }
      break;
    }
    case kLoginRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.login_request_;
      }
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = CONTENT_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  _impl_.type_ = 0;
  clear_content();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .im.protocol.Message.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::im::protocol::Message_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .im.protocol.SingleChat single_chat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_single_chat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .im.protocol.GroupChat group_chat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_chat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .im.protocol.FileTransfer file_transfer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_file_transfer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .im.protocol.AddFriendReply add_friend_reply = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_friend_reply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .im.protocol.AddFriend add_friend = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_friend(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .im.protocol.AddGroupReply add_group_reply = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_group_reply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .im.protocol.AddGroup add_group = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_group(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .im.protocol.SearchUser search_user = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_search_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .im.protocol.SearchGroup search_group = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_search_group(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .im.protocol.LoginRequest login_request = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .im.protocol.Message.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // .im.protocol.SingleChat single_chat = 3;
  if (_internal_has_single_chat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::single_chat(this),
        _Internal::single_chat(this).GetCachedSize(), target, stream);
  }

  // .im.protocol.GroupChat group_chat = 4;
  if (_internal_has_group_chat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::group_chat(this),
        _Internal::group_chat(this).GetCachedSize(), target, stream);
  }

  // .im.protocol.FileTransfer file_transfer = 5;
  if (_internal_has_file_transfer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::file_transfer(this),
        _Internal::file_transfer(this).GetCachedSize(), target, stream);
  }

  // .im.protocol.AddFriendReply add_friend_reply = 6;
  if (_internal_has_add_friend_reply()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::add_friend_reply(this),
        _Internal::add_friend_reply(this).GetCachedSize(), target, stream);
  }

  // .im.protocol.AddFriend add_friend = 7;
  if (_internal_has_add_friend()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::add_friend(this),
        _Internal::add_friend(this).GetCachedSize(), target, stream);
  }

  // .im.protocol.AddGroupReply add_group_reply = 8;
  if (_internal_has_add_group_reply()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::add_group_reply(this),
        _Internal::add_group_reply(this).GetCachedSize(), target, stream);
  }

  // .im.protocol.AddGroup add_group = 9;
  if (_internal_has_add_group()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::add_group(this),
        _Internal::add_group(this).GetCachedSize(), target, stream);
  }

  // .im.protocol.SearchUser search_user = 10;
  if (_internal_has_search_user()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::search_user(this),
        _Internal::search_user(this).GetCachedSize(), target, stream);
  }

  // .im.protocol.SearchGroup search_group = 11;
  if (_internal_has_search_group()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::search_group(this),
        _Internal::search_group(this).GetCachedSize(), target, stream);
  }

  // .im.protocol.LoginRequest login_request = 12;
  if (_internal_has_login_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::login_request(this),
        _Internal::login_request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // .im.protocol.Message.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (content_case()) {
    // .im.protocol.SingleChat single_chat = 3;
    case kSingleChat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.single_chat_);
      break;
    }
    // .im.protocol.GroupChat group_chat = 4;
    case kGroupChat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.group_chat_);
      break;
    }
    // .im.protocol.FileTransfer file_transfer = 5;
    case kFileTransfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.file_transfer_);
      break;
    }
    // .im.protocol.AddFriendReply add_friend_reply = 6;
    case kAddFriendReply: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.add_friend_reply_);
      break;
    }
    // .im.protocol.AddFriend add_friend = 7;
    case kAddFriend: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.add_friend_);
      break;
    }
    // .im.protocol.AddGroupReply add_group_reply = 8;
    case kAddGroupReply: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.add_group_reply_);
      break;
    }
    // .im.protocol.AddGroup add_group = 9;
    case kAddGroup: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.add_group_);
      break;
    }
    // .im.protocol.SearchUser search_user = 10;
    case kSearchUser: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.search_user_);
      break;
    }
    // .im.protocol.SearchGroup search_group = 11;
    case kSearchGroup: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.search_group_);
      break;
    }
    // .im.protocol.LoginRequest login_request = 12;
    case kLoginRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.login_request_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }


void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message*>(&to_msg);
  auto& from = static_cast<const Message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.Message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  switch (from.content_case()) {
    case kSingleChat: {
      _this->_internal_mutable_single_chat()->::im::protocol::SingleChat::MergeFrom(
          from._internal_single_chat());
      break;
    }
    case kGroupChat: {
      _this->_internal_mutable_group_chat()->::im::protocol::GroupChat::MergeFrom(
          from._internal_group_chat());
      break;
    }
    case kFileTransfer: {
      _this->_internal_mutable_file_transfer()->::im::protocol::FileTransfer::MergeFrom(
          from._internal_file_transfer());
      break;
    }
    case kAddFriendReply: {
      _this->_internal_mutable_add_friend_reply()->::im::protocol::AddFriendReply::MergeFrom(
          from._internal_add_friend_reply());
      break;
    }
    case kAddFriend: {
      _this->_internal_mutable_add_friend()->::im::protocol::AddFriend::MergeFrom(
          from._internal_add_friend());
      break;
    }
    case kAddGroupReply: {
      _this->_internal_mutable_add_group_reply()->::im::protocol::AddGroupReply::MergeFrom(
          from._internal_add_group_reply());
      break;
    }
    case kAddGroup: {
      _this->_internal_mutable_add_group()->::im::protocol::AddGroup::MergeFrom(
          from._internal_add_group());
      break;
    }
    case kSearchUser: {
      _this->_internal_mutable_search_user()->::im::protocol::SearchUser::MergeFrom(
          from._internal_search_user());
      break;
    }
    case kSearchGroup: {
      _this->_internal_mutable_search_group()->::im::protocol::SearchGroup::MergeFrom(
          from._internal_search_group());
      break;
    }
    case kLoginRequest: {
      _this->_internal_mutable_login_request()->::im::protocol::LoginRequest::MergeFrom(
          from._internal_login_request());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message, _impl_.type_)
      + sizeof(Message::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Message, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
  swap(_impl_.content_, other->_impl_.content_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[0]);
}

// ===================================================================

class SingleChat::_Internal {
 public:
};

SingleChat::SingleChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.protocol.SingleChat)
}
SingleChat::SingleChat(const SingleChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleChat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.sender_id_){}
    , decltype(_impl_.receiver_id_){}
    , decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sender_id_, &from._impl_.sender_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_) -
    reinterpret_cast<char*>(&_impl_.sender_id_)) + sizeof(_impl_.time_));
  // @@protoc_insertion_point(copy_constructor:im.protocol.SingleChat)
}

inline void SingleChat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.sender_id_){0}
    , decltype(_impl_.receiver_id_){0}
    , decltype(_impl_.time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SingleChat::~SingleChat() {
  // @@protoc_insertion_point(destructor:im.protocol.SingleChat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void SingleChat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleChat::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.SingleChat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  ::memset(&_impl_.sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.time_) -
      reinterpret_cast<char*>(&_impl_.sender_id_)) + sizeof(_impl_.time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleChat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 sender_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 receiver_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.receiver_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.SingleChat.content"));
        } else
          goto handle_unusual;
        continue;
      // int32 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleChat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.SingleChat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sender_id = 1;
  if (this->_internal_sender_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_sender_id(), target);
  }

  // int32 receiver_id = 2;
  if (this->_internal_receiver_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_receiver_id(), target);
  }

  // string content = 3;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.SingleChat.content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  // int32 time = 4;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.SingleChat)
  return target;
}

size_t SingleChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.SingleChat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // int32 sender_id = 1;
  if (this->_internal_sender_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sender_id());
  }

  // int32 receiver_id = 2;
  if (this->_internal_receiver_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_receiver_id());
  }

  // int32 time = 4;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleChat::GetClassData() const { return &_class_data_; }


void SingleChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleChat*>(&to_msg);
  auto& from = static_cast<const SingleChat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.SingleChat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_sender_id() != 0) {
    _this->_internal_set_sender_id(from._internal_sender_id());
  }
  if (from._internal_receiver_id() != 0) {
    _this->_internal_set_receiver_id(from._internal_receiver_id());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleChat::CopyFrom(const SingleChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.SingleChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleChat::IsInitialized() const {
  return true;
}

void SingleChat::InternalSwap(SingleChat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleChat, _impl_.time_)
      + sizeof(SingleChat::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(SingleChat, _impl_.sender_id_)>(
          reinterpret_cast<char*>(&_impl_.sender_id_),
          reinterpret_cast<char*>(&other->_impl_.sender_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleChat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[1]);
}

// ===================================================================

class GroupChat::_Internal {
 public:
};

GroupChat::GroupChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.protocol.GroupChat)
}
GroupChat::GroupChat(const GroupChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupChat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.sender_id_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sender_id_, &from._impl_.sender_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_) -
    reinterpret_cast<char*>(&_impl_.sender_id_)) + sizeof(_impl_.time_));
  // @@protoc_insertion_point(copy_constructor:im.protocol.GroupChat)
}

inline void GroupChat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.sender_id_){0}
    , decltype(_impl_.group_id_){0}
    , decltype(_impl_.time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupChat::~GroupChat() {
  // @@protoc_insertion_point(destructor:im.protocol.GroupChat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void GroupChat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupChat::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.GroupChat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  ::memset(&_impl_.sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.time_) -
      reinterpret_cast<char*>(&_impl_.sender_id_)) + sizeof(_impl_.time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupChat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 sender_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.GroupChat.content"));
        } else
          goto handle_unusual;
        continue;
      // int32 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupChat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.GroupChat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sender_id = 1;
  if (this->_internal_sender_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_sender_id(), target);
  }

  // int32 group_id = 2;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_group_id(), target);
  }

  // string content = 3;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.GroupChat.content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  // int32 time = 4;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.GroupChat)
  return target;
}

size_t GroupChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.GroupChat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // int32 sender_id = 1;
  if (this->_internal_sender_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sender_id());
  }

  // int32 group_id = 2;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_group_id());
  }

  // int32 time = 4;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupChat::GetClassData() const { return &_class_data_; }


void GroupChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupChat*>(&to_msg);
  auto& from = static_cast<const GroupChat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.GroupChat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_sender_id() != 0) {
    _this->_internal_set_sender_id(from._internal_sender_id());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupChat::CopyFrom(const GroupChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.GroupChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupChat::IsInitialized() const {
  return true;
}

void GroupChat::InternalSwap(GroupChat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupChat, _impl_.time_)
      + sizeof(GroupChat::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(GroupChat, _impl_.sender_id_)>(
          reinterpret_cast<char*>(&_impl_.sender_id_),
          reinterpret_cast<char*>(&other->_impl_.sender_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupChat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[2]);
}

// ===================================================================

class FileTransfer::_Internal {
 public:
};

FileTransfer::FileTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.protocol.FileTransfer)
}
FileTransfer::FileTransfer(const FileTransfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileTransfer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.file_name_){}
    , decltype(_impl_.file_hash_){}
    , decltype(_impl_.sender_id_){}
    , decltype(_impl_.receiver_id_){}
    , decltype(_impl_.file_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    _this->_impl_.file_name_.Set(from._internal_file_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.file_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_hash().empty()) {
    _this->_impl_.file_hash_.Set(from._internal_file_hash(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sender_id_, &from._impl_.sender_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.file_size_) -
    reinterpret_cast<char*>(&_impl_.sender_id_)) + sizeof(_impl_.file_size_));
  // @@protoc_insertion_point(copy_constructor:im.protocol.FileTransfer)
}

inline void FileTransfer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.file_name_){}
    , decltype(_impl_.file_hash_){}
    , decltype(_impl_.sender_id_){0}
    , decltype(_impl_.receiver_id_){0}
    , decltype(_impl_.file_size_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FileTransfer::~FileTransfer() {
  // @@protoc_insertion_point(destructor:im.protocol.FileTransfer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileTransfer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_name_.Destroy();
  _impl_.file_hash_.Destroy();
}

void FileTransfer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.FileTransfer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_name_.ClearToEmpty();
  _impl_.file_hash_.ClearToEmpty();
  ::memset(&_impl_.sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.file_size_) -
      reinterpret_cast<char*>(&_impl_.sender_id_)) + sizeof(_impl_.file_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileTransfer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 sender_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 receiver_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.receiver_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.FileTransfer.file_name"));
        } else
          goto handle_unusual;
        continue;
      // bytes file_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_file_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 file_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileTransfer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.FileTransfer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sender_id = 1;
  if (this->_internal_sender_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_sender_id(), target);
  }

  // int32 receiver_id = 2;
  if (this->_internal_receiver_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_receiver_id(), target);
  }

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.FileTransfer.file_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_name(), target);
  }

  // bytes file_hash = 4;
  if (!this->_internal_file_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_file_hash(), target);
  }

  // int64 file_size = 5;
  if (this->_internal_file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_file_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.FileTransfer)
  return target;
}

size_t FileTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.FileTransfer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // bytes file_hash = 4;
  if (!this->_internal_file_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_file_hash());
  }

  // int32 sender_id = 1;
  if (this->_internal_sender_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sender_id());
  }

  // int32 receiver_id = 2;
  if (this->_internal_receiver_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_receiver_id());
  }

  // int64 file_size = 5;
  if (this->_internal_file_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_file_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileTransfer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileTransfer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileTransfer::GetClassData() const { return &_class_data_; }


void FileTransfer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileTransfer*>(&to_msg);
  auto& from = static_cast<const FileTransfer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.FileTransfer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _this->_internal_set_file_name(from._internal_file_name());
  }
  if (!from._internal_file_hash().empty()) {
    _this->_internal_set_file_hash(from._internal_file_hash());
  }
  if (from._internal_sender_id() != 0) {
    _this->_internal_set_sender_id(from._internal_sender_id());
  }
  if (from._internal_receiver_id() != 0) {
    _this->_internal_set_receiver_id(from._internal_receiver_id());
  }
  if (from._internal_file_size() != 0) {
    _this->_internal_set_file_size(from._internal_file_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileTransfer::CopyFrom(const FileTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.FileTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTransfer::IsInitialized() const {
  return true;
}

void FileTransfer::InternalSwap(FileTransfer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_name_, lhs_arena,
      &other->_impl_.file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_hash_, lhs_arena,
      &other->_impl_.file_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileTransfer, _impl_.file_size_)
      + sizeof(FileTransfer::_impl_.file_size_)
      - PROTOBUF_FIELD_OFFSET(FileTransfer, _impl_.sender_id_)>(
          reinterpret_cast<char*>(&_impl_.sender_id_),
          reinterpret_cast<char*>(&other->_impl_.sender_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileTransfer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[3]);
}

// ===================================================================

class AddFriendReply::_Internal {
 public:
};

AddFriendReply::AddFriendReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.protocol.AddFriendReply)
}
AddFriendReply::AddFriendReply(const AddFriendReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddFriendReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.receiver_id_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.receiver_id_, &from._impl_.receiver_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.receiver_id_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:im.protocol.AddFriendReply)
}

inline void AddFriendReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.receiver_id_){0}
    , decltype(_impl_.status_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddFriendReply::~AddFriendReply() {
  // @@protoc_insertion_point(destructor:im.protocol.AddFriendReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddFriendReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void AddFriendReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddFriendReply::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.AddFriendReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.receiver_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.receiver_id_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddFriendReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 receiver_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.receiver_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.AddFriendReply.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddFriendReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.AddFriendReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 receiver_id = 1;
  if (this->_internal_receiver_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_receiver_id(), target);
  }

  // bool status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_status(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.AddFriendReply.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.AddFriendReply)
  return target;
}

size_t AddFriendReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.AddFriendReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 receiver_id = 1;
  if (this->_internal_receiver_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_receiver_id());
  }

  // bool status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddFriendReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddFriendReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddFriendReply::GetClassData() const { return &_class_data_; }


void AddFriendReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddFriendReply*>(&to_msg);
  auto& from = static_cast<const AddFriendReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.AddFriendReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_receiver_id() != 0) {
    _this->_internal_set_receiver_id(from._internal_receiver_id());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddFriendReply::CopyFrom(const AddFriendReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.AddFriendReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendReply::IsInitialized() const {
  return true;
}

void AddFriendReply::InternalSwap(AddFriendReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddFriendReply, _impl_.status_)
      + sizeof(AddFriendReply::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(AddFriendReply, _impl_.receiver_id_)>(
          reinterpret_cast<char*>(&_impl_.receiver_id_),
          reinterpret_cast<char*>(&other->_impl_.receiver_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddFriendReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[4]);
}

// ===================================================================

class AddFriend::_Internal {
 public:
};

AddFriend::AddFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.protocol.AddFriend)
}
AddFriend::AddFriend(const AddFriend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddFriend* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.sender_id_){}
    , decltype(_impl_.receiver_id_){}
    , decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sender_id_, &from._impl_.sender_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_) -
    reinterpret_cast<char*>(&_impl_.sender_id_)) + sizeof(_impl_.time_));
  // @@protoc_insertion_point(copy_constructor:im.protocol.AddFriend)
}

inline void AddFriend::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.sender_id_){0}
    , decltype(_impl_.receiver_id_){0}
    , decltype(_impl_.time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddFriend::~AddFriend() {
  // @@protoc_insertion_point(destructor:im.protocol.AddFriend)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddFriend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void AddFriend::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.AddFriend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.time_) -
      reinterpret_cast<char*>(&_impl_.sender_id_)) + sizeof(_impl_.time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddFriend::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 sender_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 receiver_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.receiver_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.AddFriend.message"));
        } else
          goto handle_unusual;
        continue;
      // int32 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddFriend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.AddFriend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sender_id = 1;
  if (this->_internal_sender_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_sender_id(), target);
  }

  // int32 receiver_id = 2;
  if (this->_internal_receiver_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_receiver_id(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.AddFriend.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // int32 time = 4;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.AddFriend)
  return target;
}

size_t AddFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.AddFriend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 sender_id = 1;
  if (this->_internal_sender_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sender_id());
  }

  // int32 receiver_id = 2;
  if (this->_internal_receiver_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_receiver_id());
  }

  // int32 time = 4;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddFriend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddFriend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddFriend::GetClassData() const { return &_class_data_; }


void AddFriend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddFriend*>(&to_msg);
  auto& from = static_cast<const AddFriend&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.AddFriend)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_sender_id() != 0) {
    _this->_internal_set_sender_id(from._internal_sender_id());
  }
  if (from._internal_receiver_id() != 0) {
    _this->_internal_set_receiver_id(from._internal_receiver_id());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddFriend::CopyFrom(const AddFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.AddFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriend::IsInitialized() const {
  return true;
}

void AddFriend::InternalSwap(AddFriend* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddFriend, _impl_.time_)
      + sizeof(AddFriend::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(AddFriend, _impl_.sender_id_)>(
          reinterpret_cast<char*>(&_impl_.sender_id_),
          reinterpret_cast<char*>(&other->_impl_.sender_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddFriend::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[5]);
}

// ===================================================================

class AddGroupReply::_Internal {
 public:
};

AddGroupReply::AddGroupReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.protocol.AddGroupReply)
}
AddGroupReply::AddGroupReply(const AddGroupReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddGroupReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.group_id_, &from._impl_.group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.group_id_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:im.protocol.AddGroupReply)
}

inline void AddGroupReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.group_id_){0}
    , decltype(_impl_.status_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddGroupReply::~AddGroupReply() {
  // @@protoc_insertion_point(destructor:im.protocol.AddGroupReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddGroupReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void AddGroupReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddGroupReply::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.AddGroupReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.group_id_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddGroupReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.AddGroupReply.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddGroupReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.AddGroupReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 group_id = 1;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_group_id(), target);
  }

  // bool status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_status(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.AddGroupReply.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.AddGroupReply)
  return target;
}

size_t AddGroupReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.AddGroupReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 group_id = 1;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_group_id());
  }

  // bool status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddGroupReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddGroupReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddGroupReply::GetClassData() const { return &_class_data_; }


void AddGroupReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddGroupReply*>(&to_msg);
  auto& from = static_cast<const AddGroupReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.AddGroupReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddGroupReply::CopyFrom(const AddGroupReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.AddGroupReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddGroupReply::IsInitialized() const {
  return true;
}

void AddGroupReply::InternalSwap(AddGroupReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddGroupReply, _impl_.status_)
      + sizeof(AddGroupReply::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(AddGroupReply, _impl_.group_id_)>(
          reinterpret_cast<char*>(&_impl_.group_id_),
          reinterpret_cast<char*>(&other->_impl_.group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddGroupReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[6]);
}

// ===================================================================

class AddGroup::_Internal {
 public:
};

AddGroup::AddGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.protocol.AddGroup)
}
AddGroup::AddGroup(const AddGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.sender_id_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sender_id_, &from._impl_.sender_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_) -
    reinterpret_cast<char*>(&_impl_.sender_id_)) + sizeof(_impl_.time_));
  // @@protoc_insertion_point(copy_constructor:im.protocol.AddGroup)
}

inline void AddGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.sender_id_){0}
    , decltype(_impl_.group_id_){0}
    , decltype(_impl_.time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddGroup::~AddGroup() {
  // @@protoc_insertion_point(destructor:im.protocol.AddGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void AddGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.AddGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.time_) -
      reinterpret_cast<char*>(&_impl_.sender_id_)) + sizeof(_impl_.time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 sender_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.AddGroup.message"));
        } else
          goto handle_unusual;
        continue;
      // int32 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.AddGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sender_id = 1;
  if (this->_internal_sender_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_sender_id(), target);
  }

  // int32 group_id = 2;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_group_id(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.AddGroup.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // int32 time = 4;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.AddGroup)
  return target;
}

size_t AddGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.AddGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 sender_id = 1;
  if (this->_internal_sender_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sender_id());
  }

  // int32 group_id = 2;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_group_id());
  }

  // int32 time = 4;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddGroup::GetClassData() const { return &_class_data_; }


void AddGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddGroup*>(&to_msg);
  auto& from = static_cast<const AddGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.AddGroup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_sender_id() != 0) {
    _this->_internal_set_sender_id(from._internal_sender_id());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddGroup::CopyFrom(const AddGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.AddGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddGroup::IsInitialized() const {
  return true;
}

void AddGroup::InternalSwap(AddGroup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddGroup, _impl_.time_)
      + sizeof(AddGroup::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(AddGroup, _impl_.sender_id_)>(
          reinterpret_cast<char*>(&_impl_.sender_id_),
          reinterpret_cast<char*>(&other->_impl_.sender_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[7]);
}

// ===================================================================

class SearchUser::_Internal {
 public:
};

SearchUser::SearchUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.protocol.SearchUser)
}
SearchUser::SearchUser(const SearchUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchUser* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.sender_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.sender_id_ = from._impl_.sender_id_;
  // @@protoc_insertion_point(copy_constructor:im.protocol.SearchUser)
}

inline void SearchUser::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.sender_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SearchUser::~SearchUser() {
  // @@protoc_insertion_point(destructor:im.protocol.SearchUser)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchUser::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void SearchUser::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchUser::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.SearchUser)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.sender_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchUser::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 sender_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.SearchUser.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchUser::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.SearchUser)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sender_id = 1;
  if (this->_internal_sender_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_sender_id(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.SearchUser.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.SearchUser)
  return target;
}

size_t SearchUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.SearchUser)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 sender_id = 1;
  if (this->_internal_sender_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sender_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchUser::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchUser::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchUser::GetClassData() const { return &_class_data_; }


void SearchUser::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchUser*>(&to_msg);
  auto& from = static_cast<const SearchUser&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.SearchUser)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_sender_id() != 0) {
    _this->_internal_set_sender_id(from._internal_sender_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchUser::CopyFrom(const SearchUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.SearchUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchUser::IsInitialized() const {
  return true;
}

void SearchUser::InternalSwap(SearchUser* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.sender_id_, other->_impl_.sender_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchUser::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[8]);
}

// ===================================================================

class SearchGroup::_Internal {
 public:
};

SearchGroup::SearchGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.protocol.SearchGroup)
}
SearchGroup::SearchGroup(const SearchGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.sender_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.sender_id_ = from._impl_.sender_id_;
  // @@protoc_insertion_point(copy_constructor:im.protocol.SearchGroup)
}

inline void SearchGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.sender_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SearchGroup::~SearchGroup() {
  // @@protoc_insertion_point(destructor:im.protocol.SearchGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void SearchGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.SearchGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.sender_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 sender_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.SearchGroup.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.SearchGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sender_id = 1;
  if (this->_internal_sender_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_sender_id(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.SearchGroup.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.SearchGroup)
  return target;
}

size_t SearchGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.SearchGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 sender_id = 1;
  if (this->_internal_sender_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sender_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchGroup::GetClassData() const { return &_class_data_; }


void SearchGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchGroup*>(&to_msg);
  auto& from = static_cast<const SearchGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.SearchGroup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_sender_id() != 0) {
    _this->_internal_set_sender_id(from._internal_sender_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchGroup::CopyFrom(const SearchGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.SearchGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchGroup::IsInitialized() const {
  return true;
}

void SearchGroup::InternalSwap(SearchGroup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.sender_id_, other->_impl_.sender_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[9]);
}

// ===================================================================

class LoginRequest::_Internal {
 public:
};

LoginRequest::LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.protocol.LoginRequest)
}
LoginRequest::LoginRequest(const LoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.password_){}
    , decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.user_id_ = from._impl_.user_id_;
  // @@protoc_insertion_point(copy_constructor:im.protocol.LoginRequest)
}

inline void LoginRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.password_){}
    , decltype(_impl_.user_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:im.protocol.LoginRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.password_.Destroy();
}

void LoginRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.LoginRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.password_.ClearToEmpty();
  _impl_.user_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.LoginRequest.password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.LoginRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.LoginRequest.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.LoginRequest)
  return target;
}

size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.LoginRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // int32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginRequest::GetClassData() const { return &_class_data_; }


void LoginRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginRequest*>(&to_msg);
  auto& from = static_cast<const LoginRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.LoginRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  return true;
}

void LoginRequest::InternalSwap(LoginRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  swap(_impl_.user_id_, other->_impl_.user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace im
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::im::protocol::Message*
Arena::CreateMaybeMessage< ::im::protocol::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::Message >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::SingleChat*
Arena::CreateMaybeMessage< ::im::protocol::SingleChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::SingleChat >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::GroupChat*
Arena::CreateMaybeMessage< ::im::protocol::GroupChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::GroupChat >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::FileTransfer*
Arena::CreateMaybeMessage< ::im::protocol::FileTransfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::FileTransfer >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::AddFriendReply*
Arena::CreateMaybeMessage< ::im::protocol::AddFriendReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::AddFriendReply >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::AddFriend*
Arena::CreateMaybeMessage< ::im::protocol::AddFriend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::AddFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::AddGroupReply*
Arena::CreateMaybeMessage< ::im::protocol::AddGroupReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::AddGroupReply >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::AddGroup*
Arena::CreateMaybeMessage< ::im::protocol::AddGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::AddGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::SearchUser*
Arena::CreateMaybeMessage< ::im::protocol::SearchUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::SearchUser >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::SearchGroup*
Arena::CreateMaybeMessage< ::im::protocol::SearchGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::SearchGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::LoginRequest*
Arena::CreateMaybeMessage< ::im::protocol::LoginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::LoginRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
