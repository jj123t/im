// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto;
namespace im {
namespace protocol {
class AddFriend;
class AddFriendDefaultTypeInternal;
extern AddFriendDefaultTypeInternal _AddFriend_default_instance_;
class AddGroup;
class AddGroupDefaultTypeInternal;
extern AddGroupDefaultTypeInternal _AddGroup_default_instance_;
class FileTransfer;
class FileTransferDefaultTypeInternal;
extern FileTransferDefaultTypeInternal _FileTransfer_default_instance_;
class GroupChat;
class GroupChatDefaultTypeInternal;
extern GroupChatDefaultTypeInternal _GroupChat_default_instance_;
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class SearchGroup;
class SearchGroupDefaultTypeInternal;
extern SearchGroupDefaultTypeInternal _SearchGroup_default_instance_;
class SearchUser;
class SearchUserDefaultTypeInternal;
extern SearchUserDefaultTypeInternal _SearchUser_default_instance_;
class SingleChat;
class SingleChatDefaultTypeInternal;
extern SingleChatDefaultTypeInternal _SingleChat_default_instance_;
}  // namespace protocol
}  // namespace im
PROTOBUF_NAMESPACE_OPEN
template<> ::im::protocol::AddFriend* Arena::CreateMaybeMessage<::im::protocol::AddFriend>(Arena*);
template<> ::im::protocol::AddGroup* Arena::CreateMaybeMessage<::im::protocol::AddGroup>(Arena*);
template<> ::im::protocol::FileTransfer* Arena::CreateMaybeMessage<::im::protocol::FileTransfer>(Arena*);
template<> ::im::protocol::GroupChat* Arena::CreateMaybeMessage<::im::protocol::GroupChat>(Arena*);
template<> ::im::protocol::LoginRequest* Arena::CreateMaybeMessage<::im::protocol::LoginRequest>(Arena*);
template<> ::im::protocol::Message* Arena::CreateMaybeMessage<::im::protocol::Message>(Arena*);
template<> ::im::protocol::SearchGroup* Arena::CreateMaybeMessage<::im::protocol::SearchGroup>(Arena*);
template<> ::im::protocol::SearchUser* Arena::CreateMaybeMessage<::im::protocol::SearchUser>(Arena*);
template<> ::im::protocol::SingleChat* Arena::CreateMaybeMessage<::im::protocol::SingleChat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace im {
namespace protocol {

enum Message_Type : int {
  Message_Type_SINGLE_CHAT = 0,
  Message_Type_GROUP_CHAT = 1,
  Message_Type_FILE_TRANSFER = 2,
  Message_Type_ADD_FRIEND = 3,
  Message_Type_ADD_GROUP = 4,
  Message_Type_SEARCH_USER = 5,
  Message_Type_SEARCH_GROUP = 6,
  Message_Type_LOGIN_REQUEST = 7,
  Message_Type_HEARTBEAT = 8,
  Message_Type_Message_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Message_Type_Message_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Message_Type_IsValid(int value);
constexpr Message_Type Message_Type_Type_MIN = Message_Type_SINGLE_CHAT;
constexpr Message_Type Message_Type_Type_MAX = Message_Type_HEARTBEAT;
constexpr int Message_Type_Type_ARRAYSIZE = Message_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_Type_descriptor();
template<typename T>
inline const std::string& Message_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Message_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Message_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Message_Type_descriptor(), enum_t_value);
}
inline bool Message_Type_Parse(
    const std::string& name, Message_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Message_Type>(
    Message_Type_descriptor(), name, value);
}
// ===================================================================

class Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.Message) */ {
 public:
  inline Message() : Message(nullptr) {};
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  enum ContentCase {
    kSingleChat = 3,
    kGroupChat = 4,
    kFileTransfer = 5,
    kAddFriend = 6,
    kAddGroup = 7,
    kSearchUser = 8,
    kSearchGroup = 9,
    kLoginRequest = 10,
    CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Message_Type Type;
  static constexpr Type SINGLE_CHAT =
    Message_Type_SINGLE_CHAT;
  static constexpr Type GROUP_CHAT =
    Message_Type_GROUP_CHAT;
  static constexpr Type FILE_TRANSFER =
    Message_Type_FILE_TRANSFER;
  static constexpr Type ADD_FRIEND =
    Message_Type_ADD_FRIEND;
  static constexpr Type ADD_GROUP =
    Message_Type_ADD_GROUP;
  static constexpr Type SEARCH_USER =
    Message_Type_SEARCH_USER;
  static constexpr Type SEARCH_GROUP =
    Message_Type_SEARCH_GROUP;
  static constexpr Type LOGIN_REQUEST =
    Message_Type_LOGIN_REQUEST;
  static constexpr Type HEARTBEAT =
    Message_Type_HEARTBEAT;
  static inline bool Type_IsValid(int value) {
    return Message_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Message_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Message_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Message_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Message_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Message_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Message_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 2,
    kTypeFieldNumber = 1,
    kSingleChatFieldNumber = 3,
    kGroupChatFieldNumber = 4,
    kFileTransferFieldNumber = 5,
    kAddFriendFieldNumber = 6,
    kAddGroupFieldNumber = 7,
    kSearchUserFieldNumber = 8,
    kSearchGroupFieldNumber = 9,
    kLoginRequestFieldNumber = 10,
  };
  // .google.protobuf.Timestamp timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .im.protocol.Message.Type type = 1;
  void clear_type();
  ::im::protocol::Message_Type type() const;
  void set_type(::im::protocol::Message_Type value);
  private:
  ::im::protocol::Message_Type _internal_type() const;
  void _internal_set_type(::im::protocol::Message_Type value);
  public:

  // .im.protocol.SingleChat single_chat = 3;
  bool has_single_chat() const;
  private:
  bool _internal_has_single_chat() const;
  public:
  void clear_single_chat();
  const ::im::protocol::SingleChat& single_chat() const;
  ::im::protocol::SingleChat* release_single_chat();
  ::im::protocol::SingleChat* mutable_single_chat();
  void set_allocated_single_chat(::im::protocol::SingleChat* single_chat);
  private:
  const ::im::protocol::SingleChat& _internal_single_chat() const;
  ::im::protocol::SingleChat* _internal_mutable_single_chat();
  public:
  void unsafe_arena_set_allocated_single_chat(
      ::im::protocol::SingleChat* single_chat);
  ::im::protocol::SingleChat* unsafe_arena_release_single_chat();

  // .im.protocol.GroupChat group_chat = 4;
  bool has_group_chat() const;
  private:
  bool _internal_has_group_chat() const;
  public:
  void clear_group_chat();
  const ::im::protocol::GroupChat& group_chat() const;
  ::im::protocol::GroupChat* release_group_chat();
  ::im::protocol::GroupChat* mutable_group_chat();
  void set_allocated_group_chat(::im::protocol::GroupChat* group_chat);
  private:
  const ::im::protocol::GroupChat& _internal_group_chat() const;
  ::im::protocol::GroupChat* _internal_mutable_group_chat();
  public:
  void unsafe_arena_set_allocated_group_chat(
      ::im::protocol::GroupChat* group_chat);
  ::im::protocol::GroupChat* unsafe_arena_release_group_chat();

  // .im.protocol.FileTransfer file_transfer = 5;
  bool has_file_transfer() const;
  private:
  bool _internal_has_file_transfer() const;
  public:
  void clear_file_transfer();
  const ::im::protocol::FileTransfer& file_transfer() const;
  ::im::protocol::FileTransfer* release_file_transfer();
  ::im::protocol::FileTransfer* mutable_file_transfer();
  void set_allocated_file_transfer(::im::protocol::FileTransfer* file_transfer);
  private:
  const ::im::protocol::FileTransfer& _internal_file_transfer() const;
  ::im::protocol::FileTransfer* _internal_mutable_file_transfer();
  public:
  void unsafe_arena_set_allocated_file_transfer(
      ::im::protocol::FileTransfer* file_transfer);
  ::im::protocol::FileTransfer* unsafe_arena_release_file_transfer();

  // .im.protocol.AddFriend add_friend = 6;
  bool has_add_friend() const;
  private:
  bool _internal_has_add_friend() const;
  public:
  void clear_add_friend();
  const ::im::protocol::AddFriend& add_friend() const;
  ::im::protocol::AddFriend* release_add_friend();
  ::im::protocol::AddFriend* mutable_add_friend();
  void set_allocated_add_friend(::im::protocol::AddFriend* add_friend);
  private:
  const ::im::protocol::AddFriend& _internal_add_friend() const;
  ::im::protocol::AddFriend* _internal_mutable_add_friend();
  public:
  void unsafe_arena_set_allocated_add_friend(
      ::im::protocol::AddFriend* add_friend);
  ::im::protocol::AddFriend* unsafe_arena_release_add_friend();

  // .im.protocol.AddGroup add_group = 7;
  bool has_add_group() const;
  private:
  bool _internal_has_add_group() const;
  public:
  void clear_add_group();
  const ::im::protocol::AddGroup& add_group() const;
  ::im::protocol::AddGroup* release_add_group();
  ::im::protocol::AddGroup* mutable_add_group();
  void set_allocated_add_group(::im::protocol::AddGroup* add_group);
  private:
  const ::im::protocol::AddGroup& _internal_add_group() const;
  ::im::protocol::AddGroup* _internal_mutable_add_group();
  public:
  void unsafe_arena_set_allocated_add_group(
      ::im::protocol::AddGroup* add_group);
  ::im::protocol::AddGroup* unsafe_arena_release_add_group();

  // .im.protocol.SearchUser search_user = 8;
  bool has_search_user() const;
  private:
  bool _internal_has_search_user() const;
  public:
  void clear_search_user();
  const ::im::protocol::SearchUser& search_user() const;
  ::im::protocol::SearchUser* release_search_user();
  ::im::protocol::SearchUser* mutable_search_user();
  void set_allocated_search_user(::im::protocol::SearchUser* search_user);
  private:
  const ::im::protocol::SearchUser& _internal_search_user() const;
  ::im::protocol::SearchUser* _internal_mutable_search_user();
  public:
  void unsafe_arena_set_allocated_search_user(
      ::im::protocol::SearchUser* search_user);
  ::im::protocol::SearchUser* unsafe_arena_release_search_user();

  // .im.protocol.SearchGroup search_group = 9;
  bool has_search_group() const;
  private:
  bool _internal_has_search_group() const;
  public:
  void clear_search_group();
  const ::im::protocol::SearchGroup& search_group() const;
  ::im::protocol::SearchGroup* release_search_group();
  ::im::protocol::SearchGroup* mutable_search_group();
  void set_allocated_search_group(::im::protocol::SearchGroup* search_group);
  private:
  const ::im::protocol::SearchGroup& _internal_search_group() const;
  ::im::protocol::SearchGroup* _internal_mutable_search_group();
  public:
  void unsafe_arena_set_allocated_search_group(
      ::im::protocol::SearchGroup* search_group);
  ::im::protocol::SearchGroup* unsafe_arena_release_search_group();

  // .im.protocol.LoginRequest login_request = 10;
  bool has_login_request() const;
  private:
  bool _internal_has_login_request() const;
  public:
  void clear_login_request();
  const ::im::protocol::LoginRequest& login_request() const;
  ::im::protocol::LoginRequest* release_login_request();
  ::im::protocol::LoginRequest* mutable_login_request();
  void set_allocated_login_request(::im::protocol::LoginRequest* login_request);
  private:
  const ::im::protocol::LoginRequest& _internal_login_request() const;
  ::im::protocol::LoginRequest* _internal_mutable_login_request();
  public:
  void unsafe_arena_set_allocated_login_request(
      ::im::protocol::LoginRequest* login_request);
  ::im::protocol::LoginRequest* unsafe_arena_release_login_request();

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:im.protocol.Message)
 private:
  class _Internal;
  void set_has_single_chat();
  void set_has_group_chat();
  void set_has_file_transfer();
  void set_has_add_friend();
  void set_has_add_group();
  void set_has_search_user();
  void set_has_search_group();
  void set_has_login_request();

  inline bool has_content() const;
  inline void clear_has_content();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  int type_;
  union ContentUnion {
    ContentUnion() {}
    ::im::protocol::SingleChat* single_chat_;
    ::im::protocol::GroupChat* group_chat_;
    ::im::protocol::FileTransfer* file_transfer_;
    ::im::protocol::AddFriend* add_friend_;
    ::im::protocol::AddGroup* add_group_;
    ::im::protocol::SearchUser* search_user_;
    ::im::protocol::SearchGroup* search_group_;
    ::im::protocol::LoginRequest* login_request_;
  } content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SingleChat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.SingleChat) */ {
 public:
  inline SingleChat() : SingleChat(nullptr) {};
  virtual ~SingleChat();

  SingleChat(const SingleChat& from);
  SingleChat(SingleChat&& from) noexcept
    : SingleChat() {
    *this = ::std::move(from);
  }

  inline SingleChat& operator=(const SingleChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleChat& operator=(SingleChat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleChat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleChat* internal_default_instance() {
    return reinterpret_cast<const SingleChat*>(
               &_SingleChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SingleChat& a, SingleChat& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleChat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleChat* New() const final {
    return CreateMaybeMessage<SingleChat>(nullptr);
  }

  SingleChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleChat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleChat& from);
  void MergeFrom(const SingleChat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleChat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.SingleChat";
  }
  protected:
  explicit SingleChat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 3,
    kSenderIdFieldNumber = 1,
    kReceiverIdFieldNumber = 2,
  };
  // string content = 3;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_content();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content(
      std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int32 sender_id = 1;
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 receiver_id = 2;
  void clear_receiver_id();
  ::PROTOBUF_NAMESPACE_ID::int32 receiver_id() const;
  void set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_receiver_id() const;
  void _internal_set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.SingleChat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 receiver_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class GroupChat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.GroupChat) */ {
 public:
  inline GroupChat() : GroupChat(nullptr) {};
  virtual ~GroupChat();

  GroupChat(const GroupChat& from);
  GroupChat(GroupChat&& from) noexcept
    : GroupChat() {
    *this = ::std::move(from);
  }

  inline GroupChat& operator=(const GroupChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupChat& operator=(GroupChat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupChat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupChat* internal_default_instance() {
    return reinterpret_cast<const GroupChat*>(
               &_GroupChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GroupChat& a, GroupChat& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupChat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupChat* New() const final {
    return CreateMaybeMessage<GroupChat>(nullptr);
  }

  GroupChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupChat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupChat& from);
  void MergeFrom(const GroupChat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupChat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.GroupChat";
  }
  protected:
  explicit GroupChat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 3,
    kSenderIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
  };
  // string content = 3;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_content();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content(
      std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int32 sender_id = 1;
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 group_id = 2;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.GroupChat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class FileTransfer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.FileTransfer) */ {
 public:
  inline FileTransfer() : FileTransfer(nullptr) {};
  virtual ~FileTransfer();

  FileTransfer(const FileTransfer& from);
  FileTransfer(FileTransfer&& from) noexcept
    : FileTransfer() {
    *this = ::std::move(from);
  }

  inline FileTransfer& operator=(const FileTransfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileTransfer& operator=(FileTransfer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileTransfer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileTransfer* internal_default_instance() {
    return reinterpret_cast<const FileTransfer*>(
               &_FileTransfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FileTransfer& a, FileTransfer& b) {
    a.Swap(&b);
  }
  inline void Swap(FileTransfer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileTransfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileTransfer* New() const final {
    return CreateMaybeMessage<FileTransfer>(nullptr);
  }

  FileTransfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileTransfer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileTransfer& from);
  void MergeFrom(const FileTransfer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileTransfer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.FileTransfer";
  }
  protected:
  explicit FileTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 3,
    kFileHashFieldNumber = 4,
    kSenderIdFieldNumber = 1,
    kReceiverIdFieldNumber = 2,
    kFileSizeFieldNumber = 5,
  };
  // string file_name = 3;
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_file_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_file_name(
      std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // bytes file_hash = 4;
  void clear_file_hash();
  const std::string& file_hash() const;
  void set_file_hash(const std::string& value);
  void set_file_hash(std::string&& value);
  void set_file_hash(const char* value);
  void set_file_hash(const void* value, size_t size);
  std::string* mutable_file_hash();
  std::string* release_file_hash();
  void set_allocated_file_hash(std::string* file_hash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_file_hash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_file_hash(
      std::string* file_hash);
  private:
  const std::string& _internal_file_hash() const;
  void _internal_set_file_hash(const std::string& value);
  std::string* _internal_mutable_file_hash();
  public:

  // int32 sender_id = 1;
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 receiver_id = 2;
  void clear_receiver_id();
  ::PROTOBUF_NAMESPACE_ID::int32 receiver_id() const;
  void set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_receiver_id() const;
  void _internal_set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 file_size = 5;
  void clear_file_size();
  ::PROTOBUF_NAMESPACE_ID::int64 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_file_size() const;
  void _internal_set_file_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.FileTransfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_hash_;
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 receiver_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 file_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AddFriend PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.AddFriend) */ {
 public:
  inline AddFriend() : AddFriend(nullptr) {};
  virtual ~AddFriend();

  AddFriend(const AddFriend& from);
  AddFriend(AddFriend&& from) noexcept
    : AddFriend() {
    *this = ::std::move(from);
  }

  inline AddFriend& operator=(const AddFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriend& operator=(AddFriend&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddFriend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddFriend* internal_default_instance() {
    return reinterpret_cast<const AddFriend*>(
               &_AddFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AddFriend& a, AddFriend& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFriend* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFriend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddFriend* New() const final {
    return CreateMaybeMessage<AddFriend>(nullptr);
  }

  AddFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddFriend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddFriend& from);
  void MergeFrom(const AddFriend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFriend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.AddFriend";
  }
  protected:
  explicit AddFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kSenderIdFieldNumber = 1,
    kReceiverIdFieldNumber = 2,
  };
  // string message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 sender_id = 1;
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 receiver_id = 2;
  void clear_receiver_id();
  ::PROTOBUF_NAMESPACE_ID::int32 receiver_id() const;
  void set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_receiver_id() const;
  void _internal_set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.AddFriend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 receiver_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AddGroup PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.AddGroup) */ {
 public:
  inline AddGroup() : AddGroup(nullptr) {};
  virtual ~AddGroup();

  AddGroup(const AddGroup& from);
  AddGroup(AddGroup&& from) noexcept
    : AddGroup() {
    *this = ::std::move(from);
  }

  inline AddGroup& operator=(const AddGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddGroup& operator=(AddGroup&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddGroup* internal_default_instance() {
    return reinterpret_cast<const AddGroup*>(
               &_AddGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AddGroup& a, AddGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(AddGroup* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddGroup* New() const final {
    return CreateMaybeMessage<AddGroup>(nullptr);
  }

  AddGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddGroup& from);
  void MergeFrom(const AddGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.AddGroup";
  }
  protected:
  explicit AddGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kSenderIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
  };
  // string message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 sender_id = 1;
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 group_id = 2;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.AddGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SearchUser PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.SearchUser) */ {
 public:
  inline SearchUser() : SearchUser(nullptr) {};
  virtual ~SearchUser();

  SearchUser(const SearchUser& from);
  SearchUser(SearchUser&& from) noexcept
    : SearchUser() {
    *this = ::std::move(from);
  }

  inline SearchUser& operator=(const SearchUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchUser& operator=(SearchUser&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchUser* internal_default_instance() {
    return reinterpret_cast<const SearchUser*>(
               &_SearchUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SearchUser& a, SearchUser& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchUser* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchUser* New() const final {
    return CreateMaybeMessage<SearchUser>(nullptr);
  }

  SearchUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchUser& from);
  void MergeFrom(const SearchUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.SearchUser";
  }
  protected:
  explicit SearchUser(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSenderIdFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 sender_id = 1;
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.SearchUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SearchGroup PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.SearchGroup) */ {
 public:
  inline SearchGroup() : SearchGroup(nullptr) {};
  virtual ~SearchGroup();

  SearchGroup(const SearchGroup& from);
  SearchGroup(SearchGroup&& from) noexcept
    : SearchGroup() {
    *this = ::std::move(from);
  }

  inline SearchGroup& operator=(const SearchGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchGroup& operator=(SearchGroup&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchGroup* internal_default_instance() {
    return reinterpret_cast<const SearchGroup*>(
               &_SearchGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SearchGroup& a, SearchGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchGroup* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchGroup* New() const final {
    return CreateMaybeMessage<SearchGroup>(nullptr);
  }

  SearchGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchGroup& from);
  void MergeFrom(const SearchGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.SearchGroup";
  }
  protected:
  explicit SearchGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSenderIdFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 sender_id = 1;
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.SearchGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class LoginRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.LoginRequest) */ {
 public:
  inline LoginRequest() : LoginRequest(nullptr) {};
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return CreateMaybeMessage<LoginRequest>(nullptr);
  }

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.LoginRequest";
  }
  protected:
  explicit LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.LoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message

// .im.protocol.Message.Type type = 1;
inline void Message::clear_type() {
  type_ = 0;
}
inline ::im::protocol::Message_Type Message::_internal_type() const {
  return static_cast< ::im::protocol::Message_Type >(type_);
}
inline ::im::protocol::Message_Type Message::type() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.type)
  return _internal_type();
}
inline void Message::_internal_set_type(::im::protocol::Message_Type value) {
  
  type_ = value;
}
inline void Message::set_type(::im::protocol::Message_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:im.protocol.Message.type)
}

// .google.protobuf.Timestamp timestamp = 2;
inline bool Message::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool Message::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Message::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Message::timestamp() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.timestamp)
  return _internal_timestamp();
}
inline void Message::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Message.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Message::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Message::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:im.protocol.Message.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Message::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Message::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Message.timestamp)
  return _internal_mutable_timestamp();
}
inline void Message::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Message.timestamp)
}

// .im.protocol.SingleChat single_chat = 3;
inline bool Message::_internal_has_single_chat() const {
  return content_case() == kSingleChat;
}
inline bool Message::has_single_chat() const {
  return _internal_has_single_chat();
}
inline void Message::set_has_single_chat() {
  _oneof_case_[0] = kSingleChat;
}
inline void Message::clear_single_chat() {
  if (_internal_has_single_chat()) {
    if (GetArena() == nullptr) {
      delete content_.single_chat_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::SingleChat* Message::release_single_chat() {
  // @@protoc_insertion_point(field_release:im.protocol.Message.single_chat)
  if (_internal_has_single_chat()) {
    clear_has_content();
      ::im::protocol::SingleChat* temp = content_.single_chat_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.single_chat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::SingleChat& Message::_internal_single_chat() const {
  return _internal_has_single_chat()
      ? *content_.single_chat_
      : *reinterpret_cast< ::im::protocol::SingleChat*>(&::im::protocol::_SingleChat_default_instance_);
}
inline const ::im::protocol::SingleChat& Message::single_chat() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.single_chat)
  return _internal_single_chat();
}
inline ::im::protocol::SingleChat* Message::unsafe_arena_release_single_chat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Message.single_chat)
  if (_internal_has_single_chat()) {
    clear_has_content();
    ::im::protocol::SingleChat* temp = content_.single_chat_;
    content_.single_chat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_single_chat(::im::protocol::SingleChat* single_chat) {
  clear_content();
  if (single_chat) {
    set_has_single_chat();
    content_.single_chat_ = single_chat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Message.single_chat)
}
inline ::im::protocol::SingleChat* Message::_internal_mutable_single_chat() {
  if (!_internal_has_single_chat()) {
    clear_content();
    set_has_single_chat();
    content_.single_chat_ = CreateMaybeMessage< ::im::protocol::SingleChat >(GetArena());
  }
  return content_.single_chat_;
}
inline ::im::protocol::SingleChat* Message::mutable_single_chat() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Message.single_chat)
  return _internal_mutable_single_chat();
}

// .im.protocol.GroupChat group_chat = 4;
inline bool Message::_internal_has_group_chat() const {
  return content_case() == kGroupChat;
}
inline bool Message::has_group_chat() const {
  return _internal_has_group_chat();
}
inline void Message::set_has_group_chat() {
  _oneof_case_[0] = kGroupChat;
}
inline void Message::clear_group_chat() {
  if (_internal_has_group_chat()) {
    if (GetArena() == nullptr) {
      delete content_.group_chat_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::GroupChat* Message::release_group_chat() {
  // @@protoc_insertion_point(field_release:im.protocol.Message.group_chat)
  if (_internal_has_group_chat()) {
    clear_has_content();
      ::im::protocol::GroupChat* temp = content_.group_chat_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.group_chat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::GroupChat& Message::_internal_group_chat() const {
  return _internal_has_group_chat()
      ? *content_.group_chat_
      : *reinterpret_cast< ::im::protocol::GroupChat*>(&::im::protocol::_GroupChat_default_instance_);
}
inline const ::im::protocol::GroupChat& Message::group_chat() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.group_chat)
  return _internal_group_chat();
}
inline ::im::protocol::GroupChat* Message::unsafe_arena_release_group_chat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Message.group_chat)
  if (_internal_has_group_chat()) {
    clear_has_content();
    ::im::protocol::GroupChat* temp = content_.group_chat_;
    content_.group_chat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_group_chat(::im::protocol::GroupChat* group_chat) {
  clear_content();
  if (group_chat) {
    set_has_group_chat();
    content_.group_chat_ = group_chat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Message.group_chat)
}
inline ::im::protocol::GroupChat* Message::_internal_mutable_group_chat() {
  if (!_internal_has_group_chat()) {
    clear_content();
    set_has_group_chat();
    content_.group_chat_ = CreateMaybeMessage< ::im::protocol::GroupChat >(GetArena());
  }
  return content_.group_chat_;
}
inline ::im::protocol::GroupChat* Message::mutable_group_chat() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Message.group_chat)
  return _internal_mutable_group_chat();
}

// .im.protocol.FileTransfer file_transfer = 5;
inline bool Message::_internal_has_file_transfer() const {
  return content_case() == kFileTransfer;
}
inline bool Message::has_file_transfer() const {
  return _internal_has_file_transfer();
}
inline void Message::set_has_file_transfer() {
  _oneof_case_[0] = kFileTransfer;
}
inline void Message::clear_file_transfer() {
  if (_internal_has_file_transfer()) {
    if (GetArena() == nullptr) {
      delete content_.file_transfer_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::FileTransfer* Message::release_file_transfer() {
  // @@protoc_insertion_point(field_release:im.protocol.Message.file_transfer)
  if (_internal_has_file_transfer()) {
    clear_has_content();
      ::im::protocol::FileTransfer* temp = content_.file_transfer_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.file_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::FileTransfer& Message::_internal_file_transfer() const {
  return _internal_has_file_transfer()
      ? *content_.file_transfer_
      : *reinterpret_cast< ::im::protocol::FileTransfer*>(&::im::protocol::_FileTransfer_default_instance_);
}
inline const ::im::protocol::FileTransfer& Message::file_transfer() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.file_transfer)
  return _internal_file_transfer();
}
inline ::im::protocol::FileTransfer* Message::unsafe_arena_release_file_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Message.file_transfer)
  if (_internal_has_file_transfer()) {
    clear_has_content();
    ::im::protocol::FileTransfer* temp = content_.file_transfer_;
    content_.file_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_file_transfer(::im::protocol::FileTransfer* file_transfer) {
  clear_content();
  if (file_transfer) {
    set_has_file_transfer();
    content_.file_transfer_ = file_transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Message.file_transfer)
}
inline ::im::protocol::FileTransfer* Message::_internal_mutable_file_transfer() {
  if (!_internal_has_file_transfer()) {
    clear_content();
    set_has_file_transfer();
    content_.file_transfer_ = CreateMaybeMessage< ::im::protocol::FileTransfer >(GetArena());
  }
  return content_.file_transfer_;
}
inline ::im::protocol::FileTransfer* Message::mutable_file_transfer() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Message.file_transfer)
  return _internal_mutable_file_transfer();
}

// .im.protocol.AddFriend add_friend = 6;
inline bool Message::_internal_has_add_friend() const {
  return content_case() == kAddFriend;
}
inline bool Message::has_add_friend() const {
  return _internal_has_add_friend();
}
inline void Message::set_has_add_friend() {
  _oneof_case_[0] = kAddFriend;
}
inline void Message::clear_add_friend() {
  if (_internal_has_add_friend()) {
    if (GetArena() == nullptr) {
      delete content_.add_friend_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::AddFriend* Message::release_add_friend() {
  // @@protoc_insertion_point(field_release:im.protocol.Message.add_friend)
  if (_internal_has_add_friend()) {
    clear_has_content();
      ::im::protocol::AddFriend* temp = content_.add_friend_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.add_friend_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::AddFriend& Message::_internal_add_friend() const {
  return _internal_has_add_friend()
      ? *content_.add_friend_
      : *reinterpret_cast< ::im::protocol::AddFriend*>(&::im::protocol::_AddFriend_default_instance_);
}
inline const ::im::protocol::AddFriend& Message::add_friend() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.add_friend)
  return _internal_add_friend();
}
inline ::im::protocol::AddFriend* Message::unsafe_arena_release_add_friend() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Message.add_friend)
  if (_internal_has_add_friend()) {
    clear_has_content();
    ::im::protocol::AddFriend* temp = content_.add_friend_;
    content_.add_friend_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_add_friend(::im::protocol::AddFriend* add_friend) {
  clear_content();
  if (add_friend) {
    set_has_add_friend();
    content_.add_friend_ = add_friend;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Message.add_friend)
}
inline ::im::protocol::AddFriend* Message::_internal_mutable_add_friend() {
  if (!_internal_has_add_friend()) {
    clear_content();
    set_has_add_friend();
    content_.add_friend_ = CreateMaybeMessage< ::im::protocol::AddFriend >(GetArena());
  }
  return content_.add_friend_;
}
inline ::im::protocol::AddFriend* Message::mutable_add_friend() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Message.add_friend)
  return _internal_mutable_add_friend();
}

// .im.protocol.AddGroup add_group = 7;
inline bool Message::_internal_has_add_group() const {
  return content_case() == kAddGroup;
}
inline bool Message::has_add_group() const {
  return _internal_has_add_group();
}
inline void Message::set_has_add_group() {
  _oneof_case_[0] = kAddGroup;
}
inline void Message::clear_add_group() {
  if (_internal_has_add_group()) {
    if (GetArena() == nullptr) {
      delete content_.add_group_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::AddGroup* Message::release_add_group() {
  // @@protoc_insertion_point(field_release:im.protocol.Message.add_group)
  if (_internal_has_add_group()) {
    clear_has_content();
      ::im::protocol::AddGroup* temp = content_.add_group_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.add_group_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::AddGroup& Message::_internal_add_group() const {
  return _internal_has_add_group()
      ? *content_.add_group_
      : *reinterpret_cast< ::im::protocol::AddGroup*>(&::im::protocol::_AddGroup_default_instance_);
}
inline const ::im::protocol::AddGroup& Message::add_group() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.add_group)
  return _internal_add_group();
}
inline ::im::protocol::AddGroup* Message::unsafe_arena_release_add_group() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Message.add_group)
  if (_internal_has_add_group()) {
    clear_has_content();
    ::im::protocol::AddGroup* temp = content_.add_group_;
    content_.add_group_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_add_group(::im::protocol::AddGroup* add_group) {
  clear_content();
  if (add_group) {
    set_has_add_group();
    content_.add_group_ = add_group;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Message.add_group)
}
inline ::im::protocol::AddGroup* Message::_internal_mutable_add_group() {
  if (!_internal_has_add_group()) {
    clear_content();
    set_has_add_group();
    content_.add_group_ = CreateMaybeMessage< ::im::protocol::AddGroup >(GetArena());
  }
  return content_.add_group_;
}
inline ::im::protocol::AddGroup* Message::mutable_add_group() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Message.add_group)
  return _internal_mutable_add_group();
}

// .im.protocol.SearchUser search_user = 8;
inline bool Message::_internal_has_search_user() const {
  return content_case() == kSearchUser;
}
inline bool Message::has_search_user() const {
  return _internal_has_search_user();
}
inline void Message::set_has_search_user() {
  _oneof_case_[0] = kSearchUser;
}
inline void Message::clear_search_user() {
  if (_internal_has_search_user()) {
    if (GetArena() == nullptr) {
      delete content_.search_user_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::SearchUser* Message::release_search_user() {
  // @@protoc_insertion_point(field_release:im.protocol.Message.search_user)
  if (_internal_has_search_user()) {
    clear_has_content();
      ::im::protocol::SearchUser* temp = content_.search_user_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.search_user_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::SearchUser& Message::_internal_search_user() const {
  return _internal_has_search_user()
      ? *content_.search_user_
      : *reinterpret_cast< ::im::protocol::SearchUser*>(&::im::protocol::_SearchUser_default_instance_);
}
inline const ::im::protocol::SearchUser& Message::search_user() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.search_user)
  return _internal_search_user();
}
inline ::im::protocol::SearchUser* Message::unsafe_arena_release_search_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Message.search_user)
  if (_internal_has_search_user()) {
    clear_has_content();
    ::im::protocol::SearchUser* temp = content_.search_user_;
    content_.search_user_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_search_user(::im::protocol::SearchUser* search_user) {
  clear_content();
  if (search_user) {
    set_has_search_user();
    content_.search_user_ = search_user;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Message.search_user)
}
inline ::im::protocol::SearchUser* Message::_internal_mutable_search_user() {
  if (!_internal_has_search_user()) {
    clear_content();
    set_has_search_user();
    content_.search_user_ = CreateMaybeMessage< ::im::protocol::SearchUser >(GetArena());
  }
  return content_.search_user_;
}
inline ::im::protocol::SearchUser* Message::mutable_search_user() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Message.search_user)
  return _internal_mutable_search_user();
}

// .im.protocol.SearchGroup search_group = 9;
inline bool Message::_internal_has_search_group() const {
  return content_case() == kSearchGroup;
}
inline bool Message::has_search_group() const {
  return _internal_has_search_group();
}
inline void Message::set_has_search_group() {
  _oneof_case_[0] = kSearchGroup;
}
inline void Message::clear_search_group() {
  if (_internal_has_search_group()) {
    if (GetArena() == nullptr) {
      delete content_.search_group_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::SearchGroup* Message::release_search_group() {
  // @@protoc_insertion_point(field_release:im.protocol.Message.search_group)
  if (_internal_has_search_group()) {
    clear_has_content();
      ::im::protocol::SearchGroup* temp = content_.search_group_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.search_group_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::SearchGroup& Message::_internal_search_group() const {
  return _internal_has_search_group()
      ? *content_.search_group_
      : *reinterpret_cast< ::im::protocol::SearchGroup*>(&::im::protocol::_SearchGroup_default_instance_);
}
inline const ::im::protocol::SearchGroup& Message::search_group() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.search_group)
  return _internal_search_group();
}
inline ::im::protocol::SearchGroup* Message::unsafe_arena_release_search_group() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Message.search_group)
  if (_internal_has_search_group()) {
    clear_has_content();
    ::im::protocol::SearchGroup* temp = content_.search_group_;
    content_.search_group_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_search_group(::im::protocol::SearchGroup* search_group) {
  clear_content();
  if (search_group) {
    set_has_search_group();
    content_.search_group_ = search_group;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Message.search_group)
}
inline ::im::protocol::SearchGroup* Message::_internal_mutable_search_group() {
  if (!_internal_has_search_group()) {
    clear_content();
    set_has_search_group();
    content_.search_group_ = CreateMaybeMessage< ::im::protocol::SearchGroup >(GetArena());
  }
  return content_.search_group_;
}
inline ::im::protocol::SearchGroup* Message::mutable_search_group() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Message.search_group)
  return _internal_mutable_search_group();
}

// .im.protocol.LoginRequest login_request = 10;
inline bool Message::_internal_has_login_request() const {
  return content_case() == kLoginRequest;
}
inline bool Message::has_login_request() const {
  return _internal_has_login_request();
}
inline void Message::set_has_login_request() {
  _oneof_case_[0] = kLoginRequest;
}
inline void Message::clear_login_request() {
  if (_internal_has_login_request()) {
    if (GetArena() == nullptr) {
      delete content_.login_request_;
    }
    clear_has_content();
  }
}
inline ::im::protocol::LoginRequest* Message::release_login_request() {
  // @@protoc_insertion_point(field_release:im.protocol.Message.login_request)
  if (_internal_has_login_request()) {
    clear_has_content();
      ::im::protocol::LoginRequest* temp = content_.login_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.login_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::im::protocol::LoginRequest& Message::_internal_login_request() const {
  return _internal_has_login_request()
      ? *content_.login_request_
      : *reinterpret_cast< ::im::protocol::LoginRequest*>(&::im::protocol::_LoginRequest_default_instance_);
}
inline const ::im::protocol::LoginRequest& Message::login_request() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.login_request)
  return _internal_login_request();
}
inline ::im::protocol::LoginRequest* Message::unsafe_arena_release_login_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.Message.login_request)
  if (_internal_has_login_request()) {
    clear_has_content();
    ::im::protocol::LoginRequest* temp = content_.login_request_;
    content_.login_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_login_request(::im::protocol::LoginRequest* login_request) {
  clear_content();
  if (login_request) {
    set_has_login_request();
    content_.login_request_ = login_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Message.login_request)
}
inline ::im::protocol::LoginRequest* Message::_internal_mutable_login_request() {
  if (!_internal_has_login_request()) {
    clear_content();
    set_has_login_request();
    content_.login_request_ = CreateMaybeMessage< ::im::protocol::LoginRequest >(GetArena());
  }
  return content_.login_request_;
}
inline ::im::protocol::LoginRequest* Message::mutable_login_request() {
  // @@protoc_insertion_point(field_mutable:im.protocol.Message.login_request)
  return _internal_mutable_login_request();
}

inline bool Message::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void Message::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline Message::ContentCase Message::content_case() const {
  return Message::ContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SingleChat

// int32 sender_id = 1;
inline void SingleChat::clear_sender_id() {
  sender_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleChat::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleChat::sender_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.SingleChat.sender_id)
  return _internal_sender_id();
}
inline void SingleChat::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sender_id_ = value;
}
inline void SingleChat::set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.SingleChat.sender_id)
}

// int32 receiver_id = 2;
inline void SingleChat::clear_receiver_id() {
  receiver_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleChat::_internal_receiver_id() const {
  return receiver_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleChat::receiver_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.SingleChat.receiver_id)
  return _internal_receiver_id();
}
inline void SingleChat::_internal_set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  receiver_id_ = value;
}
inline void SingleChat::set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_receiver_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.SingleChat.receiver_id)
}

// string content = 3;
inline void SingleChat::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SingleChat::content() const {
  // @@protoc_insertion_point(field_get:im.protocol.SingleChat.content)
  return _internal_content();
}
inline void SingleChat::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:im.protocol.SingleChat.content)
}
inline std::string* SingleChat::mutable_content() {
  // @@protoc_insertion_point(field_mutable:im.protocol.SingleChat.content)
  return _internal_mutable_content();
}
inline const std::string& SingleChat::_internal_content() const {
  return content_.Get();
}
inline void SingleChat::_internal_set_content(const std::string& value) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SingleChat::set_content(std::string&& value) {
  
  content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.SingleChat.content)
}
inline void SingleChat::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.SingleChat.content)
}
inline void SingleChat::set_content(const char* value,
    size_t size) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.SingleChat.content)
}
inline std::string* SingleChat::_internal_mutable_content() {
  
  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SingleChat::release_content() {
  // @@protoc_insertion_point(field_release:im.protocol.SingleChat.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SingleChat::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.SingleChat.content)
}
inline std::string* SingleChat::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.SingleChat.content)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return content_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SingleChat::unsafe_arena_set_allocated_content(
    std::string* content) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (content != nullptr) {
    
  } else {
    
  }
  content_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      content, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.SingleChat.content)
}

// -------------------------------------------------------------------

// GroupChat

// int32 sender_id = 1;
inline void GroupChat::clear_sender_id() {
  sender_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupChat::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupChat::sender_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.GroupChat.sender_id)
  return _internal_sender_id();
}
inline void GroupChat::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sender_id_ = value;
}
inline void GroupChat::set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.GroupChat.sender_id)
}

// int32 group_id = 2;
inline void GroupChat::clear_group_id() {
  group_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupChat::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupChat::group_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.GroupChat.group_id)
  return _internal_group_id();
}
inline void GroupChat::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  group_id_ = value;
}
inline void GroupChat::set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.GroupChat.group_id)
}

// string content = 3;
inline void GroupChat::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupChat::content() const {
  // @@protoc_insertion_point(field_get:im.protocol.GroupChat.content)
  return _internal_content();
}
inline void GroupChat::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:im.protocol.GroupChat.content)
}
inline std::string* GroupChat::mutable_content() {
  // @@protoc_insertion_point(field_mutable:im.protocol.GroupChat.content)
  return _internal_mutable_content();
}
inline const std::string& GroupChat::_internal_content() const {
  return content_.Get();
}
inline void GroupChat::_internal_set_content(const std::string& value) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupChat::set_content(std::string&& value) {
  
  content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.GroupChat.content)
}
inline void GroupChat::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.GroupChat.content)
}
inline void GroupChat::set_content(const char* value,
    size_t size) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.GroupChat.content)
}
inline std::string* GroupChat::_internal_mutable_content() {
  
  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupChat::release_content() {
  // @@protoc_insertion_point(field_release:im.protocol.GroupChat.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupChat::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.GroupChat.content)
}
inline std::string* GroupChat::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.GroupChat.content)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return content_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GroupChat::unsafe_arena_set_allocated_content(
    std::string* content) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (content != nullptr) {
    
  } else {
    
  }
  content_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      content, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.GroupChat.content)
}

// -------------------------------------------------------------------

// FileTransfer

// int32 sender_id = 1;
inline void FileTransfer::clear_sender_id() {
  sender_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FileTransfer::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FileTransfer::sender_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.FileTransfer.sender_id)
  return _internal_sender_id();
}
inline void FileTransfer::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sender_id_ = value;
}
inline void FileTransfer::set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.FileTransfer.sender_id)
}

// int32 receiver_id = 2;
inline void FileTransfer::clear_receiver_id() {
  receiver_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FileTransfer::_internal_receiver_id() const {
  return receiver_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FileTransfer::receiver_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.FileTransfer.receiver_id)
  return _internal_receiver_id();
}
inline void FileTransfer::_internal_set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  receiver_id_ = value;
}
inline void FileTransfer::set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_receiver_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.FileTransfer.receiver_id)
}

// string file_name = 3;
inline void FileTransfer::clear_file_name() {
  file_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FileTransfer::file_name() const {
  // @@protoc_insertion_point(field_get:im.protocol.FileTransfer.file_name)
  return _internal_file_name();
}
inline void FileTransfer::set_file_name(const std::string& value) {
  _internal_set_file_name(value);
  // @@protoc_insertion_point(field_set:im.protocol.FileTransfer.file_name)
}
inline std::string* FileTransfer::mutable_file_name() {
  // @@protoc_insertion_point(field_mutable:im.protocol.FileTransfer.file_name)
  return _internal_mutable_file_name();
}
inline const std::string& FileTransfer::_internal_file_name() const {
  return file_name_.Get();
}
inline void FileTransfer::_internal_set_file_name(const std::string& value) {
  
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FileTransfer::set_file_name(std::string&& value) {
  
  file_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.FileTransfer.file_name)
}
inline void FileTransfer::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.FileTransfer.file_name)
}
inline void FileTransfer::set_file_name(const char* value,
    size_t size) {
  
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.FileTransfer.file_name)
}
inline std::string* FileTransfer::_internal_mutable_file_name() {
  
  return file_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FileTransfer::release_file_name() {
  // @@protoc_insertion_point(field_release:im.protocol.FileTransfer.file_name)
  return file_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileTransfer::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.FileTransfer.file_name)
}
inline std::string* FileTransfer::unsafe_arena_release_file_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.FileTransfer.file_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return file_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FileTransfer::unsafe_arena_set_allocated_file_name(
    std::string* file_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      file_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.FileTransfer.file_name)
}

// bytes file_hash = 4;
inline void FileTransfer::clear_file_hash() {
  file_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FileTransfer::file_hash() const {
  // @@protoc_insertion_point(field_get:im.protocol.FileTransfer.file_hash)
  return _internal_file_hash();
}
inline void FileTransfer::set_file_hash(const std::string& value) {
  _internal_set_file_hash(value);
  // @@protoc_insertion_point(field_set:im.protocol.FileTransfer.file_hash)
}
inline std::string* FileTransfer::mutable_file_hash() {
  // @@protoc_insertion_point(field_mutable:im.protocol.FileTransfer.file_hash)
  return _internal_mutable_file_hash();
}
inline const std::string& FileTransfer::_internal_file_hash() const {
  return file_hash_.Get();
}
inline void FileTransfer::_internal_set_file_hash(const std::string& value) {
  
  file_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FileTransfer::set_file_hash(std::string&& value) {
  
  file_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.FileTransfer.file_hash)
}
inline void FileTransfer::set_file_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.FileTransfer.file_hash)
}
inline void FileTransfer::set_file_hash(const void* value,
    size_t size) {
  
  file_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.FileTransfer.file_hash)
}
inline std::string* FileTransfer::_internal_mutable_file_hash() {
  
  return file_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FileTransfer::release_file_hash() {
  // @@protoc_insertion_point(field_release:im.protocol.FileTransfer.file_hash)
  return file_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileTransfer::set_allocated_file_hash(std::string* file_hash) {
  if (file_hash != nullptr) {
    
  } else {
    
  }
  file_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.FileTransfer.file_hash)
}
inline std::string* FileTransfer::unsafe_arena_release_file_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.FileTransfer.file_hash)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return file_hash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FileTransfer::unsafe_arena_set_allocated_file_hash(
    std::string* file_hash) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (file_hash != nullptr) {
    
  } else {
    
  }
  file_hash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      file_hash, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.FileTransfer.file_hash)
}

// int64 file_size = 5;
inline void FileTransfer::clear_file_size() {
  file_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FileTransfer::_internal_file_size() const {
  return file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FileTransfer::file_size() const {
  // @@protoc_insertion_point(field_get:im.protocol.FileTransfer.file_size)
  return _internal_file_size();
}
inline void FileTransfer::_internal_set_file_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  file_size_ = value;
}
inline void FileTransfer::set_file_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:im.protocol.FileTransfer.file_size)
}

// -------------------------------------------------------------------

// AddFriend

// int32 sender_id = 1;
inline void AddFriend::clear_sender_id() {
  sender_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddFriend::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddFriend::sender_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.AddFriend.sender_id)
  return _internal_sender_id();
}
inline void AddFriend::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sender_id_ = value;
}
inline void AddFriend::set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.AddFriend.sender_id)
}

// int32 receiver_id = 2;
inline void AddFriend::clear_receiver_id() {
  receiver_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddFriend::_internal_receiver_id() const {
  return receiver_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddFriend::receiver_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.AddFriend.receiver_id)
  return _internal_receiver_id();
}
inline void AddFriend::_internal_set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  receiver_id_ = value;
}
inline void AddFriend::set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_receiver_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.AddFriend.receiver_id)
}

// string message = 3;
inline void AddFriend::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddFriend::message() const {
  // @@protoc_insertion_point(field_get:im.protocol.AddFriend.message)
  return _internal_message();
}
inline void AddFriend::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:im.protocol.AddFriend.message)
}
inline std::string* AddFriend::mutable_message() {
  // @@protoc_insertion_point(field_mutable:im.protocol.AddFriend.message)
  return _internal_mutable_message();
}
inline const std::string& AddFriend::_internal_message() const {
  return message_.Get();
}
inline void AddFriend::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddFriend::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.AddFriend.message)
}
inline void AddFriend::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.AddFriend.message)
}
inline void AddFriend::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.AddFriend.message)
}
inline std::string* AddFriend::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddFriend::release_message() {
  // @@protoc_insertion_point(field_release:im.protocol.AddFriend.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddFriend::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.AddFriend.message)
}
inline std::string* AddFriend::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.AddFriend.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AddFriend::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.AddFriend.message)
}

// -------------------------------------------------------------------

// AddGroup

// int32 sender_id = 1;
inline void AddGroup::clear_sender_id() {
  sender_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddGroup::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddGroup::sender_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.AddGroup.sender_id)
  return _internal_sender_id();
}
inline void AddGroup::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sender_id_ = value;
}
inline void AddGroup::set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.AddGroup.sender_id)
}

// int32 group_id = 2;
inline void AddGroup::clear_group_id() {
  group_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddGroup::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddGroup::group_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.AddGroup.group_id)
  return _internal_group_id();
}
inline void AddGroup::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  group_id_ = value;
}
inline void AddGroup::set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.AddGroup.group_id)
}

// string message = 3;
inline void AddGroup::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddGroup::message() const {
  // @@protoc_insertion_point(field_get:im.protocol.AddGroup.message)
  return _internal_message();
}
inline void AddGroup::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:im.protocol.AddGroup.message)
}
inline std::string* AddGroup::mutable_message() {
  // @@protoc_insertion_point(field_mutable:im.protocol.AddGroup.message)
  return _internal_mutable_message();
}
inline const std::string& AddGroup::_internal_message() const {
  return message_.Get();
}
inline void AddGroup::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddGroup::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.AddGroup.message)
}
inline void AddGroup::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.AddGroup.message)
}
inline void AddGroup::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.AddGroup.message)
}
inline std::string* AddGroup::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddGroup::release_message() {
  // @@protoc_insertion_point(field_release:im.protocol.AddGroup.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddGroup::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.AddGroup.message)
}
inline std::string* AddGroup::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.AddGroup.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AddGroup::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.AddGroup.message)
}

// -------------------------------------------------------------------

// SearchUser

// int32 sender_id = 1;
inline void SearchUser::clear_sender_id() {
  sender_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchUser::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchUser::sender_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.SearchUser.sender_id)
  return _internal_sender_id();
}
inline void SearchUser::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sender_id_ = value;
}
inline void SearchUser::set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.SearchUser.sender_id)
}

// string message = 2;
inline void SearchUser::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SearchUser::message() const {
  // @@protoc_insertion_point(field_get:im.protocol.SearchUser.message)
  return _internal_message();
}
inline void SearchUser::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:im.protocol.SearchUser.message)
}
inline std::string* SearchUser::mutable_message() {
  // @@protoc_insertion_point(field_mutable:im.protocol.SearchUser.message)
  return _internal_mutable_message();
}
inline const std::string& SearchUser::_internal_message() const {
  return message_.Get();
}
inline void SearchUser::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SearchUser::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.SearchUser.message)
}
inline void SearchUser::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.SearchUser.message)
}
inline void SearchUser::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.SearchUser.message)
}
inline std::string* SearchUser::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SearchUser::release_message() {
  // @@protoc_insertion_point(field_release:im.protocol.SearchUser.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchUser::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.SearchUser.message)
}
inline std::string* SearchUser::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.SearchUser.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SearchUser::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.SearchUser.message)
}

// -------------------------------------------------------------------

// SearchGroup

// int32 sender_id = 1;
inline void SearchGroup::clear_sender_id() {
  sender_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchGroup::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchGroup::sender_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.SearchGroup.sender_id)
  return _internal_sender_id();
}
inline void SearchGroup::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sender_id_ = value;
}
inline void SearchGroup::set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.SearchGroup.sender_id)
}

// string message = 2;
inline void SearchGroup::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SearchGroup::message() const {
  // @@protoc_insertion_point(field_get:im.protocol.SearchGroup.message)
  return _internal_message();
}
inline void SearchGroup::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:im.protocol.SearchGroup.message)
}
inline std::string* SearchGroup::mutable_message() {
  // @@protoc_insertion_point(field_mutable:im.protocol.SearchGroup.message)
  return _internal_mutable_message();
}
inline const std::string& SearchGroup::_internal_message() const {
  return message_.Get();
}
inline void SearchGroup::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SearchGroup::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.SearchGroup.message)
}
inline void SearchGroup::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.SearchGroup.message)
}
inline void SearchGroup::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.SearchGroup.message)
}
inline std::string* SearchGroup::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SearchGroup::release_message() {
  // @@protoc_insertion_point(field_release:im.protocol.SearchGroup.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchGroup::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.SearchGroup.message)
}
inline std::string* SearchGroup::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.SearchGroup.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SearchGroup::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.SearchGroup.message)
}

// -------------------------------------------------------------------

// LoginRequest

// int32 user_id = 1;
inline void LoginRequest::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginRequest::user_id() const {
  // @@protoc_insertion_point(field_get:im.protocol.LoginRequest.user_id)
  return _internal_user_id();
}
inline void LoginRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void LoginRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:im.protocol.LoginRequest.user_id)
}

// string password = 2;
inline void LoginRequest::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginRequest::password() const {
  // @@protoc_insertion_point(field_get:im.protocol.LoginRequest.password)
  return _internal_password();
}
inline void LoginRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:im.protocol.LoginRequest.password)
}
inline std::string* LoginRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:im.protocol.LoginRequest.password)
  return _internal_mutable_password();
}
inline const std::string& LoginRequest::_internal_password() const {
  return password_.Get();
}
inline void LoginRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginRequest::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.protocol.LoginRequest.password)
}
inline void LoginRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.protocol.LoginRequest.password)
}
inline void LoginRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.protocol.LoginRequest.password)
}
inline std::string* LoginRequest::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginRequest::release_password() {
  // @@protoc_insertion_point(field_release:im.protocol.LoginRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.protocol.LoginRequest.password)
}
inline std::string* LoginRequest::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.protocol.LoginRequest.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoginRequest::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.LoginRequest.password)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace im

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::im::protocol::Message_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::im::protocol::Message_Type>() {
  return ::im::protocol::Message_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
